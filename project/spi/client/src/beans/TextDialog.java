/*
 * TextDialog.java
 *
 * Created on April 8, 2005, 6:03 AM
 */
package beans;

import com.lexpar.util.Log;
import java.awt.Component;
import java.awt.Toolkit;
import java.awt.event.FocusAdapter;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

/**
 * This dialog is invoked from <code>beans.LTextButton</code> to allow the
 * user to enter text in a <code>JTextArea</code>.
 * @author  Nancy McCall
 */
public class TextDialog extends javax.swing.JDialog {

    private String originalText = "";
    private int maximumColumns;
    private boolean cancelButtonWasSelected = false;
    private Component parent;

    /**
     * Creates new form TextDialog.
     * @param title a title for the JDialog
     * @param text the existing text value
     * @param max the maximum column count for the JTextArea
     * @param textField the JTextField from LTextButton
     */
    public TextDialog(Component parent, String title, String text, int max, JTextField textField) {
        super(JOptionPane.getFrameForComponent(parent));
        setModal(false);
        initComponents();
        this.parent = parent;
        TextDialog.textField = textField;
        this.maximumColumns = max;
        originalText = text;
        setTitle(title);

        this.textArea.setDocument(new PlainDocument() {

            public void insertString(int offs, String str, AttributeSet a)
                    throws BadLocationException {
                if (str == null) {
                    return;
                }
                if (textArea.getText().length() + str.length() > maximumColumns && maximumColumns > 0) {
                    // Refuse the insertion and beep to notify user
                    Toolkit.getDefaultToolkit().beep();
                    Log.print("BEEP> LTextField: insertString(" + offs + ",'" + str + "') " + this.getLength());
                } else {
                    super.insertString(offs, str, a);
                }
                okButton.setEnabled(true);
            }

            public void remove(int offs, int len)
                    throws BadLocationException {
                okButton.setEnabled(true);
                super.remove(offs, len);
            }
        });
        if (text != null) {
            this.textArea.setText(text.trim());
        }

        // keep this dialog in front of the coding screen
        this.addFocusListener(new FocusAdapter() {

            public void focusLost(java.awt.event.FocusEvent evt) {
                // on permanent loss of focus, keep on top
                if (!evt.isTemporary()) {
                    ((JDialog) evt.getSource()).toFront();
                }
            }
        });
        setLocationRelativeTo(parent);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        textField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        textField.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        jPanel1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(0, 40, 0, 40)));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        textArea.setColumns(30);
        textArea.setLineWrap(true);
        textArea.setRows(12);
        textArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(textArea);

        jPanel1.add(jScrollPane1);

        okButton.setText("OK");
        okButton.setEnabled(false);
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        jPanel2.add(okButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jPanel2.add(cancelButton);

        jPanel1.add(jPanel2);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        try {
            cancelButtonWasSelected = true;
            closeDialog(null);
        } catch (Throwable t) {
            Log.quit(t);
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        try {
            closeDialog(null);
        } catch (Throwable t) {
            Log.quit(t);
        }
    }//GEN-LAST:event_okButtonActionPerformed

    protected void setDocument(PlainDocument doc) {
        textArea.setDocument(doc);
    }

    /** Closes the dialog */
    protected void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        //Log.print("(textDialog.closeDialog)");
        if (!cancelButtonWasSelected) {
            if (!textArea.getText().equals(originalText)) {
                //Log.print("(textDialog.closeDialog) setting textField" );
                textField.setText(textArea.getText());
                if (parent instanceof LTextButton) {
                    ((LTextButton) parent).setCheckBoxEnabled(true);
                }

            }
        }
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new TextDialog((Component) null, "", "", 0, (JTextField) null);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okButton;
    private javax.swing.JTextArea textArea;
    private static javax.swing.JTextField textField;
    // End of variables declaration//GEN-END:variables
}
