/* $Header: /home/common/cvsarea/ibase/dia/src/beans/IbasePopup.java,v 1.26.2.1 2006/02/22 20:05:51 nancy Exp $ */

/*
 * IbasePopup.java
 *
 * Created on March 18, 2003, 1:27 PM
 */
package beans;

import model.SortedListModel;

import com.lexpar.util.Log;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 * This is the panel that shows the popup when the user clicks the arrow button
 * in <code>IbaseTextField</code>.
 * @author  Bill
 */
public class IbasePopup extends javax.swing.JPanel {

    private ListSelectionListener listListener = new ListListener();
    private boolean userUpdate;

    /**
     * Creates new form IbasePopup.
     * @param userUpdate true if the user may update the model; else false
     * @param repeated true if more than one value is allowed in the field; else false
     */
    public IbasePopup(boolean userUpdate, boolean repeated) {
        this.userUpdate = userUpdate;
        initComponents();
        editButton.setVisible(false);
        choiceScroll.getVerticalScrollBar().setFocusable(false);
        valueScroll.getVerticalScrollBar().setFocusable(false);
        choiceList.addListSelectionListener(listListener);
        valueList.addListSelectionListener(listListener);
        if (!repeated) {
            closeButton.setEnabled(true);
            valuePanel.setVisible(false);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jButton1 = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        choicePanel = new javax.swing.JPanel();
        tableMandatoryLabel = new javax.swing.JLabel();
        choiceScroll = new javax.swing.JScrollPane();
        choiceList = new javax.swing.JList();
        choiceButtonPanel = new javax.swing.JPanel();
        selectButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        valuePanel = new javax.swing.JPanel();
        valueScroll = new javax.swing.JScrollPane();
        valueList = new javax.swing.JList();
        valueButtonPanel = new javax.swing.JPanel();
        valueCenterPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        moveUpButton = new javax.swing.JButton();
        downButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        jButton1.setText("jButton1");
        jButton1.setFocusable(false);

        setLayout(new java.awt.BorderLayout());

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setFocusable(false);
        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setForeground(new java.awt.Color(0, 0, 0));
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setFocusable(false);
        choicePanel.setLayout(new java.awt.BorderLayout());

        choicePanel.setFocusable(false);
        tableMandatoryLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tableMandatoryLabel.setText("List Mandatory");
        tableMandatoryLabel.setPreferredSize(new java.awt.Dimension(41, 16));
        
        choicePanel.add(tableMandatoryLabel, java.awt.BorderLayout.NORTH);

        choiceScroll.setBorder(null);
        choiceScroll.setFocusable(false);
        choiceScroll.setPreferredSize(new java.awt.Dimension(256, 120));
        choiceList.setFocusable(false);
        choiceScroll.setViewportView(choiceList);

        choicePanel.add(choiceScroll, java.awt.BorderLayout.CENTER);

        choiceButtonPanel.setFocusable(false);
        choiceButtonPanel.setMinimumSize(new java.awt.Dimension(208, 45));
        selectButton.setText("Select");
        selectButton.setToolTipText("Select Highlighted Items");
        selectButton.setFocusable(false);
        selectButton.setPreferredSize(null);
        selectButton.setEnabled(false);
        choiceButtonPanel.add(selectButton);

        addButton.setMnemonic('A');
        addButton.setText("Add");
        addButton.setToolTipText("Add New Item");
        addButton.setFocusable(false);
        addButton.setPreferredSize(null);
        choiceButtonPanel.add(addButton);
        
        closeButton.setMnemonic('C');
        closeButton.setText("Close");
        closeButton.setToolTipText("Close Popup");
        closeButton.setFocusable(false);
        closeButton.setPreferredSize(null);
        closeButton.setEnabled(false);
        choiceButtonPanel.add(closeButton);
        // ends here

        editButton.setText("Edit");
        editButton.setToolTipText("Change Selected Text");
        editButton.setPreferredSize(null);
        editButton.setEnabled(false);
        choiceButtonPanel.add(editButton);

        choicePanel.add(choiceButtonPanel, java.awt.BorderLayout.SOUTH);

        jSplitPane1.setLeftComponent(choicePanel);

        valuePanel.setLayout(new java.awt.BorderLayout());

        valuePanel.setFocusable(false);
        valueScroll.setBorder(null);
        valueScroll.setFocusable(false);
        valueScroll.setPreferredSize(new java.awt.Dimension(256, 120));
        valueList.setFocusable(false);
        valueScroll.setViewportView(valueList);

        valuePanel.add(valueScroll, java.awt.BorderLayout.CENTER);

        valueButtonPanel.setFocusable(false);
        valueCenterPanel.setLayout(new java.awt.GridLayout(1, 0));

        valueCenterPanel.setFocusable(false);
        okButton.setFont(new java.awt.Font("Dialog", 1, 11));
        okButton.setText("Ok");
        valueCenterPanel.add(okButton);

        moveUpButton.setMnemonic('U');
        moveUpButton.setText("Up");
        moveUpButton.setToolTipText("Move Item Up");
        moveUpButton.setFocusable(false);
        moveUpButton.setPreferredSize(new java.awt.Dimension(44, 25));
        moveUpButton.setEnabled(false);
        valueCenterPanel.add(moveUpButton);

        downButton.setMnemonic('D');
        downButton.setText("Down");
        downButton.setToolTipText("Move Item Down");
        downButton.setFocusable(false);
        downButton.setPreferredSize(new java.awt.Dimension(44, 25));
        downButton.setEnabled(false);
        valueCenterPanel.add(downButton);

        deleteButton.setMnemonic('D');
        deleteButton.setText("Delete");
        deleteButton.setToolTipText("Delete This Item");
        deleteButton.setFocusable(false);
        deleteButton.setPreferredSize(null);
        deleteButton.setEnabled(false);
        valueCenterPanel.add(deleteButton);

        valueButtonPanel.add(valueCenterPanel);

        valuePanel.add(valueButtonPanel, java.awt.BorderLayout.SOUTH);

        jSplitPane1.setRightComponent(valuePanel);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents

    /**
     * Add the values given in the object[] to the selected list.
     * @param objs an array of <code>String</code> values to be added
     */
    protected void addValues(Object[] objs) {
        //String text = "";
        DefaultListModel model = new DefaultListModel();
        // Get the existing values first.
        for (int i = 0; i < valueList.getModel().getSize(); i++) {
            model.addElement((String) valueList.getModel().getElementAt(i));
        //Log.print("(IbasePopup) old item " + (String)valueList.getModel().getElementAt(i));
        }
        // Add the selected objects to the existing text -- no dups.
        for (int i = 0; i < objs.length; i++) {
            //Log.print("(IbasePopup.addValues) " + objs[i]);
            if (!model.contains(objs[i])) {
                // no dups allowed
                model.addElement((String) objs[i]);
            //Log.print("(IbasePopup) new item " + ((String)objs[i]).trim());
            }
        }
        valueList.setModel(model);
    }

    /**
     * Remove the row matching the given text.
     * @param text the text to be removed
     */
    protected void removeValue(String text) {
        if (getValueModel() != null) {
            int i = getValueModel().indexOf((Object) text);
            if (i > -1) {
                getValueModel().removeElementAt(i);
            }
        }
    }

    /**
     * Remove the rows provided in the parameter from the selected values list.
     * @param rows an array of indices into the model where rows are to be removed
     */
    protected void removeValues(int[] rows) {
        //String text = "";
        //DefaultListModel model = new DefaultListModel();
        DefaultListModel model = getValueModel();
        // Get the values not matching row.
        for (int i = rows.length - 1; i > -1; i--) {
            model.remove(rows[i]);
        }
        valueList.setModel(model);
    }

    /**
     * Set the ListModel used for the choice panel.
     * @param model the model used to show the data values
     */
    public void setModel(model.SortedListModel model) {
        choiceList.setModel(model);
    }

    /**
     * Return the ListModel used for the choice panel.
     * @return the model used to show the data values
     */
    public SortedListModel getModel() {
        return (SortedListModel) choiceList.getModel();
    }

    /**
     * Return the ListModel used for the value panel.
     * @return the model used to show the values
     */
    public DefaultListModel getValueModel() {
        if (valueList.getModel() == null) {
            return null;
        }
        //Log.print("(IbasePopup).getValueModel class " + valueList.getModel());
        return (DefaultListModel) valueList.getModel();
    }

    /**
     * Return the ListSelectionModel used for the choice panel.
     * @return the model
     */
    public ListSelectionModel getChoiceSelectionModel() {
        return choiceList.getSelectionModel();
    }

    /**
     * Set the ListModel for the value panel from the given string.
     * @param str the semicolon-separated <code>String</code> of values
     */
    public void setValuesFromString(String str) {
        int j;
        DefaultListModel model = new DefaultListModel();
        String[] items = str.split(";");
        //Log.print("(IbasePopup).setValuesFromString new model == " + items.length + "/"
        //          + str);
        int row = -1;
        for (int i = 0; i < items.length; i++) {
            if (items[i].trim().length() > 0) {
                for (j = 0; j < model.getSize(); j++) {
                    if (((String) model.getElementAt(j)).compareToIgnoreCase(items[i].trim()) == 0) {
                        // no dups allowed
                        break;
                    }
                }
                if (j >= model.getSize()) {
                    model.addElement(items[i].trim());
                }
            }
        }
        valueList.setModel(model);
    }

    /**
     * Set choice items selected, given an initial string.  Returns first
     * selected item, or null.
     * @param initialString a prefix to try to match for showing selection
     * possibilities
     * @return the first matching value
     */
    public String setChoiceSelection(String initialString) {
        ListModel model = choiceList.getModel();
        int listSize = model.getSize();

        if (initialString == null || initialString.length() == 0 || listSize == 0) {
            choiceList.ensureIndexIsVisible(0);
            return null;
        } else {
            int firstIndex = 0;
            int endIndex = 0;
            while (firstIndex < listSize) {
                if ((((String) model.getElementAt(firstIndex)).compareToIgnoreCase(initialString)) >= 0) {
                    break;
                }
                firstIndex++;
            }
            if (firstIndex >= listSize) {
                firstIndex = listSize - 1;
            } else {
                endIndex = firstIndex;
                while (endIndex < listSize && (((String) model.getElementAt(endIndex)).toUpperCase()).startsWith(initialString.toUpperCase())) {
                    endIndex++;
                    break; // allow highlight of only one item - 07/21/04

                }
            }
            if (endIndex > firstIndex) {
                choiceList.setSelectionInterval(firstIndex, endIndex - 1);
                choiceList.ensureIndexIsVisible(endIndex - 1);
                choiceList.ensureIndexIsVisible(firstIndex);
                //selectButton.setDefaultCapable(true);
                return (String) model.getElementAt(firstIndex);
            } else {
                choiceList.clearSelection();
                choiceList.ensureIndexIsVisible(firstIndex);
                //selectButton.setDefaultCapable(false);
                return null;
            }
        }
    }

    /**
     * Select the rows embraced by <code>first</code> and <code>last</code>.
     * @param first the starting row of selection
     * @param last the ending row of selection
     */
    public void setSelectionInterval(int first, int last) {
        choiceList.setSelectionInterval(first, last);
        if (first != last) {
            choiceList.ensureIndexIsVisible(last);
        }
        choiceList.ensureIndexIsVisible(first);
    }

    /**
     * The listener that's notified when a lists selection value changes.
     */
    private class ListListener implements ListSelectionListener {

        /**
         * Called whenever the value of the selection changes.
         * @param e the event that characterizes the change.
         */
        public void valueChanged(ListSelectionEvent e) {
            try {
                if (e.getSource() == choiceList) {
                    if (choiceList.getSelectedIndex() > -1) {
                        selectButton.setEnabled(true);
                        if (!userUpdate) {
                            addButton.setEnabled(false);
                            editButton.setEnabled(false);
                        } else {
                            editButton.setEnabled(true);
                        }
                    } else {
                        selectButton.setEnabled(false);
                        editButton.setEnabled(false);
                    }
                } else if (e.getSource() == valueList) {
                    if (valueList.getSelectedIndex() > -1) {
                        deleteButton.setEnabled(true);
                    } else {
                        deleteButton.setEnabled(false);
                    }

                    if (!(valueList.getSelectedIndices().length > 1) && valueList.getSelectedIndex() > -1) {
                        moveUpButton.setEnabled(valueList.getSelectedIndex() > 0);
                        downButton.setEnabled(valueList.getSelectedIndex() <
                                (((DefaultListModel) valueList.getModel()).size() - 1));
                    } else {
                        moveUpButton.setEnabled(false);
                        downButton.setEnabled(false);
                    }
                // ends here
                }
            } catch (Throwable th) {
                Log.quit(th);
            }
        }
    }

    /**
     * Return the cancelButton to allow hiding of the popup.
     */
    //protected javax.swing.JButton getCancelButton() {
    //    return cancelButton;
    //}
    /**
     * Return the <code>selectButton</code> to allow focus to stay in the
     * textField while selecting with the button.
     */
    protected javax.swing.JButton getSelectButton() {
        return selectButton;
    }

    /**
     * Return the <code>okButton</code>.
     */
    protected javax.swing.JButton getOkButton() {
        return okButton;
    }

    /**
     * return the <code>addButton</code>.
     */
    protected javax.swing.JButton getAddButton() {
        return addButton;
    }
    //protected javax.swing.JButton getSaveButton() {
    //    return saveButton;
    //}

    /**
     * return the <code>editButton</code>.
     */
    protected javax.swing.JButton getEditButton() {
        return editButton;
    }

    /**
     * return the <code>deleteButton</code>.
     */
    protected javax.swing.JButton getDeleteButton() {
        return deleteButton;
    }

    /**
     * return the <code>moveUpButton</code>.
     */
    protected javax.swing.JButton getMoveUpButton() {
        return moveUpButton;
    }

    /**
     * return the <code>downButton</code>.
     */
    protected javax.swing.JButton getDownButton() {
        return downButton;
    }

    /**
     * return the <code>choiceList</code>.
     */
    protected javax.swing.JList getChoiceList() {
        return choiceList;
    }

    /**
     * return the <code>valueList</code>.
     */
    protected javax.swing.JList getValueList() {
        return valueList;
    }

    /**
     * Remove all selection from the list.
     */
    protected void clearSelection() {
        valueList.getSelectionModel().clearSelection();
    }

    /**
     * return the <code>closeButton</code>.
     */
    protected javax.swing.JButton getCloseButton() {
        return closeButton;
    }
    // ends here

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel choiceButtonPanel;
    private javax.swing.JList choiceList;
    private javax.swing.JPanel choicePanel;
    private javax.swing.JScrollPane choiceScroll;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton downButton;
    private javax.swing.JButton editButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton moveUpButton;
    private javax.swing.JButton okButton;
    private javax.swing.JButton selectButton;
    protected javax.swing.JLabel tableMandatoryLabel;
    private javax.swing.JPanel valueButtonPanel;
    private javax.swing.JPanel valueCenterPanel;
    private javax.swing.JList valueList;
    private javax.swing.JPanel valuePanel;
    private javax.swing.JScrollPane valueScroll;
    private javax.swing.JButton closeButton;
    // End of variables declaration//GEN-END:variables
}
