/* $Header: /home/common/cvsarea/ibase/dia/src/beans/DateSelectionField.java,v 1.2.8.1 2006/02/22 20:05:51 nancy Exp $ */

/*
 * DateSelectionField.java
 */
package beans;

import client.Global;
import java.awt.Color;
import java.awt.Window;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TimeZone;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.UIDefaults;
import javax.swing.UIManager;

/**
 * Called by <code>ui.ReportPage</code> and <code>report.ReportParameters</code>, this
 * is a panel containing a text field with an arrow button that brings up 
 * <code>beans.DateChooser</code> for the user to select a reporting date.
 * @author  bill
 */
public class DateSelectionField extends javax.swing.JPanel {

    private static UIDefaults defaults = null;
    /** Format to use to display the date property. */
    private static final DateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd");
    /** DateChooser instance to use to change the date. */
    private DateChooser chooser = null;
    /** The time zone of the server */
    private static TimeZone serverZone = null;
    /** The value of this field, as a Date */
    Date dateValue = null;

    /** Creates new form DateSelectionField */
    public DateSelectionField() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        textField = new javax.swing.JTextField();
        theArrow = new beans.ArrowButton();

        setLayout(new java.awt.BorderLayout());

        setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        setFocusable(false);
        textField.setEditable(false);
        add(textField, java.awt.BorderLayout.CENTER);

        theArrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                theArrowActionPerformed(evt);
            }
        });

        add(theArrow, java.awt.BorderLayout.EAST);

    }//GEN-END:initComponents

    private void theArrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_theArrowActionPerformed

        if (serverZone == null) {
            serverZone = TimeZone.getTimeZone(Global.theServerConnection.getTimeZoneID());
            DATE_FORMAT.setTimeZone(serverZone);
        }

        Window ancestor = SwingUtilities.getWindowAncestor(this);
        if (ancestor instanceof JDialog) {
            chooser = new DateChooser((JDialog) ancestor, "Select Date", serverZone);
        } else {
            chooser = new DateChooser((JFrame) ancestor, "Select Date", serverZone);
        }
        chooser.setLocationRelativeTo(this);

        Date selectedDate = chooser.select(new Date());
        if (selectedDate != null) {
            setDate(selectedDate);

        } else {
            textField.setText("");
        }
    }//GEN-LAST:event_theArrowActionPerformed

    /**
     * Return the date to the caller.
     * @return a text formatted date value
     */
    public JTextField getTextField() {
        return textField;
    }

    /**
     * Return the date to the caller.
     * @return a <code>Date</code> formatted date value
     */
    public Date getDate() {
        return dateValue;
    }

    /**
     * Set the <code>Date</code> and <code>JTextField</code> formatted date fields.
     * @param theDate the date received from <code>DateChooser</code>
     */
    public void setDate(Date theDate) {
        Date oldValue = dateValue;
        dateValue = theDate;
        if (dateValue == null) {
            textField.setText("");
        } else {
            textField.setText(DATE_FORMAT.format(theDate));
        }
        firePropertyChange("date", oldValue, dateValue);
    }

    /**
     * Get the time zone that has been set by the server.
     * @return the server-set time zone
     */
    public TimeZone getTimeZone() {
        return serverZone;
    }

    /**
     * Enable or disable this field, depending on which report is being run.
     * @param flag true to enable fields; false to disable
     */
    public void setEnabled(boolean flag) {
        if (defaults == null) {
            defaults = UIManager.getDefaults();
        }
        if (flag) {
            textField.setBackground(defaults.getColor("TextField.background"));
            theArrow.setEnabled(true);
        } else {
            textField.setBackground(defaults.getColor("TextField.inactiveBackground"));
            theArrow.setEnabled(false);
        }
    }

    /**
     * Set the length of the JTextField.
     * @param cols the number of columns to use as the length of this field
     */
    public void setColumns(int cols) {
        textField.setColumns(cols);
    }

    /**
     * Set the background color of the <code>JTextField</code>.
     * @param c the color of the field's background
     */
    public void setBackground(Color c) {
        if (textField != null) {
            textField.setBackground(c);
        }
    }

    /**
     * Set the foreground color of the <code>JTextField</code>.
     * @param c the color of the field's foreground
     */
    public void setForeground(Color c) {
        if (textField != null) {
            textField.setForeground(c);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField textField;
    private beans.ArrowButton theArrow;
    // End of variables declaration//GEN-END:variables
}
