/* $Header: /home/common/cvsarea/ibase/dia/src/beans/SpellCheckButton.java,v 1.5.6.1 2006/02/22 20:05:51 nancy Exp $ */
/*
 * SpellCheckButton.java
 *
 * Created on August 6, 2004, 9:21 AM
 */
package beans;

import com.lexpar.util.Log;


import com.wintertree.ssce.PropSpellingSession;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JFrame;

/**
 * An extension of JButton that invokes the spell check when clicked.
 * @author  Nancy McCall
 */
public class SpellCheckButton extends javax.swing.JButton {

    private PropSpellingSession ssce;
    private LField comp = null;

    /** Creates new form BeanForm */
    public SpellCheckButton() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents

        setAction(spellerAction);
        setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/spellcheck.gif")));
        setToolTipText("Spell Check");
        setPreferredSize(new java.awt.Dimension(28, 25));
    }//GEN-END:initComponents
    /**
     * An action that is set on this JButton to invoke the spell check.
     */
    private Action spellerAction = new AbstractAction() {

        public void actionPerformed(java.awt.event.ActionEvent A) {
            try {
                //Log.print("AP speller");
                actionOnSpeller();
            } catch (Throwable e) {
                Log.quit(e);
            }
        }
        

        {
            putValue(Action.MNEMONIC_KEY, new Integer('S'));
        }
    };

    /**
     * Return the spell check to the caller.
     * @return the spell check Action
     */
    public Action getSpeller() {
        return spellerAction;
    }

    /**
     * Create a Frame and show the spell checker in the frame.
     */
    public void actionOnSpeller() {
        // Create a spelling session.        
        ssce = new PropSpellingSession(tools.DiaProperties.getInstance());

        // Check the context of the text area.      
        JFrame ssceFrame = new JFrame();
        String text = comp.getText();
        //Log.print("(SpellcheckButton.setComponent) checking " + text);
        if (text != null && text.length() > 0) {
            JSpellCheckDlg spellDialog = new JSpellCheckDlg(ssceFrame, ssce, text, ssce.comparator,
                    ssce.userLexicons);
            spellDialog.minSuggestDepth = ssce.minSuggestDepth;
            spellDialog.setVisible(true);
            if (!spellDialog.userCanceled()) {
                String spellText = spellDialog.getText();
                if (!spellText.equals(text)) {
                    // change happened
                    comp.setText(spellText);
                }
            }
        }
    }

    /**
     * Set the LField component to be spell checked.
     * @param comp an LField component eligible for spell checking
     */
    public void setComponent(LField comp) {
        this.comp = comp;
    }

    /**
     * Not in use.
     */
    public LTextArea getTextArea() {
        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
