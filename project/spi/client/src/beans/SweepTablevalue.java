/*
 * SweepTablevalue.java
 *
 * Created on April 7, 2004, 6:54 AM
 */
package beans;

import client.ClientTask;
import client.Global;
import client.TaskExecuteQuery;
import client.TaskRequestTablevalueSweep;
import client.TaskSendTablevalue;
import client.TaskUpdateValues;
import common.Log;
import common.TablespecData;
import common.TablevalueData;
import model.QueryComboModel;
import model.ResultSetTableModel;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.StringSelection;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 * Called from <code>ui.TableAdminPage</code>, this is a dialog that sweeps
 * the database for all tablevalues associated with the user-selected table,
 * then shows the values and counts in a table.  Only tables associated with
 * a specific project can be swept.
 * 
 * @author  Nancy McCall
 * @see client.TaskRequestTablevalueSweep
 * @see client.TaskSendTablevalue
 * @see client.TaskUpdateValues
 * @see common.TablespecData
 * @see common.TablevalueData
 * @see server.Handler_request_tablevalue_sweep
 * @see server.Handler_tablespec
 * @see server.Handler_tablevalue
 * @see server.Handler_update_values
 */
public class SweepTablevalue extends javax.swing.JDialog {

    private ResultSetTableModel valueModel;
    private String type = "";
    private int tablespecId;

    /**
     * Creates new form SweepTablevalue.
     * @param parent the component to use in positioning this dialog
     * @param tablespecId the tablespec.tablespec_id of the table selected
     * by the user to sweep
     */
    public SweepTablevalue(Component parent, int tablespecId) {
        super(JOptionPane.getFrameForComponent(parent), false);
        this.tablespecId = tablespecId;
        initComponents();

        loadTablespecData();
        tableName.setEnabled(false);
        tableName.setForeground(Color.black);
        typeCombo.setEnabled(false);
        typeCombo.setForeground(Color.black);
        projectCombo.setEnabled(false);
        projectCombo.setForeground(Color.black);
        requirementCheckBox.setEnabled(false);
        requirementCheckBox.setForeground(Color.black);
        updateableCheckBox.setEnabled(false);
        updateableCheckBox.setForeground(Color.black);

        pack();
    }

    /**
     * A FocusListener to set the first entry of projectCombo to
     * "All Projects" rather than blank. (Do it here to make sure the
     * combo model has time to load data.)
     */
    public class FocusCombo implements FocusListener {

        public void focusGained(FocusEvent e) {
            try {
                if (projectCombo.getItemCount() < 1) {
                    return;
                }
                if (((String) ((QueryComboModel) projectCombo.getModel()).getElementAt(0)).equals("")) {
                    int index = projectCombo.getSelectedIndex();
                    ((QueryComboModel) projectCombo.getModel()).removeElementAt(0);
                    ((QueryComboModel) projectCombo.getModel()).insertElementAt("<All Projects>", 0);
                    projectCombo.setSelectedIndex(index);
                }
            } catch (Throwable t) {
                Log.quit(t);
            }
        }

        public void focusLost(FocusEvent e) {
            try {
            } catch (Throwable t) {
                Log.quit(t);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        tableNameLabel = new javax.swing.JLabel();
        tableName = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        typeCombo = new javax.swing.JComboBox();
        jSeparator2 = new javax.swing.JSeparator();
        requirementCheckBox = new javax.swing.JCheckBox();
        updateableCheckBox = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        projectCombo = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        fontPanel = new javax.swing.JPanel();
        addPanel = new javax.swing.JPanel(); 
        fontFamilyCombo = new javax.swing.JComboBox();
        fontSizeCombo = new javax.swing.JComboBox();
        updateLabel = new javax.swing.JLabel();
        valuePanel = new javax.swing.JPanel();
        valueScrollPane = new javax.swing.JScrollPane();
        valueTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        deleteDataButton = new javax.swing.JButton();
        normalizeButton = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.BorderLayout(50, 5));

        setTitle("Sweep Table Values");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 153)), "Lookup Table", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), new java.awt.Color(0, 0, 153)));
        tableNameLabel.setFont(new java.awt.Font("Dialog", 1, 11));
        tableNameLabel.setText("Name: ");
        tableNameLabel.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(tableNameLabel, gridBagConstraints);

        tableName.setColumns(40);
        tableName.setMinimumSize(new java.awt.Dimension(244, 20));
        jPanel1.add(tableName, new java.awt.GridBagConstraints());

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 11));
        jLabel1.setText("Type: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jLabel1, gridBagConstraints);

        jPanel3.setAlignmentX(0.0F);
        jPanel3.setAlignmentY(0.0F);
        typeCombo.setFont(new java.awt.Font("Dialog", 1, 11));
        typeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "name", "text" }));
        jPanel3.add(typeCombo);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setPreferredSize(new java.awt.Dimension(40, 0));
        jPanel3.add(jSeparator2);

        requirementCheckBox.setFont(new java.awt.Font("Dialog", 1, 11));
        requirementCheckBox.setText(" Required");
        jPanel3.add(requirementCheckBox);

        updateableCheckBox.setFont(new java.awt.Font("Dialog", 1, 11));
        updateableCheckBox.setText("Coder Updateable");
        jPanel3.add(updateableCheckBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jPanel3, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 11));
        jLabel2.setText("Project: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jLabel2, gridBagConstraints);

        projectCombo.setFont(new java.awt.Font("Dialog", 1, 11));
        projectCombo.setModel(
            new QueryComboModel("get project names"
                , /* required-> */ false));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(projectCombo, gridBagConstraints);

        jSeparator1.setPreferredSize(new java.awt.Dimension(0, 4));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        jPanel1.add(jSeparator1, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        updateLabel.setForeground(new java.awt.Color(204, 0, 51));           
        updateLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);           
        updateLabel.setText(" ");            
            
        addPanel.add(updateLabel);
        getContentPane().add(addPanel, java.awt.BorderLayout.EAST);

        valuePanel.setLayout(new java.awt.BorderLayout());

        valuePanel.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 153)), "Table Values", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), new java.awt.Color(0, 0, 153)));
        valueTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        valueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Value", "Data Count", "In Table"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        valueTable.setFocusable(false);
        valueTable.setIntercellSpacing(new java.awt.Dimension(2, 1));
        valueScrollPane.setViewportView(valueTable);
           
        valueTable.setDragEnabled(true);
        valueTable.setTransferHandler(new javax.swing.TransferHandler() {
        	protected Transferable createTransferable(javax.swing.JComponent c) { 
                return new StringSelection(exportString(c));
            }
                
            public int getSourceActions(javax.swing.JComponent c) {
                if (! checkData(c)) {
                    return COPY_OR_MOVE;
                } else {
                    return NONE;
                }                    
            }
                
            public boolean importData(javax.swing.JComponent c, Transferable t) {
                if (canImport(c, t.getTransferDataFlavors())) {
                    try {
                        String str = (String)t.getTransferData(DataFlavor.stringFlavor);                            
                        normalizeData(c, str);
                        return true;
                    } catch (java.awt.datatransfer.UnsupportedFlavorException ufe) {
                     	ufe.printStackTrace();
                    } catch (java.io.IOException ioe) {
                      	ioe.printStackTrace();
                    }
                }

                return false;
            } 
                
            public boolean canImport(javax.swing.JComponent c, DataFlavor[] flavors) {
                for (int i = 0; i < flavors.length; i++) {
                    if (DataFlavor.stringFlavor.equals(flavors[i])) {
                        return true;
                    }
                }
                return false;
            }
        });
        // ends here
        valuePanel.add(valueScrollPane, java.awt.BorderLayout.CENTER);
        
        fontFamilyCombo.setModel(new javax.swing.DefaultComboBoxModel(
            GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames()));
        fontFamilyCombo.getModel().setSelectedItem(
        	valueTable.getFont().getFamily());
        fontFamilyCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fontFamilyComboItemStateChanged(evt);
            }
        });        
        fontPanel.add(fontFamilyCombo);
        
        fontSizeCombo.setModel(new javax.swing.DefaultComboBoxModel(
            new String[] {"10", "11", "12", "14", "16", "18"}));
        fontSizeCombo.getModel().setSelectedItem(
        	Integer.toString(valueTable.getFont().getSize()));
        fontSizeCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fontSizeComboItemStateChanged(evt);
            }
        });
        fontPanel.add(fontSizeCombo);
            
        getContentPane().add(fontPanel, java.awt.BorderLayout.WEST);

        addButton.setFont(new java.awt.Font("Dialog", 1, 11));
        addButton.setForeground(new java.awt.Color(0, 0, 153));
        addButton.setMnemonic('A');
        addButton.setText("Add to Table");
        addButton.setToolTipText("Add the selected value to the table.");
        addButton.setFocusable(false);
        addButton.setEnabled(false);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jPanel2.add(addButton);

        deleteButton.setFont(new java.awt.Font("Dialog", 1, 11));
        deleteButton.setForeground(new java.awt.Color(0, 0, 153));
        deleteButton.setMnemonic('D');
        deleteButton.setText("Delete from Table");
        deleteButton.setToolTipText("Delete the selected value from the table.");
        deleteButton.setFocusable(false);
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jPanel2.add(deleteButton);

        deleteDataButton.setFont(new java.awt.Font("Dialog", 1, 11));
        deleteDataButton.setForeground(new java.awt.Color(0, 0, 153));
        deleteDataButton.setMnemonic('D');
        deleteDataButton.setText("Delete From Data");
        deleteDataButton.setToolTipText("Delete the entered or selected value from the table and  the database.");
        deleteDataButton.setFocusable(false);
        deleteDataButton.setEnabled(false);
        deleteDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDataButtonActionPerformed(evt);
            }
        });

        jPanel2.add(deleteDataButton);

        normalizeButton.setFont(new java.awt.Font("Dialog", 1, 11));
        normalizeButton.setForeground(new java.awt.Color(0, 0, 153));
        normalizeButton.setMnemonic('D');
        normalizeButton.setText("Normalize");
        normalizeButton.setToolTipText("Change the selected value in the database.");
        normalizeButton.setFocusable(false);
        normalizeButton.setEnabled(false);
        normalizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalizeButtonActionPerformed(evt);
            }
        });

        jPanel2.add(normalizeButton);

        valuePanel.add(jPanel2, java.awt.BorderLayout.SOUTH);

        getContentPane().add(valuePanel, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void fontFamilyComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fontFamilyComboItemStateChanged
        valueTable.setFont(new Font(fontFamilyCombo.getModel().getSelectedItem().toString(),
                valueTable.getFont().getStyle(), Integer.parseInt(fontSizeCombo.getModel().getSelectedItem().toString())));
        valueTable.setRowHeight(Integer.parseInt(fontSizeCombo.getModel().getSelectedItem().toString()) + 4);
    }//GEN-LAST:event_fontFamilyComboItemStateChanged

    private void fontSizeComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fontSizeComboItemStateChanged
        valueTable.setFont(new Font(fontFamilyCombo.getModel().getSelectedItem().toString(),
                valueTable.getFont().getStyle(), Integer.parseInt(fontSizeCombo.getModel().getSelectedItem().toString())));
        valueTable.setRowHeight(Integer.parseInt(fontSizeCombo.getModel().getSelectedItem().toString()) + 4);

    }//GEN-LAST:event_fontSizeComboItemStateChanged

    private void enableComponents() {
        if (valueTable.getRowCount() > 0) {
            fontFamilyCombo.setEnabled(true);
            fontSizeCombo.setEnabled(true);
        } else {
            fontFamilyCombo.setFocusable(false);
            fontFamilyCombo.setEnabled(false);
            fontSizeCombo.setFocusable(false);
            fontSizeCombo.setEnabled(false);
        }
    }

    private void normalizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalizeButtonActionPerformed
        try {
            int i = valueTable.getSelectedRow();
            if (i > -1) {
                String originalText = (String) valueTable.getModel().getValueAt(i, 0);
                NormalizeValuesDialog dialog =
                        new NormalizeValuesDialog((Component) projectCombo, (String) typeCombo.getSelectedItem(), originalText, (String) projectCombo.getSelectedItem(), tableName.getText());
                dialog.show();

                String result = dialog.getSelection();
                //Log.print("(AddEditTablespec.normalize) result = " + result);
                if (result != null && !result.equals("")) {
                    int id = ((QueryComboModel) projectCombo.getModel()).getSelectedId();
                    if (id < 0) {
                        id = 0;
                    }
                    final ClientTask task = new TaskUpdateValues(id, tablespecId, (String) typeCombo.getSelectedItem(), originalText, result);
                    task.setCallback(new Runnable() {

                        public void run() {
                            String str = (String) task.getResult();
                            if (str != null) {
                                updateLabel.setText(str + " values were changed");
                                // data has been changed, so reload
                                loadTablevalue();
                            } else {
                                updateLabel.setText("0 values were changed");
                            }
                        }
                    });
                    task.enqueue(this);
                }
            }
        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_normalizeButtonActionPerformed

    private void deleteDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDataButtonActionPerformed
        try {
            int i = valueTable.getSelectedRow();
            if (i > -1) {
                String originalText = (String) valueTable.getModel().getValueAt(i, 0);
                int id = ((QueryComboModel) projectCombo.getModel()).getSelectedId();
                if (id < 0) {
                    id = 0;
                }
                final ClientTask task = new TaskUpdateValues(id, tablespecId, (String) typeCombo.getSelectedItem(), originalText, "");
                task.setCallback(new Runnable() {

                    public void run() {
                        String str = (String) task.getResult();
                        if (str != null) {
                            updateLabel.setText(str + " values were changed");
                            // data has been changed, so reload
                            loadTablevalue();
                        } else {
                            updateLabel.setText("0 values were changed");
                        }
                    }
                });
                task.enqueue(this);
            }
        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_deleteDataButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // Delete from Table
        try {
            int i = valueTable.getSelectedRow();
            if (i > -1) {
                final String originalText = (String) valueTable.getModel().getValueAt(i, 0);
                //Log.print("(ABT).deleteButton row i = " + i + "/" + originalText);
                final ClientTask task;
                TablevalueData data = new TablevalueData();
                data.tablevalue_id = 0;
                data.tablespec_id = tablespecId;
                data.value = "";
                data.level = -1;
                data.old_value = originalText;
                data.model_value = "";
                task = new TaskSendTablevalue(data);
                task.setCallback(new Runnable() {

                    public void run() {
                        String task_ok = (String) task.getResult();
                        //Log.print("sendCodingData: pageId returned " + task_ok);
                        if (task_ok.equals(common.msg.MessageConstants.T_OK)) {
                            // data has been changed, so reload
                            loadTablevalue();
                        } else {
                            Log.print("??? SweepTablevalue delete: not ok");
                        }
                    }
                });
                task.enqueue(this);
            }
        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        try {
            int row = valueTable.getSelectedRow();
            TablevalueData data = new TablevalueData();
            data.tablevalue_id = 0;
            data.tablespec_id = tablespecId;
            data.value = (String) valueTable.getValueAt(row, 0);
            data.level = 0;
            data.old_value = "";
            data.model_value = "";
            final ClientTask task = new TaskSendTablevalue(data);
            task.setCallback(new Runnable() {

                public void run() {
                    String task_ok = (String) task.getResult();
                    //Log.print("sendCodingData: pageId returned " + task_ok);
                    if (task_ok.equals(common.msg.MessageConstants.T_OK)) {
                        // data has been changed, so reload
                        loadTablevalue();
                    } else {
                        Log.print("??? SweepTablevalue delete: not ok");
                    }
                }
            });
            task.enqueue(this);
        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    protected String exportString(javax.swing.JComponent c) {
        JTable table = (JTable) c;
        int row = table.getSelectedRow();
        int column = table.getColumn("Value").getModelIndex();

        return table.getValueAt(row, column).toString();
    }

    protected boolean checkData(javax.swing.JComponent c) {
        JTable table = (JTable) c;
        int row = table.getSelectedRow();
        int column = table.getColumn("Data Count").getModelIndex();

        return ((table.getValueAt(row, column)).toString()).equals("0");
    }

    protected void normalizeData(javax.swing.JComponent c, String str) {
        JTable target = (JTable) c;
        int row = target.getSelectedRow();
        int column = target.getColumn("Value").getModelIndex();

        String targetString = target.getValueAt(row, column).toString();
        if (!targetString.trim().equals(str.trim())) {
            Object[] options = {"Yes", "No"};
            int ok = JOptionPane.showOptionDialog(this,
                    "Change all instances of \'" + str + "\' to \'" + targetString + "\' in " + (String) projectCombo.getSelectedItem() + "?",
                    "Normalize Verification",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
                    null, options, options[1]);
            if (ok == JOptionPane.OK_OPTION) {
                Log.print("SweepTablevalue.normalizeData from " + str + " to " + targetString + " in " +
                        (String) projectCombo.getSelectedItem());

                int selectedID = ((QueryComboModel) projectCombo.getModel()).getSelectedId();
                if (selectedID < 0) {
                    selectedID = 0;
                }
                final ClientTask task = new TaskUpdateValues(selectedID,
                        tablespecId, (String) typeCombo.getSelectedItem(),
                        str, targetString);
                task.setCallback(new Runnable() {

                    public void run() {
                        String str = (String) task.getResult();
                        if (str != null) {
                            updateLabel.setText(str + " values were changed");
                            // data has been changed, so reload
                            loadTablevalue();
                        } else {
                            updateLabel.setText("0 values were changed");
                        }
                    }
                });
                task.enqueue(this);
            }
        }
    }

    private void loadTablespecData() {
        final ClientTask task;
        //Log.print("(SweepTablevalue.loadTablespecData) id=" + tablespecId);
        task = new TaskExecuteQuery("tablespec select", Integer.toString(tablespecId));
        task.setCallback(new Runnable() {

            public void run() {
                ResultSet results = (ResultSet) task.getResult();
                if (results != null) {
                    loadTablespecDataEntry(results);
                } else {
                    Log.print("??? Tables: null resultset returned");
                }
            }
        });
        boolean ok = task.enqueue(this);
    }

    private void loadTablespecDataEntry(ResultSet results) {
        try {
            type = "";
            String table = "";
            if (projectCombo.getItemCount() > 0) {
                ((QueryComboModel) projectCombo.getModel()).removeElementAt(0);
                ((QueryComboModel) projectCombo.getModel()).insertElementAt("<All Projects>", 0);
            }
            if (results.next()) {
                type = results.getString(2);
                table = results.getString(1);
                tableName.setText(table);
                typeCombo.setSelectedItem(type);
                projectCombo.setSelectedItem(results.getString(3));
                if (projectCombo.getSelectedIndex() < 0) {
                    projectCombo.setSelectedIndex(0);
                }
                requirementCheckBox.setSelected(results.getString(4).equals("Required") ? true : false);
                updateableCheckBox.setSelected(results.getString(5).equals("CoderAdd") ? true : false);
            }
        } catch (SQLException e) {
            Log.print("(AddEditTablespec.loadTablespecDataEntry) " + e);
        }
        loadTablevalue();
    }

    /**
     * Load the table values
     * Get the table from which the values needs to be retrieved.
     */
    private void loadTablevalue() {
        final ClientTask task;
        String table;
        //select the table on the basis of type of the field.
        //If the field type is "name" the table should be <codd>name</code>;
        //else the table will be <code>namevalue</code>.
        if (type.equals("name")) {
            table = "namevalue";
        } else {
            table = "value";
        }

        task = new TaskRequestTablevalueSweep(table, tablespecId);
        task.setCallback(new Runnable() {

            public void run() {
                ResultSet results = (ResultSet) task.getResult();
                if (results != null) {
                    loadTablevalueEntry(results);
                } else {
                    Log.print("??? Tablevalues: null resultset returned");
                }
            }
        });
        boolean ok = task.enqueue(this);
    }

    /**
     * Diplay the values in the table.
     * @param rs ResultSet, the values reside in. 
     */
    private void loadTablevalueEntry(ResultSet rs) {
        valueModel = new ResultSetTableModel(rs, new String[]{"Value", "Data Count", "In Table"});
        sorter = new TableSorter(valueModel);
        valueTable.setModel(sorter);
        sorter.setTableHeader(valueTable.getTableHeader());
        valueTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                //Ignore extra messages.
                if (e.getValueIsAdjusting()) {
                    return;
                }

                ListSelectionModel lsm =
                        (ListSelectionModel) e.getSource();
                if (lsm.isSelectionEmpty() || valueTable.getSelectedRow() < 0) {
                    //no rows are selected
                    addButton.setEnabled(false);
                    deleteDataButton.setEnabled(false);
                    deleteButton.setEnabled(false);
                    normalizeButton.setEnabled(false);
                } else {
                    int row = valueTable.getSelectedRow();
                    if (!valueTable.getValueAt(row, 2).equals("Yes")) {
                        // value is not in the table
                        if (((String) valueTable.getValueAt(row, 0)).equals("")) {
                            // value is space, can't add to table
                            addButton.setEnabled(false);
                        } else {
                            addButton.setEnabled(true);
                        }
                        deleteButton.setEnabled(false);
                    } else {
                        addButton.setEnabled(false);
                        deleteButton.setEnabled(true);
                    }
                    if (Integer.parseInt((String) valueTable.getValueAt(row, 1)) > 0) {
                        // the value does occur in the data
                        deleteDataButton.setEnabled(true);
                        // presumably the users has AdminEdit permission if he got here,
                        // but check anyway.
                        if (Global.theServerConnection.getPermissionAdminEdit()) {
                            normalizeButton.setEnabled(true);
                        } else {
                            normalizeButton.setEnabled(false);
                        }
                    } else {
                        deleteDataButton.setEnabled(false);
                        normalizeButton.setEnabled(false);
                    }
                }
            }
        });

        TableColumn column;
        column = valueTable.getColumnModel().getColumn(0); // value

        column.setPreferredWidth(250);
        column = valueTable.getColumnModel().getColumn(1); // Data Count

        column.setCellRenderer(centerCellRenderer);
        column = valueTable.getColumnModel().getColumn(2); // In Table

        column.setCellRenderer(centerCellRenderer);

        enableComponents();
    }
    /**
     * This is a renderer to center column values.
     */
    TableCellRenderer centerCellRenderer = new DefaultTableCellRenderer() {

        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {

            // Value is text
            setText((value == null) ? "" : value.toString());
            //setIcon(null);

            setHorizontalAlignment(JLabel.CENTER);
            return this;
        }
    };

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel fontPanel;
    private javax.swing.JPanel addPanel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton deleteDataButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton normalizeButton;
    private javax.swing.JComboBox projectCombo;
    private javax.swing.JCheckBox requirementCheckBox;
    private javax.swing.JTextField tableName;
    private javax.swing.JLabel tableNameLabel;
    private javax.swing.JComboBox typeCombo;
    private javax.swing.JComboBox fontFamilyCombo;
    private javax.swing.JComboBox fontSizeCombo;
    private javax.swing.JLabel updateLabel;
    private javax.swing.JCheckBox updateableCheckBox;
    private javax.swing.JPanel valuePanel;
    private javax.swing.JScrollPane valueScrollPane;
    private javax.swing.JTable valueTable;
    private TableSorter sorter;
    // End of variables declaration//GEN-END:variables
}
