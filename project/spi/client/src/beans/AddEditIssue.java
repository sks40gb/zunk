/* $Header: /home/common/cvsarea/ibase/dia/src/beans/AddEditIssue.java,v 1.9.6.1 2006/02/17 13:40:06 nancy Exp $ */
package beans;

import beans.BoxButton;
import client.ClientTask;
import client.TaskExecuteQuery;
import client.TaskSendPageIssue;
import common.Log;
import model.ResultSetTableModel;

import java.awt.Component;

import java.awt.Toolkit;

import java.sql.ResultSet;
import javax.swing.JOptionPane;

import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
   
/**
 * Called from ui.SplitPaneViewer, this dialog allows the user to enter
 * data to the pageissue table for export to an IS line in the LFP for
 * the current page.  This dialog does the Delete, Up and Down actions via
 * client.TaskSendPageIssue; Add and Edit of text is handled in beans.AddEditIssueDialog.
 * 
 * @author  Nancy
 * 
 * @see beans.AddEditIssueDialog
 * @see client.TaskSendPageIssue
 * @see server.Handler_pageissue
 */
public final class AddEditIssue extends javax.swing.JDialog {

    /** Page Id */
    private int pageId;

    /**
     * Creates new form AddEditIssue.
     * @param comp the component to use in positioning this dialog
     * @param pageId page.page_id of the page so associate with this issue
     */
    public AddEditIssue(Component comp, int pageId) {
        super(JOptionPane.getFrameForComponent(comp), true);        
        this.pageId = pageId;
        
        initComponents();

        getPageissueData();

        issueTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        issueTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                //Ignore extra messages.
                if (e.getValueIsAdjusting()) {
                    return;
                }

                ListSelectionModel lsm =
                        (ListSelectionModel) e.getSource();
                if (lsm.isSelectionEmpty()) {
                    //no rows are selected
                    upButton.setEnabled(false);
                    downButton.setEnabled(false);
                    editButton.setEnabled(false);
                    deleteButton.setEnabled(false);
                    addButton.setEnabled(true);
                } else {
                    int row = issueTable.getSelectedRow();
                    // set the up and down arrow buttons
                    if (row <= 0) {
                        upButton.setEnabled(false);
                    } else {
                        upButton.setEnabled(true);
                    }
                    if (row >= issueTable.getRowCount() - 1) {
                        downButton.setEnabled(false);
                    } else {
                        downButton.setEnabled(true);
                    }
                    editButton.setEnabled(true);
                    deleteButton.setEnabled(true);
                    addButton.setEnabled(true);
                }
            }
        });

        upButton = new BoxButton(BoxButton.UP);
        downButton = new BoxButton(BoxButton.DOWN);
        upButton.setEnabled(false);
        downButton.setEnabled(false);
        upDownPane.add(upButton);
        upDownPane.add(downButton);
        upButton.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upButtonActionPerformed(evt);
            }
        });
        downButton.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downButtonActionPerformed(evt);
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        movePane = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        upDownPane = new javax.swing.JPanel();
        issuePane = new javax.swing.JPanel();
        issueScrollPane = new javax.swing.JScrollPane();
        issueTable = new javax.swing.JTable();
        bottomPane = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        editButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        setTitle("Issue Dialog");
        setModal(true);

        movePane.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14));
        jLabel2.setText("  Move Selected Issue: ");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        movePane.add(jLabel2);

        upDownPane.setLayout(new java.awt.GridLayout(2, 1));
        movePane.add(upDownPane);

        getContentPane().add(movePane, java.awt.BorderLayout.NORTH);

        issuePane.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        issuePane.setPreferredSize(new java.awt.Dimension(359, 309));
        issuePane.setLayout(new java.awt.BorderLayout());

        issueScrollPane.setFocusable(false);
        issueScrollPane.setPreferredSize(new java.awt.Dimension(753, 503));

        issueTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        issueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        issueTable.setFocusable(false);
        issueTable.setIntercellSpacing(new java.awt.Dimension(2, 1));
        issueTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                issueTableMouseClicked(evt);
            }
        });
        issueScrollPane.setViewportView(issueTable);

        issuePane.add(issueScrollPane, java.awt.BorderLayout.CENTER);

        getContentPane().add(issuePane, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0, 20, 0));

        editButton.setMnemonic('E');
        editButton.setText("  Edit  ");
        editButton.setToolTipText("Edit the selected issue.");
        editButton.setEnabled(false);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        jPanel1.add(editButton);

        addButton.setMnemonic('A');
        addButton.setText("  Add ");
        addButton.setToolTipText("Add an issue for this page.");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addButton);

        deleteButton.setMnemonic('D');
        deleteButton.setText("Delete");
        deleteButton.setToolTipText("Delete the selected issue.");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        jPanel1.add(deleteButton);

        bottomPane.add(jPanel1);

        getContentPane().add(bottomPane, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void issueTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_issueTableMouseClicked
        try {
            if (evt.getClickCount() > 1) {
                // double-click on a row
                editButton.doClick();
            }
        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_issueTableMouseClicked

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        try {
            int i = issueTable.getSelectedRow();
            if (issueTable.getModel() != null) {
                AddEditIssueDialog issueDialog = new AddEditIssueDialog((Component) issueTable, pageId, 0);
                issueDialog.setModal(true);
                issueDialog.show();
                getPageissueData();
            }
        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        try {
            int i = issueTable.getSelectedRow();
            //Log.print("(Issues).deleteButton row i = " + i);

            if (i > -1) {
                Toolkit.getDefaultToolkit().beep();
                //Log.print("BEEP> Project.deleteButtonActionPerformed, i > -1");
                Object[] options = {"Yes", "No"};
                int ok = JOptionPane.showOptionDialog(this,
                        "Do you want to delete the selected issue:  " + issueTable.getModel().getValueAt(i, 0) + " ", // fieldname
                        "Delete Verification",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        options,
                        options[1]);
                if (ok == JOptionPane.YES_OPTION) {
                    //Log.print("(Issues).editButton table selection is " + i);
                    int sequence = Integer.parseInt((String) issueTable.getModel().getValueAt(i, 1));
                    final ClientTask task = new TaskSendPageIssue(pageId, sequence, "");
                    boolean Aok = task.enqueue(this);
                    getPageissueData();
                }
            }
        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        try {
            int i = issueTable.getSelectedRow();
            //Log.print("(Issues).editButton table selection is " + i);
            int sequence = Integer.parseInt((String) issueTable.getModel().getValueAt(i, 1));
            //Open the <code>AddEditIssueDialog</code> dialog box.
            AddEditIssueDialog issueDialog = new AddEditIssueDialog(this, pageId, sequence);
            issueDialog.setModal(true);
            issueDialog.show();
            getPageissueData();
        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_editButtonActionPerformed

    /**
     * Send task to server to move the currently-selected row up one position.
     */
    private void upButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            int i = issueTable.getSelectedRow();
            final ClientTask task = new TaskSendPageIssue(pageId, Integer.parseInt((String) issueTable.getModel().getValueAt(i, 1)) // sequence
                    , -1); // move up

            task.enqueue(this);
            getPageissueData();
        } catch (Throwable th) {
            Log.quit(th);
        }
    }

    /**
     * Send task to server to move the currently-selected row down one position.
     */
    private void downButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            int i = issueTable.getSelectedRow();
            final ClientTask task = new TaskSendPageIssue(pageId, Integer.parseInt((String) issueTable.getModel().getValueAt(i, 1)) // sequence
                    , 1); // move down

            task.enqueue(this);
            getPageissueData();
        } catch (Throwable th) {
            Log.quit(th);
        }
    }

    /**
     * Call ClientTask to enqueue a task to get the existing IS text for the given page.
     * The data is returned in a ResultSet.
     */
    private void getPageissueData() {
        //Log.print("(IssueDialog.getIssueData) " + pageId);
        final ClientTask task = new TaskExecuteQuery("pageissue select", Integer.toString(pageId));
        task.setCallback(new Runnable() {

            public void run() {
                getPageissueDataEntry((ResultSet) task.getResult());
            }
        });
        boolean ok = task.enqueue(this);
    }

    /**
     * Retrieve pageissue from server.
     * @param queryResult - ResultSet containing the issue_name
     * @see getIssueData
     */
    private void getPageissueDataEntry(ResultSet queryResult) {
        if (queryResult != null) {
            issueTable.setModel(new ResultSetTableModel(queryResult, new String[]{"Issue"}));
        }
    }
    

    private javax.swing.plaf.basic.BasicArrowButton upButton;
    private javax.swing.plaf.basic.BasicArrowButton downButton;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel bottomPane;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JPanel issuePane;
    private javax.swing.JScrollPane issueScrollPane;
    private javax.swing.JTable issueTable;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel movePane;
    private javax.swing.JPanel upDownPane;
    // End of variables declaration//GEN-END:variables
}
