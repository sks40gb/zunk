/* $Header: /home/common/cvsarea/ibase/dia/src/client/DiaLogin.java,v 1.26.6.1 2006/03/09 12:09:16 nancy Exp $ */

/*
 * DiaLogin.java
 *
 * Created on May 10, 2003, 10:48 AM
 */
package client;

import beans.LUpperCaseTextField;
import common.Log;
import common.msg.MD5;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.util.Arrays;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.event.DocumentListener;

/**
 * Allow the user to enter users.user_name and users.password to log in to
 * either DIA admin or DIA viewer.  The sert IP and port may be changed here.
 *
 * @author  Bill
 */
public final class DiaLogin extends JFrame {

    boolean admin;
    private final int PASSWORD_LENGTH = 8;
    String server_ip = null;
    /**
     * Creates new form DiaLogin.
     * @param initialData Initial (default) values for user name and IP info.
     * @param admin true to start the admin application; false for the viewer
     */
    public DiaLogin(Data initialData, boolean admin) {
        this.admin = admin;
         if(initialData.serverIP != null){
             System.out.println("initialData.serverIP" + initialData.serverIP);
              server_ip = initialData.serverIP ;
			  System.out.println("serverIP" + server_ip);
           }        
        initComponents();

        this.setTitle("SPiCA Login");
        // set the frame's icon
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Image iconImage;
        iconImage = toolkit.getImage(admin
                ? "images/ibase_admin.gif"
                : "images/ibase8-32.gif");
        setIconImage(iconImage);
          
        // load initial values
        userNameField.setText(initialData.userName == null ? "" : initialData.userName);
        serverIPField.setText(initialData.serverIP == null ? "" : initialData.serverIP);

        // set okButton to respond to enter key
        this.getRootPane().setDefaultButton(okButton);

        // set up listeners for text changes
        userNameField.getDocument().addDocumentListener(myDocumentListener);
        passwordField.getDocument().addDocumentListener(myDocumentListener);
        newPasswordField.getDocument().addDocumentListener(myDocumentListener);
        confirmField.getDocument().addDocumentListener(myDocumentListener);
        serverIPField.getDocument().addDocumentListener(myDocumentListener);

        // Center the frame on the screen.
        toolkit = Toolkit.getDefaultToolkit();
        Dimension frameSize = this.getSize();
        Dimension screenSize = toolkit.getScreenSize();
        int hpos = (int) (screenSize.getWidth() - frameSize.getWidth()) / 2;
        int vpos = (int) (screenSize.getHeight() - frameSize.getHeight()) / 2;
        this.setLocation(new Point((hpos < 0 ? 0 : hpos), (vpos < 0 ? 0 : vpos)));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        loginPanel = new javax.swing.JPanel();
        ibaseLogo1 = new javax.swing.JLabel();
        loginTitle = new javax.swing.JLabel();
        feedbackArea = new javax.swing.JTextArea();
        userNameLabel = new javax.swing.JLabel();
        userNameField = new LUpperCaseTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        newPasswordLabel = new javax.swing.JLabel();
        newPasswordField = new javax.swing.JPasswordField();
        confirmLabel = new javax.swing.JLabel();
        confirmField = new javax.swing.JPasswordField();
        serverIPLabel = new javax.swing.JLabel();
        serverIPField = new javax.swing.JTextField();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        loginServer = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
            public void windowActivated(java.awt.event.WindowEvent evt) {
                loginWindowActivated(evt);
            }
        });

        loginPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(30, 30, 30, 30), javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED), javax.swing.BorderFactory.createEmptyBorder(30, 40, 20, 60))));
        loginPanel.setLayout(new java.awt.GridBagLayout());

        loginPanel.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(30, 30, 30, 30)), new javax.swing.border.CompoundBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED), new javax.swing.border.EmptyBorder(new java.awt.Insets(30, 40, 20, 60)))));
        ibaseLogo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/spica.jpg")));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 65);
        loginPanel.add(ibaseLogo1, gridBagConstraints);

        loginTitle.setBackground(new java.awt.Color(204, 204, 204));
        loginTitle.setFont(new java.awt.Font("Dialog", 1, 36));
        loginTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loginTitle.setText(admin ? "SPiCA Admin Login" : "SPiCA Login");
        loginTitle.setMaximumSize(new java.awt.Dimension(500, 60));
        loginTitle.setMinimumSize(new java.awt.Dimension(500, 60));
        loginTitle.setPreferredSize(new java.awt.Dimension(500,60));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = -119;
        gridBagConstraints.ipady = -17;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        loginPanel.add(loginTitle, gridBagConstraints);
         
        loginServer.setBackground(new java.awt.Color(204, 204, 204));
		loginServer.setFont(new java.awt.Font("Dialog", 1, 10));
        loginServer.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        loginServer.setText(server_ip+"...");        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;       
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        //loginPanel.add(loginServer, gridBagConstraints);
        // inherit background from enclosing container
        feedbackArea.setBackground(null);
        feedbackArea.setEditable(false);
        feedbackArea.setFont(new java.awt.Font("Dialog", 1, 18));
        feedbackArea.setForeground(java.awt.Color.red.darker());
        feedbackArea.setLineWrap(true);
        feedbackArea.setRows(3);
        feedbackArea.setWrapStyleWord(true);
        feedbackArea.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        loginPanel.add(feedbackArea, gridBagConstraints);

        userNameLabel.setText("User Name: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        loginPanel.add(userNameLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        loginPanel.add(userNameField, gridBagConstraints);

        passwordLabel.setText("Password:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        loginPanel.add(passwordLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        loginPanel.add(passwordField, gridBagConstraints);

        newPasswordLabel.setText("New Password:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 0, 10, 0);
        loginPanel.add(newPasswordLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(25, 10, 10, 0);
        loginPanel.add(newPasswordField, gridBagConstraints);

        confirmLabel.setText("Confirm:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        loginPanel.add(confirmLabel, gridBagConstraints);

        confirmField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 196;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        loginPanel.add(confirmField, gridBagConstraints);

        serverIPLabel.setText("Server IP:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        loginPanel.add(serverIPLabel, gridBagConstraints);

        serverIPField.setColumns(15);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        loginPanel.add(serverIPField, gridBagConstraints);

        buttonPanel.setLayout(new java.awt.GridLayout(1, 0, 60, 0));

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginOKPerformed(evt);
            }
        });

        buttonPanel.add(okButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginCancelPerformed(evt);
            }
        });

        buttonPanel.add(cancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        loginPanel.add(buttonPanel, gridBagConstraints);

        getContentPane().add(loginPanel, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents
    DocumentListener myDocumentListener = new DocumentListener() {

        public void insertUpdate(javax.swing.event.DocumentEvent A) {
            checkOkEnable();
        }

        public void removeUpdate(javax.swing.event.DocumentEvent A) {
            checkOkEnable();
        }

        public void changedUpdate(javax.swing.event.DocumentEvent A) {
            checkOkEnable();
        }
    };

    /**
     * Enable the Ok button if all required field is filled up.
     */
    private void checkOkEnable() {
        char[] newPassword = newPasswordField.getPassword();
        //If new password is not entered or user wants to keep the old password.
        if (newPassword.length == 0) {
            confirmField.setEditable(false);
        } else {
            // If the new password is entered then confirm the password whether
            // it matches or not.
            confirmField.setEditable(true);
            Arrays.fill(newPassword, '\u0000');
            char[] confirm = confirmField.getPassword();
            if (confirm.length == 0) {
                okButton.setEnabled(false);
                return;
            }
            Arrays.fill(confirm, '\u0000');
        }
        char[] password = passwordField.getPassword();
        Arrays.fill(password, '\u0000');
        if (userNameField.getText().length() == 0 || password.length == 0 || serverIPField.getText().length() == 0) {
            okButton.setEnabled(false);
            return;
        }
        okButton.setEnabled(true);
    }

    /**
     * If the user name is not entered then focus the user name field.
     * Else focus the password text field.
     * @param evt
     */
    private void loginWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_loginWindowActivated
        // Add your handling code here:
        try {
            checkOkEnable();
            if (userNameField.getText().trim().length() == 0) {
                userNameField.requestFocus();
            } else {
                passwordField.requestFocus();
            }
        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_loginWindowActivated

    private void loginCancelPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginCancelPerformed
        try {
            // Add your handling code here:
            exitForm(null);
        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_loginCancelPerformed

    /**
     * Click Ok to login
     * It will check name, password, server IP etc.
     * @param evt
     */
    private void loginOKPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginOKPerformed
        // Add your handling code here:
        try {
            // Read and check entered values
            Data loginData = new Data();
            checkData(loginData);

            if (feedbackArea.getText().length() == 0) {
                // no message, so the data were OK
                // save data and wake up thread
                synchronized (this) {
                    okButton.setEnabled(false);
                    this.loginData = loginData;
                    // Note.  This will allow getLoginData() to proceed,
                    // if it is waiting.
                    this.notify();
                }
            } else {
                Arrays.fill(loginData.password, '\u0000');
                loginData.password = null;
                loginData.newPassword = "";
            }
        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_loginOKPerformed

    // Check entered data
    // Note.  After failure, caller will clear loginData.password
    private void checkData(Data loginData) {
        feedbackArea.setText("");

        // Get the user name and convet to upper case.
        loginData.userName = userNameField.getText().trim().toUpperCase();
        if (loginData.userName.length() == 0) {
            feedbackArea.setText("Please provide a user name");
            return;
        }

        loginData.password = passwordField.getPassword();
        if (loginData.password.length == 0) {
            feedbackArea.setText("Please provide a password");
            return;
        }

        loginData.newPassword = "";
        // Get the new password.
        // if the new pasword is entered then check the length of password.
        // The password length should be <code>PASSWORD_LENGTH</code> or 
        // greater than <code>PASSWORD_LENGTH</code>
        char[] newPassword = newPasswordField.getPassword();
        if (newPassword.length > 0) {
            if (newPassword.length < PASSWORD_LENGTH) {                
                Arrays.fill(newPassword, '\u0000');
                feedbackArea.setText("New password must be at least 8 characters");
                return;
            }
            //confirm the password that it matches or not.
            char[] confirm = confirmField.getPassword();
            if (!Arrays.equals(newPassword, confirm)) {                
                Arrays.fill(newPassword, '\u0000');
                Arrays.fill(confirm, '\u0000');
                feedbackArea.setText("New password and confirmation must be the same");
                return;
            }
            Arrays.fill(confirm, '\u0000');
            loginData.newPassword = MD5.computeDigest(newPassword);
            Arrays.fill(newPassword, '\u0000');
        }
        // Check for the server IP
        loginData.serverIP = serverIPField.getText().trim();
        if (loginData.serverIP.length() == 0) {
            feedbackArea.setText("Please provide a server IP");
            return;
        }
    }

    /**
     * Wait for OK and valid data, then return saved data from the screen.
     */
    public synchronized Data getLoginData() {
        while (loginData == null) {
            // Note: wait() will release the lock on this instance of
            // DiaLogin until notify() is called (in loginOKperformed).
            // Then it will reacquire the lock and continue.
            try {
                this.wait();
            } catch (InterruptedException e) {
                // Ignore exception and keep waiting
            }
        }
        return loginData;
    }

    /**
     * Reenable login after failure detected by main thread.
     * <p>
     * Takes the following actions: (1) clears login data, (2) enables OK button,
     * and (3) sets the given message in the feedback area.
     * @param message A message to be displayed.  The message should
     *                indicate the cause of the login failure.
     */
    public void enableAfterFailure(final String message) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                synchronized (DiaLogin.this) {
                    loginData = null;
                    okButton.setEnabled(true);
                    feedbackArea.setText(message);
                }
            }
        });
    }

    /**
     * Disable login.
     * <p>
     * Takes the following actions: (1) disables OK button,
     * and (2) sets the given message in the feedback area.
     * Intended for use on restart after program download
     * @param message A message to be displayed.  The message should
     *                indicate what the login process is doing.
     */
    public void disable(final String message) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                synchronized (DiaLogin.this) {
                    okButton.setEnabled(false);
                    feedbackArea.setText(message);
                }
            }
        });
    }

    /**
     * Exit the Application.
     * Note.  Also called from loginCancelPerformed.
     * calls setVisible(false) to clear passwords
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        setVisible(false);
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            // force Windows look and feel
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            Log.quit(e);
        }

        Data dummyData = new Data();
        dummyData.userName = "Easton, Bill";
        dummyData.serverIP = "localhost";
        dummyData.serverPort = 8111;
        dummyData.imageIP = "localhost";
        dummyData.imagePort = 8222;
        new DiaLogin(dummyData, false).setVisible(true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPasswordField confirmField;
    private javax.swing.JLabel confirmLabel;
    private javax.swing.JTextArea feedbackArea;
    private javax.swing.JLabel ibaseLogo1;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JLabel loginTitle;
    private javax.swing.JPasswordField newPasswordField;
    private javax.swing.JLabel newPasswordLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField serverIPField;
    private javax.swing.JLabel serverIPLabel;
    private javax.swing.JTextField userNameField;
    private javax.swing.JLabel userNameLabel;
	private javax.swing.JLabel loginServer;
    // End of variables declaration//GEN-END:variables
    /** Holds value of after OK pressed.  Always null when OK enabled. */
    private Data loginData = null;

    /**
     * A container for data from the login screen.
     */
    public static class Data {

        /** users.user_name */
        public String userName;
        /** users.password */
        public char[] password;
        // TODO: coding/qc/etc
        /** user may enter new users.password */
        public String newPassword;
        /** connect to the server on this IP */
        public String serverIP;
        /** connect to the server using this port */
        public int serverPort;
        /** connect to the image server on this IP */
        public String imageIP;
        /** connect to the image server using this port */
        public int imagePort;
    }

    /**
     * Make this frame visible.  Overrides JFrame.setVisible to
     * record the current visible frame for use in dialogs.
     */
    public void setVisible(boolean flag) {
        super.setVisible(flag);
        if (flag) {
            Global.mainWindow = this;
        } else {
            if (Global.mainWindow == this) {
                Global.mainWindow = null;
            }

            // Attempt to overwrite passwords in JPasswordFields
            // TBD: ?? Not sure if this does it or not
            char[] pchars = passwordField.getPassword();
            if (pchars.length > 0) {
                Arrays.fill(pchars, '\u0000');
                passwordField.setText(new String(pchars));
                passwordField.setText("");
            }
            pchars = newPasswordField.getPassword();
            if (pchars.length > 0) {
                Arrays.fill(pchars, '\u0000');
                newPasswordField.setText(new String(pchars));
                newPasswordField.setText("");
            }
            pchars = confirmField.getPassword();
            if (pchars.length > 0) {
                Arrays.fill(pchars, '\u0000');
                confirmField.setText(new String(pchars));
                confirmField.setText("");
            }
        }
    }

    /**
     * Overrides JFrame.dispose to overwrite password fields
     * before exiting.
     */
    public void dispose() {
        setVisible(false);
        super.dispose();
    }
}
