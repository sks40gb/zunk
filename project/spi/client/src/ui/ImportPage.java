/* $Header: /home/common/cvsarea/ibase/dia/src/ui/ImportPage.java,v 1.14.6.3 2006/08/23 19:04:52 nancy Exp $ */
/*
 * ImportPage.java
 *
 * Created on October 8, 2004, 10:40 AM
 */
package ui;

import client.ClientTask;
import client.TaskExecuteQuery;
import client.TaskImportData;
import common.Log;
import dbload.XrefConstants;
import java.sql.ResultSet;
import model.SQLManagedComboModel;
import model.QueryComboModel;


import javax.swing.JOptionPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

/**
 * The import screen on the AdminFrame allows users to import the cross
 * reference file to create or replace a volume.  If the project does not exist,
 * it will be created with the first volume.  The default Batch Span is 2500
 * pages, but the user may specifify any number of pages per batch.  The
 * default cross reference format is LFP and the user may change it to BRS.
 * The Cross Reference File and Image Path are both read from the server.
 * @author  Nancy McCall
 * @see client.TaskImportData
 * @see dbload.XrefConstants
 */
public class ImportPage extends AbstractPage implements XrefConstants
{

   private final String GET_ALL_PROJECTS = "ReportPage.projectCombo";
   private final String GET_ALL_VOLUMES = "Import Export.get all volumes";
   private SQLManagedComboModel projectModel = null;
   private QueryComboModel volumeModel = null;
   private int projectId = 0;
   private int volumeId = 0;
   private String project = "";
   private String volume = "";
   private String lfpPath = "";
   private String codingmanual = "";
   /**
     * Creates new form ImportPage.
     * @param frame the frame in which to place this screen
     */

   public ImportPage(AdminFrame frame)
   {
      super(frame);

      initComponents();

      // Add BRS xref format 12/20/05
        // Multiple inputs not required by SOW - use default LFP
        //xrefTypePanel.setVisible(false);
      doculexButton.setVisible(false);
      opticonButton.setVisible(false);
      summationButton.setVisible(false);
   }

   /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        xrefTypeButtonGroup = new javax.swing.ButtonGroup();
        titleLabel = new javax.swing.JLabel();
        parameterPanel = new javax.swing.JPanel();
        projectLabel = new javax.swing.JLabel();
        projectPanel = new javax.swing.JPanel();
        projectCombo = new javax.swing.JComboBox();
        splitsCheckBox = new javax.swing.JCheckBox();
        volumeLabel = new javax.swing.JLabel();
        volumePanel = new javax.swing.JPanel();
        volumeCombo = new javax.swing.JComboBox();
        replaceCheckBox = new javax.swing.JCheckBox();
        spanLabel = new javax.swing.JLabel();
        spanPanel = new javax.swing.JPanel();
        batchspanField = new beans.LIntegerField();
        xrefTypePanel = new javax.swing.JPanel();
        doculexButton = new javax.swing.JRadioButton();
        lfpButton = new javax.swing.JRadioButton();
        opticonButton = new javax.swing.JRadioButton();
        summationButton = new javax.swing.JRadioButton();
        brsButton = new javax.swing.JRadioButton();
        lfpLabel = new javax.swing.JLabel();
        lfpPanel = new javax.swing.JPanel();
        lfpFilename = new javax.swing.JTextField();
        imageLabel = new javax.swing.JLabel();
        imagePanel = new javax.swing.JPanel();
        imagePath = new javax.swing.JTextField();
        importButton = new javax.swing.JButton();
         
         codingmanualLabel = new  javax.swing.JLabel();
	codingmanualTextField = new javax.swing.JTextField();
    codingmanualPanel = new javax.swing.JPanel();
    
        fileMenu.setMnemonic('F');
        fileMenu.setText("File");
        exitMenuItem.setMnemonic('E');
        exitMenuItem.setText("Exit");
        exitMenuItem.setToolTipText("Exit program.");
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setLayout(new java.awt.GridBagLayout());

        titleLabel.setFont(new java.awt.Font("Dialog", 1, 24));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Import");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 20, 0);
        add(titleLabel, gridBagConstraints);

        parameterPanel.setLayout(new java.awt.GridBagLayout());

        projectLabel.setFont(new java.awt.Font("Dialog", 0, 11));
        projectLabel.setText("Project: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(projectLabel, gridBagConstraints);

        projectCombo.setEditable(true);
        projectCombo.setPreferredSize(new java.awt.Dimension(175, 25));
        projectCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectComboActionPerformed(evt);
            }
        });

        projectPanel.add(projectCombo);

        splitsCheckBox.setText("Enable Split Documents");
        splitsCheckBox.setEnabled(false);
        projectPanel.add(splitsCheckBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(projectPanel, gridBagConstraints);

        volumeLabel.setFont(new java.awt.Font("Dialog", 0, 11));
        volumeLabel.setText("Volume: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(volumeLabel, gridBagConstraints);

        volumeCombo.setEditable(true);
        volumeCombo.setPreferredSize(new java.awt.Dimension(175, 25));
        volumeCombo.setEnabled(false);
        volumeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volumeComboActionPerformed(evt);
            }
        });
        volumeCombo.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                volumeComboPopupMenuWillBecomeVisible(evt);
            }
        });

        volumePanel.add(volumeCombo);
        
        replaceCheckBox.setFont(new java.awt.Font("Dialog", 0, 11));
        replaceCheckBox.setText("Overwrite Existing Volume");
        volumePanel.add(replaceCheckBox);
       
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(volumePanel, gridBagConstraints);
        
        codingmanualLabel.setFont(new java.awt.Font("Dialog", 0, 11));
        codingmanualLabel.setText("Coding Manual:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(codingmanualLabel, gridBagConstraints);

        codingmanualTextField.setColumns(30);
        //batchspanField.setText("2500");
        codingmanualPanel.add(codingmanualTextField);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(codingmanualPanel, gridBagConstraints);



        spanLabel.setFont(new java.awt.Font("Dialog", 0, 11));
        spanLabel.setText("Batch Span:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(spanLabel, gridBagConstraints);

        batchspanField.setColumns(6);
        batchspanField.setText("2500");
        spanPanel.add(batchspanField);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(spanPanel, gridBagConstraints);
        
        xrefTypePanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        xrefTypePanel.setFocusable(false);
        xrefTypePanel.setRequestFocusEnabled(false);
        doculexButton.setText("DOCULEX");
        doculexButton.setToolTipText("DOCULEX .dbf file");
        xrefTypeButtonGroup.add(doculexButton);
        xrefTypePanel.add(doculexButton);

        lfpButton.setSelected(true);
        lfpButton.setText("LFP");
        lfpButton.setToolTipText("LFP (.lfp) file");
        xrefTypeButtonGroup.add(lfpButton);
        xrefTypePanel.add(lfpButton);

        opticonButton.setText("OPTICON");
        opticonButton.setToolTipText("OPTICON .opt file");
        xrefTypeButtonGroup.add(opticonButton);
        xrefTypePanel.add(opticonButton);

        summationButton.setText("SUMMATION");
        summationButton.setToolTipText("SUMMATION .dii file");
        xrefTypeButtonGroup.add(summationButton);
        xrefTypePanel.add(summationButton);

        brsButton.setText("BRS");
        brsButton.setToolTipText(".brs file");
        xrefTypeButtonGroup.add(brsButton);
        xrefTypePanel.add(brsButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(xrefTypePanel, gridBagConstraints);

        lfpLabel.setFont(new java.awt.Font("Dialog", 0, 11));
        lfpLabel.setText("Cross Ref. Filename");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(lfpLabel, gridBagConstraints);

        lfpFilename.setColumns(50);
        lfpFilename.setDocument(new PlainDocument() {
            public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {
                super.insertString(offs, str, a);
                checkEnableImportButton();
            }
            public void remove(int offs, int len)
            throws BadLocationException
            {
                super.remove(offs,len);
                checkEnableImportButton();
            }
        });
        lfpPanel.add(lfpFilename);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(lfpPanel, gridBagConstraints);

        imageLabel.setFont(new java.awt.Font("Dialog", 0, 11));
        imageLabel.setText("Image Path:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6 ;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(imageLabel, gridBagConstraints);

        imagePath.setColumns(50);
        imagePath.setDocument(new PlainDocument() {
            public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {
                super.insertString(offs, str, a);
                checkEnableImportButton();
            }
            public void remove(int offs, int len)
            throws BadLocationException
            {
                super.remove(offs,len);
                checkEnableImportButton();
            }
        });
        imagePanel.add(imagePath);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(imagePanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        add(parameterPanel, gridBagConstraints);

        importButton.setFont(new java.awt.Font("Dialog", 1, 14));
        importButton.setText("Import");
        importButton.setToolTipText("");
        importButton.setFocusable(false);
        importButton.setEnabled(false);
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 20, 0);
        add(importButton, gridBagConstraints);

    }//GEN-END:initComponents

    private void volumeComboPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_volumeComboPopupMenuWillBecomeVisible
       //Log.print("(ImportPage.volumeComboPopupMenuWillBecomeVisisble) projectId " + projectId);
       int sel = projectCombo.getSelectedIndex();
       if (sel > -1) {
          project = (String) projectModel.getElementAt(sel);
          projectId = ((SQLManagedComboModel) projectCombo.getModel()).getIdAt(sel);
          volumeModel = new QueryComboModel(GET_ALL_VOLUMES, /* required? */ false, new String[]{Integer.toString(projectId)}, "");
          volumeCombo.setModel(volumeModel);
       }
    }//GEN-LAST:event_volumeComboPopupMenuWillBecomeVisible

    private void projectComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectComboActionPerformed
       //Log.print("(ImportPage.projectComboActionPerformed) " + evt.getActionCommand());
        //project = (String)projectCombo.getEditor().getItem();
       int sel = projectCombo.getSelectedIndex();
       System.out.println("sel----------------------->" + sel);
       if (sel > -1) {
          project = (String) projectModel.getElementAt(sel);
          projectId = ((SQLManagedComboModel) projectCombo.getModel()).getIdAt(sel);
          setProjectSplitDocuments(projectId);
          splitsCheckBox.setEnabled(true);
          if (volumeModel != null) {
             volumeCombo.setSelectedIndex(-1);
          }
          volumeCombo.setEnabled(true);
       }
       else {
          project = "";
          projectId = 0;
          volumeCombo.setEnabled(true);
          splitsCheckBox.setEnabled(false);
       }
       checkEnableImportButton();
    }//GEN-LAST:event_projectComboActionPerformed

   private void setProjectSplitDocuments(int projectId)
   {
      final ClientTask task = new TaskExecuteQuery("ProjectAdminPage.get_split_documents", Integer.toString(projectId));
      task.setCallback(new Runnable()
              {

                 public void run()
                 {
                    try {
                       ResultSet rs = (ResultSet) task.getResult();
                       if (rs != null) {
                          setProjectSplitDocumentsEntry(rs);
                       }
                    } catch (Throwable th) {
                       Log.quit(th);
                    }
                 }

              });
      task.enqueue();
   }

   private void setProjectSplitDocumentsEntry(ResultSet rs)
   {
      try {
         if (rs.next()) {
            splitsCheckBox.setSelected("0".equals(rs.getString(1)) ? false : true);
         }
      } catch (Throwable th) {
         Log.quit(th);
      }
   }

    private void volumeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volumeComboActionPerformed
       int sel = volumeCombo.getSelectedIndex();
       if (sel > -1) {
          volume = (String) volumeModel.getElementAt(sel);
          volumeId = volumeModel.getIdAt(sel);
          //volume = (String)volumeCombo.getEditor().getItem();
          replaceCheckBox.setEnabled(true);
       }
       else {
          volume = "";
          volumeId = 0;
          replaceCheckBox.setEnabled(false);
       //replaceCheckBox.setSelected(false);
       }
       checkEnableImportButton();
    }//GEN-LAST:event_volumeComboActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
       importButton.setEnabled(false);
       String name = imagePath.getText();
       String codingmanual = codingmanualTextField.getText();
       int fileType = 0;
       if (!name.endsWith("/") && !name.endsWith("\\")) {
          name = name + "/";
       }
       volume = (String) volumeCombo.getEditor().getItem();
       project = (String) projectCombo.getEditor().getItem();
       if (doculexButton.isSelected()) {
          fileType = DOCULEX;
       }
       else if (lfpButton.isSelected()) {
          fileType = LFP;
       }
       else if (opticonButton.isSelected()) {
          fileType = OPTICON;
       }
       else if (summationButton.isSelected()) {
          fileType = SUMMATION;
       }
       else if (brsButton.isSelected()) {
          fileType = BRS;
       }
       final ClientTask task = new TaskImportData(project, volume, codingmanual, batchspanField.getValue(), fileType, (String) lfpFilename.getText(), name, replaceCheckBox.isSelected() ? "Yes" : "No", splitsCheckBox.isSelected() ? "Yes" : "No","","",false,"");
       task.setCallback(new Runnable()
               {

                  public void run()
                  {
                     importEntry((String) task.getResult());
                  }

               });
       task.enqueue();
    }//GEN-LAST:event_importButtonActionPerformed

   private void importEntry(String status)
   {
      //Log.print("(ImportPage) back from import with " + status);
      if (status.equals("ok")) {
         JOptionPane.showMessageDialog(this,
                 "Import to " + (String) projectCombo.getSelectedItem() + " was successful.",
                 "Confirmation",
                 JOptionPane.INFORMATION_MESSAGE);
      }
      else {
         JOptionPane.showMessageDialog(this, status,
                 "Import Error",
                 JOptionPane.ERROR_MESSAGE);
      }
      importButton.setEnabled(true);
   }

   private void checkEnableImportButton()
   {
      if (volumeId == 0) {
         volume = (String) volumeCombo.getEditor().getItem();
      }
      if (projectId == 0) {
         project = (String) projectCombo.getEditor().getItem();
      }
      if (project.equals("") || volume.equals("") || lfpFilename.getText().equals("") || imagePath.getText().equals("")) {
         importButton.setEnabled(false);
      }
      else {
         importButton.setEnabled(true);
      }
   }

   /**
     * Run a ClientTask to request a directory listing of the import root
     * relative to the work directory.
     */
   /*private class DirectoryComboModel extends javax.swing.DefaultComboBoxModel {
        public DirectoryComboModel() {
            super();
            final ClientTask task = new TaskRequestImportDirectory();
            task.setCallback(new Runnable() {
                    public void run() {
                        getDirectoryEntry((ArrayList)task.getResult());
                    }
                });
            task.enqueue();
        }

        /**
         * Load the combo from the ArrayList.
         * @param files - contains two ArrayLists, 
         *              0 = list of files in the import subdirectory
         *              1 = list of subdirectories
         */
   /*    public void getDirectoryEntry(ArrayList files) {
            ArrayList importFiles = (ArrayList)files.get(0);
            for (int i = 0; i < importFiles.size(); i++) {
                addElement(importFiles.get(i));
            }
        }
    } */
   /**
     * Check that it's OK to exit the current page.  Subclasses must override this to provide a
     * page-dependent check.
     * @return true if it's OK to exit.  If field cancels save/no-save/cancel dialog,
     *         false is returned.
     */
   protected boolean exitPageCheck()
   {
      // TBD
      return true;
   }

   /** Get the menu bar for the current page.  Subclasses must override this to provide a
     * page-dependent menu bar.
     */
   protected javax.swing.JMenuBar getPageJMenuBar()
   {
      return menuBar;
   }

   /**
     * Perform page initialization.  Subclasses must override this to provide any
     * required page-dependent initialization.
     * 
     * Create a filtered and unfiltered model for project, volume, batch and batchEnd combos.
     */
   protected void tabSelected()
   {
      Log.print("ImportPage tabSelected");

      if (projectModel == null) {
         projectModel = new SQLManagedComboModel(GET_ALL_PROJECTS);
         projectModel.register();
         projectCombo.setModel(projectModel);
      }
   }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private beans.LIntegerField batchspanField;
    private javax.swing.JRadioButton doculexButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JRadioButton brsButton;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JPanel imagePanel;
    private javax.swing.JTextField imagePath;
    private javax.swing.JButton importButton;
    private javax.swing.JRadioButton lfpButton;
    private javax.swing.JTextField lfpFilename;
    private javax.swing.JLabel lfpLabel;
    private javax.swing.JPanel lfpPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JRadioButton opticonButton;
    private javax.swing.JPanel parameterPanel;
    private javax.swing.JComboBox projectCombo;
    private javax.swing.JLabel projectLabel;
    private javax.swing.JPanel projectPanel;
    private javax.swing.JCheckBox replaceCheckBox;
    private javax.swing.JLabel spanLabel;
    private javax.swing.JPanel spanPanel;
    private javax.swing.JCheckBox splitsCheckBox;
    private javax.swing.JRadioButton summationButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JComboBox volumeCombo;
    private javax.swing.JLabel volumeLabel;
    private javax.swing.JPanel volumePanel;
    private javax.swing.ButtonGroup xrefTypeButtonGroup;
    private javax.swing.JPanel xrefTypePanel;
    private javax.swing.JLabel codingmanualLabel;
    private javax.swing.JTextField codingmanualTextField;
     private javax.swing.JPanel codingmanualPanel;
    // End of variables declaration//GEN-END:variables

}
