/* $Header: /home/common/cvsarea/ibase/dia/src/ui/DelimiterDialog.java,v 1.6.6.3 2006/03/28 12:07:31 nancy Exp $ */
/*
 * DelimiterDialog.java
 *
 * Created on December 21, 2004, 9:00 AM
 */

package ui;

import client.ClientTask;
import client.TaskSendDelimiterData;
import common.DelimiterData;

import javax.swing.JOptionPane;

/**
 * Add or update delimiters used in export and importing data.
 * This dialog is called from <code>ui.DelimiterPanel</code> to allow
 * the user to name, change and store the values associated with the
 * importing and exporting of coded data.  The Delimiters: field should
 * be protected is this is an existing delimiter entry, otherwise the
 * user must name the set of delimiters.
 * @author  Nancy McCall
 * @see common.DelimiterData
 * @see client.TaskSendDelimiterData
 */
public class DelimiterDialog extends javax.swing.JDialog {

    DelimiterData data;
    DelimiterPanel delimiters;
    
    /**
     * Creates new form DelimiterDialog
     * @param parent the component to use in positioning this dialog
     * @param data the data to initially display on the screen,
     * can be the default values or existing delimiter data
     */
    public DelimiterDialog(java.awt.Frame parent, DelimiterData data) {
        super(parent, /* model-> */ true);
        this.data = data;
        delimiters = new DelimiterPanel(data);
        getContentPane().add(delimiters);
        delimiters.showButtons(false);
        initComponents();
        setTitle("Delimiters Field Definition");
        getRootPane().setDefaultButton(okButton);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        okPane = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        jPanel4.add(okButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jPanel4.add(cancelButton);

        okPane.add(jPanel4);

        getContentPane().add(okPane, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        data = null;
        closeDialog(null);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Get the delimiter data from the screen and check them for errors.
     * If error-free, send the data to the server for writing to the db.
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        data = delimiters.getDelimiterData(false);
        if (crossFieldEdit()) {
            final ClientTask task = new TaskSendDelimiterData(data);
            boolean ok = task.enqueue(this);
            closeDialog(null);
        }
    }//GEN-LAST:event_okButtonActionPerformed

    /**
     * Check for errors in the screen data, returning false if errors are found.
     * @return false if errors are found in the screen data, else true
     */
    private boolean crossFieldEdit() {
        if (data.delimiter_set_name.length() < 1) {
            requiredDialog("Delimiter Name");
            return false;
        }
        if (data.brs_format.equals("No")
            && (! specialCharacter("Field Delimiter", data.field_delimiter)
                || ! specialCharacter("Text Qualifier", data.text_qualifier)
                || ! specialCharacter("Value Separator", data.value_separator))) {
            return false;
        }
        if (data.brs_format.equals("No")
            && (data.field_delimiter.equals(data.text_qualifier)
                || data.field_delimiter.equals(data.value_separator))) {
            delimiterError("Field Delimiter");
            return false;
        }

        if (data.name_mask1.length() <= 0
            && data.name_mask2.length() <= 0
            && data.name_mask3.length() <= 0
            && data.name_mask4.length() <= 0) {
            requiredDialog("Name Mask");
            return false;
        }
        String mask = data.name_mask1 + data.name_mask2 + data.name_mask3 + data.name_mask4;
        if (duplicates(mask, "a")) {
            return false;
        }
        if (duplicates(mask, "f")) {
            return false;
        }
        if (duplicates(mask, "m")) {
            return false;
        }
        if (duplicates(mask, "l")) {
            return false;
        }

        char[] chars = mask.toCharArray();
        for (int i = 0; i < chars.length; i++) {
            if ( ((chars[i] >= 0 && chars[i] <= 9)
                || (chars[i] >= 'a' && chars[i] <= 'z')
                || (chars[i] >= 'A' && chars[i] <= 'Z'))
                 && (chars[i] != 'a'
                     && chars[i] != 'f'
                     && chars[i] != 'm'
                     && chars[i] != 'l')) {
                // not punctuation and not one of the reserved characters
                JOptionPane.showMessageDialog(this,
                        "The Name Mask fields can contain only."
                        +"\npuntuation and the letters 'f', 'm', 'l' and 'a'",
                        "Name Mask Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }

        if (data.brs_format.equals("No")
            && data.text_qualifier.equals(data.value_separator)) {
            delimiterError("Value Separator");
            return false;
        }
        if (data.date_format.length() < 1) {
            requiredDialog("Date Format");
            return false;
        }
        if (data.missing_date.length() < 1) {
            requiredDialog("Missing Date");
            return false;
        }
        if (data.missing_year.length() < 1) {
            requiredDialog("Missing Year");
            return false;
        }
        if (data.missing_month.length() < 1) {
            requiredDialog("Missing Month");
            return false;
        }
        if (data.missing_day.length() < 1) {
            requiredDialog("Missing Day");
            return false;
        }
        return true;
    }

    private boolean duplicates(String mask, String str) {
        if (mask.indexOf(str) != mask.lastIndexOf(str)) {
            JOptionPane.showMessageDialog(this,
                    "The Name Mask fields cannot contain duplicate codes."
                    + "\n\nPlease make Name Masks unique.",
                    "Name Mask Error", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        return false;
    }

    private void delimiterError(String field) {
        JOptionPane.showMessageDialog(this,
                field + " cannot match another delimiter."
                + "\n\nPlease make delimiters unique.",
                "Delimiter Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    private void requiredDialog(String field) {
        JOptionPane.showMessageDialog(this,
                field + " is a required field."
                + "\n\nPlease enter a value.",
                "Delimiter Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    private boolean specialCharacter(String field, String str) {
        if (str.length() < 1) {
            requiredDialog(field);
        }
        char[] chars = str.toCharArray();
        for (int i = 0; i < chars.length; i++) {
            if ((chars[i] >= 0 && chars[i] <= 9)
                || (chars[i] >= 'a' && chars[i] <= 'z')
                || (chars[i] >= 'A' && chars[i] <= 'Z')) {
                JOptionPane.showMessageDialog(this,
                        field + " must be a special character.",
                        "Delimiter Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        return true;
    }

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new DelimiterDialog(new javax.swing.JFrame(), null).show();
    }

    /**
     * Return the data showing on the screen to the caller.
     * @return an instance of DelimiterData containing the data
     */
    public DelimiterData getData() {
        return data;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel okPane;
    // End of variables declaration//GEN-END:variables
    
}
