/* $Header: /home/common/cvsarea/ibase/dia/src/ui/QAMailDialog.java,v 1.3.6.1 2006/03/28 17:02:05 nancy Exp $ */
/*
 * StatisticsDialog.java
 *
 * Created on November 5, 2004
 */

package ui;

import beans.ComposeDialog;
import client.ClientTask;
import client.TaskExecuteQuery;
import common.Log;
import model.ResultSetTableModel;

import java.sql.ResultSet;
import javax.swing.JDialog;
import javax.swing.table.TableModel;
/**
 * Create mail listing statistics about the batch being closed.
 * @author  Bill
 */
public class QAMailDialog extends JDialog {

    int holdVolumeId;
    boolean acceptingBatch;
    TableModel errorRateModel;
    String titleText;
    String projectName;
    String volumeName;

    boolean mailRequested = false;
    boolean modelLoaded = false;
    
    /** Creates new form QAMailDialog */
    public QAMailDialog(JDialog parent, boolean acceptingBatch, Object batchCountString)
    {
        super(parent, /* modal => */ true);
        this.acceptingBatch = acceptingBatch;

        titleText = batchCountString
			  +(acceptingBatch
                           ? " batches have been closed."
                           : " batches have been REJECTED.");
        initComponents();
        setLocationRelativeTo(parent);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        mainPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        closeButtonPane = new javax.swing.JPanel();
        buttonPane = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        mailButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("QA Batches Closed");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        mainPanel.setLayout(new java.awt.BorderLayout());

        mainPanel.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(20, 20, 20, 20)));
        titleLabel.setText("000 Batches REJECTED");
        titleLabel.setText(titleText);
        mainPanel.add(titleLabel, java.awt.BorderLayout.NORTH);

        closeButtonPane.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(12, 1, 1, 1)));
        buttonPane.setLayout(new java.awt.GridLayout(1, 0, 25, 0));

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        buttonPane.add(okButton);

        mailButton.setText("Mail");
        mailButton.setToolTipText("Send mail");
        mailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailButtonActionPerformed(evt);
            }
        });

        buttonPane.add(mailButton);

        closeButtonPane.add(buttonPane);

        mainPanel.add(closeButtonPane, java.awt.BorderLayout.SOUTH);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void mailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailButtonActionPerformed
        mailButton.setEnabled(false); // avoid second click
        okButton.setEnabled(false); // avoid second click
        mailRequested = true;
        doSendMail();
    }//GEN-LAST:event_mailButtonActionPerformed

    private void doSendMail() {
        try {
            if (! mailRequested || ! modelLoaded) {
                // wait until second call - both have model loaded and clicked mail
                return;
            }
            // avoid second request
            mailRequested = false;
            modelLoaded = false;

            String subject = projectName;
            if (! volumeName.equals(projectName)) {
                subject += " ("+volumeName+")";
            }
            if (! acceptingBatch) {
                subject += " REJECTED";
            }

            // errorRateModel:
            //   0: Time Closed - key 3
            //   1: User - key 4                                                     
            //   2: Team - key 1                                     
            //   3: Rework - key 2                                   
            //   4: field_count                                                            
            //   5: change_count                                                           
            //   6: error_count                                                             

            StringBuffer body = new StringBuffer();
            body.append("Re: ");
            body.append(subject);
            body.append("\n");
            int sumFields = 0;
            int sumChanges = 0;
            int sumErrors = 0;
            for (int i = 0; i < errorRateModel.getRowCount(); i++) {
                body.append(errorRateModel.getValueAt(i,0)); // time
                body.append(" User: ");
                body.append(errorRateModel.getValueAt(i,1));
                body.append(" Rework? ");
                body.append(errorRateModel.getValueAt(i,3));
                body.append(" Fields: ");
                body.append(errorRateModel.getValueAt(i,4));
                if (! "0".equals(errorRateModel.getValueAt(i,4))) {
                    int numFields = Integer.parseInt((String) errorRateModel.getValueAt(i,4));
                    int numChanges = Integer.parseInt((String) errorRateModel.getValueAt(i,5));
                    int numErrors = Integer.parseInt((String) errorRateModel.getValueAt(i,6));
                    sumFields += numFields;
                    sumChanges += numChanges;
                    sumErrors += numErrors;
                    body.append(" Pct changed: ");
                    body.append(Integer.toString((200*numChanges+numFields)/(2*numFields)));
                    body.append(" Pct errors: ");
                    body.append(Integer.toString((200*numErrors+numFields)/(2*numFields)));
                }
                body.append("\n");
                if (i == (errorRateModel.getRowCount() - 1)
                || ! errorRateModel.getValueAt(i,2).equals(errorRateModel.getValueAt(i+1,2))
                || ! errorRateModel.getValueAt(i,3).equals(errorRateModel.getValueAt(i+1,3))) {
                    body.append("  Summary for team (");
                    body.append((String) errorRateModel.getValueAt(i,2));
                    body.append(") ");
                    body.append(" Rework? ");
                    body.append(errorRateModel.getValueAt(i,3));
                    body.append(" Fields: ");
                    body.append(Integer.toString(sumFields));
                    if (sumFields > 0) {
                        body.append(" Pct changed: ");
                        body.append(Integer.toString((200*sumChanges+sumFields)/(2*sumFields)));
                        body.append(" Pct errors: ");
                        body.append(Integer.toString((200*sumErrors+sumFields)/(2*sumFields)));
                    }
                    sumFields = 0;
                    sumChanges = 0;
                    sumErrors = 0;
                    body.append("\n");
                }
            }

            JDialog dialog = new ComposeDialog(
                    this, // parent
                    true, // modal
                    0, // mailsentId
                    "", // recipientList
                    body.toString(), // textArea
                    "", // prefix
                    subject, // subject
                    "", // dateString
                    "", // sender
                    ""); // addr
            dialog.setVisible(true);
            this.closeDialog(null);
        } catch (Throwable th) {
            Log.quit(th);
        }
    }

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        closeDialog(null);
    }//GEN-LAST:event_okButtonActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        mailRequested = false;
        modelLoaded = false;
        dispose();
    }//GEN-LAST:event_closeDialog

    /** Set dialog visible state.  When making visible, initiate task
     *  to read model data from server.
     */
    public void setVisible(boolean flag) {
        if (flag) {
            // get project and volume names
            final ClientTask task1 = new TaskExecuteQuery("project and volume names");
            task1.setCallback(new Runnable() {
                    public void run() {
                        try {
                            ResultSet rs1 = (ResultSet) task1.getResult();
                            rs1.next();
                            projectName = rs1.getString(1);
                            volumeName = rs1.getString(2);
                        } catch (Throwable th) {
                            Log.quit(th);
                        }
                    }
               });
            task1.enqueue();

            // get error statistics
            //select substring(from_unixtime(VE.credit_time/1000),1,16) as `Time Closed`,
            //   user_name as User,                                                      
            //   coalesce(T.team_name, '') as Team,                                      
            //   if(rework, 'Yes', 'No') as `Rework`,                                    
            //   field_count,                                                            
            //   change_count,                                                           
            //   error_count                                                             
            //from volumeerror VE                                                        
            //   inner join users U using (users_id)                                     
            //   left join teams T using (teams_id)                                      
            //where VE.volume_id=[volume]                                                       
            //order by Team, VE.rework, VE.credit_time, U.user_name                      
            final ClientTask task2 = new TaskExecuteQuery("session_qa_error_rates");
            task2.setCallback(new Runnable() {
                    public void run() {
                        try {
                            ResultSet rs2 = (ResultSet) task2.getResult();
                            errorRateModel = new ResultSetTableModel(rs2);
                            modelLoaded = true;
                            doSendMail();
                        } catch (Throwable th) {
                            Log.quit(th);
                        }
                    }
               });
            task2.enqueue();
        }
        super.setVisible(flag);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPane;
    private javax.swing.JPanel closeButtonPane;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton mailButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
    
}
