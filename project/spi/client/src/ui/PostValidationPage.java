/*
 * PostValidationPage.java
 *
 * Created on June 13, 2008, 2:23 PM
 */
package ui;

import valueobjects.ProjectsData;
import valueobjects.FieldsData;
import valueobjects.FunctionsData;
import com.lexpar.util.Log;
import ui.AdminFrame;
import client.ClientTask;
import client.TaskExecuteQuery;
import client.TaskViewAdvanceValidations;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import model.CheckBoxListModel;
import model.QueryComboModel;
import model.SQLManagedComboModel;

/**
 * Component For selecting the list of function for the each and every indidual 
 * project field for output validation.
 *
 * @author  sunil
 */
public class PostValidationPage extends ui.AbstractPage {
    
    private static final String GET_ALL_PROJECTS = "AdvanceValidation.projectCombo";
    private static final String GET_ALL_VOLUMES = "listing.get volume";
    private static final String GET_ALL_FIELDS = "ProjectAdminPage.projectfieldsTable";    
    private boolean isProcessCompleted = false;    //  private List<String> fList ;
    private int postValidationId = -1;
    private int projectId = 0;
    private int volumeId = 0;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem exitMenuItem;    
    //It contains the whole record for the select project
    private ProjectsData projectsData;    
    private SQLManagedComboModel projectModel = null;
    private QueryComboModel volumeModel = null;
    private String project = "";
    private String volume = "";    
    private String serverFilePath = "";
    
    String[] strs = {"swing", "home", "basic", "metal", "JList"};
    JList validationFunctionsList = null;
    ListSelectionModel lselectionmodel = null;

    /** Creates new form PostValidationPage */
    public PostValidationPage() {
        initComponents();
    }
    
    /**
     * Construts the page for the Post validation
     * @param frame -- Admin Frame
     */
    public PostValidationPage(AdminFrame frame) {
        super(frame);
        this.frame = frame;
        initComponents();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        fileMenu.setMnemonic('F');
        fileMenu.setText("File");
        exitMenuItem.setMnemonic('E');
        exitMenuItem.setText("Exit");
        exitMenuItem.setToolTipText("Exit program.");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);
        menuBar.add(fileMenu);
        validationFunctionsList = new JList();
        CheckListCellRenderer renderer = new CheckListCellRenderer();
        validationFunctionsList.setCellRenderer(renderer);        
        validationFunctionsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        CheckListener lst = new CheckListener(this);
        validationFunctionsList.addMouseListener(lst);
        validationFunctionsList.addKeyListener(lst);
        functionsScrollPane.getViewport().add(validationFunctionsList);
        nextButton.setEnabled(false);
        downloadButton.setEnabled(false);
    }   

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jMenuBar1 = new javax.swing.JMenuBar();
      jMenu1 = new javax.swing.JMenu();
      jMenu2 = new javax.swing.JMenu();
      downloadButton = new javax.swing.JButton();
      jPanel1 = new javax.swing.JPanel();
      projectComboBox = new javax.swing.JComboBox();
      volumeComboBox = new javax.swing.JComboBox();
      jLabel1 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      jScrollPane1 = new javax.swing.JScrollPane();
      fieldsList = new javax.swing.JList();
      jLabel3 = new javax.swing.JLabel();
      validationFunctoinsLabel = new javax.swing.JLabel();
      nextButton = new javax.swing.JButton();
      functionsScrollPane = new javax.swing.JScrollPane();
      jList1 = new javax.swing.JList();
      reportHistoryButton = new javax.swing.JButton();

      jMenu1.setText("File");
      jMenuBar1.add(jMenu1);

      jMenu2.setText("Edit");
      jMenuBar1.add(jMenu2);

      downloadButton.setText("Download");
      downloadButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            g(evt);
         }
      });

      setLayout(new java.awt.GridBagLayout());

      projectComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
         public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
         }
         public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
         }
         public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            projectComboBoxPopupMenuWillBecomeVisible(evt);
         }
      });
      projectComboBox.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            projectComboBoxActionPerformed(evt);
         }
      });

      volumeComboBox.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            volumeComboBoxActionPerformed(evt);
         }
      });

      jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 12));
      jLabel1.setText("Select Project");

      jLabel2.setFont(new java.awt.Font("DejaVu Sans", 1, 12));
      jLabel2.setText("Select Volume");

      fieldsList.setPreferredSize(new java.awt.Dimension(100, 200));
      fieldsList.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mousePressed(java.awt.event.MouseEvent evt) {
            fieldsListMousePressed(evt);
         }
      });
      jScrollPane1.setViewportView(fieldsList);

      jLabel3.setFont(new java.awt.Font("DejaVu Sans", 1, 12));
      jLabel3.setText("Fields");

      validationFunctoinsLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 12));
      validationFunctoinsLabel.setText("Validation Functions");

      nextButton.setText("Next");
      nextButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            nextButtonActionPerformed(evt);
         }
      });

      functionsScrollPane.setViewportView(jList1);

      reportHistoryButton.setText("Report History");
      reportHistoryButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            reportHistoryButtonActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addGap(84, 84, 84)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                     .addComponent(jLabel1)
                     .addComponent(projectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 179, Short.MAX_VALUE))
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel2)
               .addComponent(volumeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(validationFunctoinsLabel)
               .addComponent(functionsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(91, 91, 91))
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addContainerGap(235, Short.MAX_VALUE)
            .addComponent(reportHistoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(28, 28, 28)
            .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(236, 236, 236))
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(jLabel2)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(volumeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(jLabel1)
                  .addGap(7, 7, 7)
                  .addComponent(projectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(14, 14, 14)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(validationFunctoinsLabel)
               .addComponent(jLabel3))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addComponent(functionsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jScrollPane1))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(nextButton)
               .addComponent(reportHistoryButton))
            .addGap(44, 44, 44))
      );

      add(jPanel1, new java.awt.GridBagConstraints());
   }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            exitForm();
        } catch (Throwable th) {
            Log.quit(th);
        }
    }
    
private void projectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectComboBoxActionPerformed
    //initialize project
    projectsData = new ProjectsData();
    nextButton.setEnabled(false);
    int sel = projectComboBox.getSelectedIndex();

    //Get all volumes for selected projects and put in volumeList
    if (sel > -1) {
        project = (String) projectComboBox.getSelectedItem();
        projectId = ((QueryComboModel) projectComboBox.getModel()).getIdAt(sel);
        volumeModel = new QueryComboModel(GET_ALL_VOLUMES, /* required? */ false, new String[]{Integer.toString(projectId)}, "");
        volumeComboBox.setModel(volumeModel);

        //set the project id
        projectsData.setProjectId(projectId);
        projectsData.setProjectName(project);

        //Get all fields for the project
        final ClientTask task;
        task = new TaskExecuteQuery(GET_ALL_FIELDS, new Integer(projectId).toString());
        task.setCallback(new Runnable() {
            @Override
            public void run() {
                java.sql.ResultSet rs = (ResultSet) task.getResult();
                try {
                    //Get fields data and put in the projectData.                    
                    while (rs.next()) {
                        FieldsData fieldData = new FieldsData();
                        int fieldId = rs.getInt(1);
                        String fieldName = rs.getString(2);
                        fieldData.setId(fieldId);
                        fieldData.setName(fieldName);
                        projectsData.putFieldInMap(fieldName, fieldData);
                    }
                    setFieldValues(projectsData.getFieldsMap());
                    resetValues();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
        boolean ok = task.enqueue();
    }
}//GEN-LAST:event_projectComboBoxActionPerformed

/**
 * Reset the value to original state. It will reset to
 * Functions List 
 * Status Label
 * Progress Bar
 */
    public void resetValues() {
        //clear the validation list when new project is selected.
        validationFunctionsList.setModel(new CheckBoxListModel(new HashMap()));
        //set the downloadButton enabled false
        downloadButton.setEnabled(false);

    }

private void volumeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volumeComboBoxActionPerformed

    //enable the next button if volume is selected.
    int sel = volumeComboBox.getSelectedIndex();
    if (sel > 0) {
        nextButton.setEnabled(true);
    }
}//GEN-LAST:event_volumeComboBoxActionPerformed

private void fieldsListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fieldsListMousePressed
    //this is selected Field
    final String selectedFieldName = (String) fieldsList.getSelectedValue();
    //Get the corresponding Field data from the projectData 
    final FieldsData fielddata = projectsData.getFieldsMap().get(selectedFieldName);

    // Get the funtions record for the fields if there is no record in the list
    // else get from database and put in the list.
    // display to functions list.

    System.out.println("---------> 1");
    if (projectsData.getFieldsMap().get(selectedFieldName).getFunctionsMap().size() == 0) {
        int fieldId = (fielddata != null ? fielddata.getId() : -1);
        final ClientTask task;
        task = new TaskViewAdvanceValidations(0, fieldId, "Field");
        System.out.println("---------> 2");
        task.setCallback(new Runnable() {

            @Override
            public void run() {

                System.out.println("---------> 3");

                java.sql.ResultSet results = (java.sql.ResultSet) task.getResult();
                int functionId = -1;
                int functionsDetailsId = -1;
                String functionsName;
                if (results != null) {
                    try {
                        while (results.next()) {
                            functionsName = results.getString(1);
                            functionsDetailsId = results.getInt(7);
                            functionId = results.getInt(8);
                            FunctionsData functiondata = new FunctionsData(functionsName, functionId);
                            //put the functions record to the functionList of fieldsData.
                            projectsData.getFieldsMap().get(selectedFieldName).putInFuntionsMap(functiondata.getName(), functiondata);
                        }
                        //put the field record to the fieldList in the projectData.
                        projectsData.putFieldInMap(fielddata.getName(), fielddata);

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    //put tthe 
                    setFieldValues(projectsData.getFieldsMap());
                    //display the functions name to functions JList.
                    validationFunctionsList.setModel(new CheckBoxListModel(projectsData.getFieldsMap().get(selectedFieldName).getFunctionsMap()));
                }

            }
        });
        boolean ok = task.enqueue();
    } else {
        validationFunctionsList.setModel(new CheckBoxListModel(projectsData.getFieldsMap().get(selectedFieldName).getFunctionsMap()));
    }
}//GEN-LAST:event_fieldsListMousePressed

private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed

    int sel = volumeComboBox.getSelectedIndex();
    //Get all volumes
    if (sel > -1) {
        volume = (String) volumeModel.getElementAt(sel);
        volumeId = ((QueryComboModel) volumeComboBox.getModel()).getIdAt(sel);
        //set the project id
        projectsData.setVolumeId(volumeId);
        //set the volume id
        projectsData.setVolumeName(volume);
    }
    nextButton.setEnabled(false);
    //display the next page for the details.
    new PostValidationView(this, projectsData).setVisible(true);
}//GEN-LAST:event_nextButtonActionPerformed

private void g(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_g
      JFileChooser chooseFile = new JFileChooser();//GEN-LAST:event_g
}

private void reportHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportHistoryButtonActionPerformed
  reportHistoryButton.setEnabled(false);
  new PostValidationReport(this).setVisible(true);
}//GEN-LAST:event_reportHistoryButtonActionPerformed

private void projectComboBoxPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_projectComboBoxPopupMenuWillBecomeVisible
   // TODO add your handling code here:
   tabSelected();
}//GEN-LAST:event_projectComboBoxPopupMenuWillBecomeVisible
 

 public void setNextButtonEnabled(boolean enable){
        nextButton.setEnabled(enable);
    }
 
 public void setReportHistoryButtonEnabled(boolean enable){
        reportHistoryButton.setEnabled(enable);
    }
 
    public void setFieldValues(final Map fieldMap) {
        final Set rec = fieldMap.keySet();
        final Object[] s = rec.toArray();
        fieldsList.setModel(new javax.swing.AbstractListModel() {

            @Override
            public int getSize() {                
                return rec.size();
            }

            @Override
            public Object getElementAt(int i) {
                return s[i];
            }
        });
    }

    
    @Override
     protected boolean exitPageCheck() {
        // TBD
        return true;
    }

    /** Get the menu bar for the current page.  Subclasses must override this to provide a
     * page-dependent menu bar.
     */
    @Override
    protected javax.swing.JMenuBar getPageJMenuBar() {
        return menuBar;
    }

    public int getPostValidationId() {
        return postValidationId;
    }

    public void setPostValidationId(int postValidationId) {
        this.postValidationId = postValidationId;
    }

    public boolean isIsProcessCompleted() {
        return isProcessCompleted;
    }

    public void setIsProcessCompleted(boolean isProcessCompleted) {
        this.isProcessCompleted = isProcessCompleted;
    }

    public String getServerFilePath() {
        return serverFilePath;
    }

    public void setServerFilePath(String serverFilePath) {
        this.serverFilePath = serverFilePath;
    }
    

    public void setEnabledComponents(boolean enabled) {
        nextButton.setEnabled(enabled);
        projectComboBox.setEnabled(enabled);
        volumeComboBox.setEnabled(enabled);
        fieldsList.setEnabled(enabled);
        validationFunctionsList.setEnabled(enabled);
    }

    /**
     * On selecting the Post Validation tab.
     * It load all the projects.
     */
    @Override
    protected void tabSelected() { 
//        if(projectModel == null){
//        projectModel = new SQLManagedComboModel(GET_ALL_PROJECTS);
//        projectModel.register();
//        projectComboBox.setModel(projectModel);     
//        }
       QueryComboModel combo = new QueryComboModel(GET_ALL_PROJECTS);
       projectComboBox.setModel(combo);
    }

    
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton downloadButton;
   private javax.swing.JList fieldsList;
   private javax.swing.JScrollPane functionsScrollPane;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JList jList1;
   private javax.swing.JMenu jMenu1;
   private javax.swing.JMenu jMenu2;
   private javax.swing.JMenuBar jMenuBar1;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JButton nextButton;
   private javax.swing.JComboBox projectComboBox;
   private javax.swing.JButton reportHistoryButton;
   private javax.swing.JLabel validationFunctoinsLabel;
   private javax.swing.JComboBox volumeComboBox;
   // End of variables declaration//GEN-END:variables

}


class CheckListCellRenderer extends JCheckBox
        implements ListCellRenderer {

    protected static Border m_noFocusBorder =
            new EmptyBorder(1, 1, 1, 1);

    public CheckListCellRenderer() {

        super();

        setOpaque(true);

        setBorder(m_noFocusBorder);

    }

    @Override
    public Component getListCellRendererComponent(JList list,
            Object value, int index, boolean isSelected, boolean cellHasFocus) {

        System.out.println("OBJECT ----------------> " + value);
        
        setText(value.toString());

        setBackground(isSelected ? list.getSelectionBackground() : list.getBackground());

        setForeground(isSelected ? list.getSelectionForeground() : list.getForeground());

        FunctionsData data = (FunctionsData) value;

        setSelected(data.isSelected());

        setFont(list.getFont());

        setBorder((cellHasFocus) ? UIManager.getBorder("List.focusCellHighlightBorder")
                : m_noFocusBorder);

        return this;

    }
}



class CheckListener implements MouseListener, KeyListener {

    protected PostValidationPage m_parent;
    protected JList m_list;

    public CheckListener(PostValidationPage parent) {
        m_parent = parent;
        m_list = parent.validationFunctionsList;

    }

    @Override
    public void mouseClicked(MouseEvent e) {

        if (e.getX() < 20) {
            doCheck();
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }
    
    @Override
    public void mouseExited(MouseEvent e) {
    }
    
    @Override
    public void keyPressed(KeyEvent e) {

        if (e.getKeyChar() == ' ') {
            doCheck();
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }

    protected void doCheck() {

        int index = m_list.getSelectedIndex();

        if (index < 0) {
            return;
        }
        FunctionsData data = (FunctionsData) m_list.getModel().
                getElementAt(index);
        data.invertSelected();
        m_list.repaint();
    }
}
