/* $Header: /home/common/cvsarea/ibase/dia/src/ui/ImportPage.java,v 1.14.6.3 2006/08/23 19:04:52 nancy Exp $ */
/*
 * ImportPage.java
 *
 * Created on October 8, 2004, 10:40 AM
 */
package ui;

import beans.DateSelectionField;
import beans.ExampleFileFilter;
import beans.LTextField;
import client.ClientTask;
import client.TaskExecuteQuery;
import client.TaskImportData;
import client.TaskRequestImportProgressStatus;
import common.Log;
import dbload.XrefConstants;
import java.awt.Dimension;
import java.awt.event.ActionListener;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;

import model.SQLManagedComboModel;
import model.QueryComboModel;
import java.sql.ResultSet;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;
import report.ReportParameters;

/**
 * This is the import tab screen in Admin SPiCA application. This allows users to import a volume.
 * Support for LFP or BRS cross reference files in place. These files should be an absolute path. Options to replace
 * a volume is present. If the project does not exist, it will be created with the first volume.  The default Batch Span
 * is 2500 pages, but the user may specify any number of pages per batch. The user can choose to import a L1 volume which
 * supports only BRS cross reference file format. L1 batch span creates L1 batches based on the span. The user can
 * choose the location of the images which may be hosted on an Image server or on a UNC path.
 *
 * @see client.TaskImportData
 * @see dbload.XrefConstants
 */
public class ImportPageWithL1 extends AbstractPage implements XrefConstants {

    private final String GET_ALL_PROJECTS = "ReportPage.projectCombo";
    private final String GET_ALL_VOLUMES = "Import Export.get all volumes";
    private final String GET_ALL_INTERNAL_VOLUMES = "Import Export.get all internal_volume_name";
    private SQLManagedComboModel projectModel = null;
    private QueryComboModel volumeModel = null;
    protected ReportParameters param;
    private int projectId = 0;
    private int volumeId = 0;
    private String project = "";
    private String volume = "";
    private String internalVolume = "";
    private JFileChooser chooser;
    private FileFilter txtFilter;
    private FileFilter imgFilter;
    private FileFilter brsFilter;
    private int progressCount;
    private String errorMessage;

    /**
     * Creates new form ImportPage.
     * @param frame the frame in which to place this screen
     */
    public ImportPageWithL1(AdminFrame frame) {
        super(frame);
        // param = this.frame;
        initComponents();

        // Add BRS xref format 12/20/05
        // Multiple inputs not required by SOW - use default LFP
        //xrefTypePanel.setVisible(false);
        doculexButton.setVisible(false);
        opticonButton.setVisible(false);
        summationButton.setVisible(false);
        //The fields for L1 will be disabled since this is not a 'default' feature
        disableFieldsForL2();

        txtFilter = makeFilter("txt", "Imported Data file");
        imgFilter = makeFilter("img", "Import img file");
        brsFilter = makeFilter("brs", "Import brs file");
    }

    private FileFilter makeFilter(String extension, String description) {
        // Note: source for ExampleFileFilter can be found in FileChooserDemo,
        // under the demo/jfc directory in the Java 2 SDK, Standard Edition.
        ExampleFileFilter filter = new ExampleFileFilter();
        filter.addExtension(extension);
        filter.setDescription(description);
        return filter;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        xrefTypeButtonGroup = new javax.swing.ButtonGroup();
        titleLabel = new javax.swing.JLabel();
        parameterPanel = new javax.swing.JPanel();
        projectLabel = new javax.swing.JLabel();
        projectPanel = new javax.swing.JPanel();
        projectCombo = new javax.swing.JComboBox();
        splitsCheckBox = new javax.swing.JCheckBox();
        volumeLabel = new javax.swing.JLabel();
        volumePanel = new javax.swing.JPanel();
        volumeCombo = new javax.swing.JComboBox();
        replaceCheckBox = new javax.swing.JCheckBox();
        spanLabel = new javax.swing.JLabel();
        spanPanel = new javax.swing.JPanel();
		batchspanField = new beans.LIntegerField();
		l1BatchSpanField = new beans.LIntegerField();
        xrefTypePanel = new javax.swing.JPanel();
        doculexButton = new javax.swing.JRadioButton();
        lfpButton = new javax.swing.JRadioButton();
		//iproButton = new javax.swing.JRadioButton();
        opticonButton = new javax.swing.JRadioButton();
        summationButton = new javax.swing.JRadioButton();
        //gmButton = new javax.swing.JRadioButton();
		brsButton = new javax.swing.JRadioButton();
        lfpLabel = new javax.swing.JLabel();
        lfpPanel = new javax.swing.JPanel();
        lfpFilename = new javax.swing.JTextField();
        imageLabel = new javax.swing.JLabel();
        imagePanel = new javax.swing.JPanel();
        imagePath = new javax.swing.JTextField();
        //--------------------------------------------
        codingmanualPanel = new javax.swing.JPanel();
        codingmanualLabel = new javax.swing.JLabel();
        codingmanualTextField = new javax.swing.JTextField();
        //------------------------------------------
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        l1Checkbox = new javax.swing.JCheckBox();
        l1BrsFileNamePanel = new javax.swing.JPanel();
        brsFilePathTextField = new javax.swing.JTextField();
        l1ImgFileNamePanel = new javax.swing.JPanel();
        imgFilePathTextField = new javax.swing.JTextField();
        l1SrcTxtFileNamePanel = new javax.swing.JPanel();
        srcTxtFilePathTextField = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        l1SrcImgPathPanel = new javax.swing.JPanel();
        srcImgPathTextField = new javax.swing.JTextField();
        l1BatchSpanPanel = new javax.swing.JPanel();

        importButton = new javax.swing.JButton();
		browseBRSButton = new javax.swing.JButton();
		browseIMGButton = new javax.swing.JButton();
		browseTXTButton = new javax.swing.JButton();
		browseSRCIMGButton = new javax.swing.JButton();

	    browseCROSSREFButton = new javax.swing.JButton();
		browseIMGPATHButton = new javax.swing.JButton();
	    browseCODMANUALButton = new javax.swing.JButton();
		importProgressBar = new javax.swing.JProgressBar();
		unc = new javax.swing.JRadioButton();
		http = new javax.swing.JRadioButton();
		pathTypeButtonGroup = new javax.swing.ButtonGroup();
        pathTypePanel = new javax.swing.JPanel();
		httpPathPanel = new javax.swing.JPanel();
        //ipAddress = new javax.swing.JTextField();
		ipAddress = new LTextField(15);
		port = new LTextField();
		//port = new LIntegerField();
		ipAddressLabel = new  javax.swing.JLabel();
		portLabel = new  javax.swing.JLabel();
		volumeCompletionDateLabel = new  javax.swing.JLabel();
		unitizeOptional = new javax.swing.JCheckBox();
		unitizeLabel = new  javax.swing.JLabel();
		internalVolumeLabel = new javax.swing.JLabel();
        internalVolumePanel = new javax.swing.JPanel();
        internalVolumeCombo = new javax.swing.JComboBox();
        emptyLabel = new  javax.swing.JLabel();
         dateField = new DateSelectionField();
        unc.addActionListener(buttonComboListener);
		http.addActionListener(buttonComboListener);

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");
        exitMenuItem.setMnemonic('E');
        exitMenuItem.setText("Exit");
        exitMenuItem.setToolTipText("Exit program.");
		 exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setLayout(new java.awt.GridBagLayout());

        titleLabel.setFont(new java.awt.Font("Dialog", 1, 24));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Import");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 20, 0);
        add(titleLabel, gridBagConstraints);

        parameterPanel.setLayout(new java.awt.GridBagLayout());

		parameterPanel.setLayout(new java.awt.GridBagLayout());

        projectLabel.setFont(new java.awt.Font("Dialog", 0, 11));
        projectLabel.setText("Project: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(projectLabel, gridBagConstraints);

        projectCombo.setEditable(true);
        projectCombo.setPreferredSize(new java.awt.Dimension(175, 25));
        projectCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectComboActionPerformed(evt);
            }
        });
		projectCombo.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {

            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }

            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }

            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                projectComboPopupMenuWillBecomeVisible(evt);
            }
        });

        projectPanel.add(projectCombo);

        splitsCheckBox.setText("Enable Split Documents");
        splitsCheckBox.setEnabled(false);
        projectPanel.add(splitsCheckBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(projectPanel, gridBagConstraints);

        volumeLabel.setFont(new java.awt.Font("Dialog", 0, 11));
        volumeLabel.setText("Volume: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(volumeLabel, gridBagConstraints);

        volumeCombo.setEditable(true);
        volumeCombo.setEnabled(false);
        volumeCombo.setPreferredSize(new java.awt.Dimension(175, 25));
        volumeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volumeComboActionPerformed(evt);
            }
        });
        volumeCombo.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                volumeComboPopupMenuWillBecomeVisible(evt);
            }
        });

        volumePanel.add(volumeCombo);

        replaceCheckBox.setFont(new java.awt.Font("Dialog", 0, 11));
        replaceCheckBox.setText("Overwrite Existing Volume");
        volumePanel.add(replaceCheckBox);

        //unitizeOptional.setFont(new java.awt.Font("Dialog", 0, 11));
       // unitizeOptional.setText("Overwrite Existing Volume");
       // volumePanel.add(unitizeOptional);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(volumePanel, gridBagConstraints);

        spanLabel.setFont(new java.awt.Font("Dialog", 0, 11));
        spanLabel.setText("Batch Span:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(spanLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		batchspanField.setColumns(6);
		spanPanel.add(batchspanField);
        parameterPanel.add(spanPanel, gridBagConstraints);

        xrefTypePanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        xrefTypePanel.setFocusable(false);
        xrefTypePanel.setRequestFocusEnabled(false);
        xrefTypeButtonGroup.add(doculexButton);
        doculexButton.setText("DOCULEX");
        doculexButton.setToolTipText("DOCULEX .dbf file");
        xrefTypePanel.add(doculexButton);
        //----------------------------------------------------------------------
        //xrefTypeButtonGroup.add(iproButton);
        //iproButton.setSelected(true);
        //iproButton.setText("IPRO");
        //iproButton.setToolTipText("IPRO .lfp file");
        //xrefTypePanel.add(iproButton);
        //----------------------------------------------------------------------
        xrefTypeButtonGroup.add(lfpButton);
        lfpButton.setSelected(true);
        lfpButton.setText("LFP");
        lfpButton.setToolTipText("OPTICON .opt file");
        xrefTypePanel.add(lfpButton);

        xrefTypeButtonGroup.add(summationButton);
        summationButton.setText("SUMMATION");
        summationButton.setToolTipText("SUMMATION .dii file");
        xrefTypePanel.add(summationButton);

   	 //----------------------------------------------------------------------
       // xrefTypeButtonGroup.add(gmButton);
       // gmButton.setText("GM");
       // gmButton.setToolTipText(".brs file");
       // xrefTypePanel.add(gmButton);
		 //----------------------------------------------------------------------

		  xrefTypeButtonGroup.add(brsButton);
        brsButton.setText("BRS");
        brsButton.setToolTipText("File Type BRS");
        xrefTypePanel.add(brsButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(xrefTypePanel, gridBagConstraints);

        lfpLabel.setFont(new java.awt.Font("Dialog", 0, 11));
        lfpLabel.setText("Cross Ref. Filename:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(lfpLabel, gridBagConstraints);

        codingmanualLabel.setFont(new java.awt.Font("Dialog", 0, 11));
        codingmanualLabel.setText("Coding manual");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(codingmanualLabel, gridBagConstraints);

        lfpFilename.setColumns(50);
        lfpFilename.setDocument(new PlainDocument() {
            public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {
                super.insertString(offs, str, a);
                checkEnableImportButton();
            }
            public void remove(int offs, int len)
            throws BadLocationException
            {
                super.remove(offs,len);
                checkEnableImportButton();
            }
        });
        lfpPanel.add(lfpFilename);
		browseCROSSREFButton.setText("...");
		browseCROSSREFButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseCROSSREFButtonActionPerformed(evt);
            }
        });
		lfpPanel.add(browseCROSSREFButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(lfpPanel, gridBagConstraints);

        imageLabel.setFont(new java.awt.Font("Dialog", 0, 11));
        imageLabel.setText("Image Path:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(imageLabel, gridBagConstraints);

        imagePath.setColumns(50);
        imagePath.setDocument(new PlainDocument() {
            public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {
                super.insertString(offs, str, a);
                checkEnableImportButton();
            }
            public void remove(int offs, int len)
            throws BadLocationException
            {
                super.remove(offs,len);
                checkEnableImportButton();
            }
        });
        imagePanel.add(imagePath);
		browseIMGPATHButton.setText("...");
		browseIMGPATHButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseIMGPATHButtonActionPerformed(evt);
            }
        });
		imagePanel.add(browseIMGPATHButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(imagePanel, gridBagConstraints);

        codingmanualTextField.setColumns(50);
        codingmanualTextField.setDocument(new PlainDocument() {
            public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {
                super.insertString(offs, str, a);
                checkEnableImportButton();
            }
            public void remove(int offs, int len)
            throws BadLocationException
            {
                super.remove(offs,len);
                checkEnableImportButton();
            }
        });
        codingmanualPanel.add(codingmanualTextField);
		browseCODMANUALButton.setText("...");
		browseCODMANUALButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseCODMANUALButtonActionPerformed(evt);
            }
        });
		codingmanualPanel.add(browseCODMANUALButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(codingmanualPanel, gridBagConstraints);

        pathTypePanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
		pathTypeButtonGroup.add(unc);
        unc.setSelected(true);
        unc.setText("UNC");
        unc.setToolTipText("UNC file path");
        pathTypePanel.add(unc);

		pathTypeButtonGroup.add(http);
        http.setText("Image Server");
        http.setToolTipText("Image Server path");
        pathTypePanel.add(http);

		gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(pathTypePanel, gridBagConstraints);

		httpPathPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

         ipAddressLabel.setText("Image Server IP :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(ipAddressLabel, gridBagConstraints);

		ipAddress.setColumns(15);
		ipAddress.setEnabled(false);
		port.setEnabled(true);
		port.setMaximumSize(new Dimension(1,10));
        httpPathPanel.add(ipAddress);
        port.setColumns(4);
		port.setEnabled(false);

		portLabel.setText("			Image Server Port :");
		httpPathPanel.add(portLabel);
        httpPathPanel.add(port);

		gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(httpPathPanel, gridBagConstraints);

        jLabel1.setText("L1 BRS Filename:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(jLabel1, gridBagConstraints);

        jLabel2.setText("L1 IMG Filename:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(jLabel2, gridBagConstraints);

        jLabel3.setText("L1 SOURCE.TXT Filename:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(jLabel3, gridBagConstraints);

        jLabel4.setText("L1 SRC Image Path:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;

        jLabel5.setText("L1 Batch Span:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(jLabel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(jLabel6, gridBagConstraints);

        internalVolumeLabel.setFont(new java.awt.Font("Dialog", 0, 11));
        internalVolumeLabel.setText("Internal Volume: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(internalVolumeLabel, gridBagConstraints);

        internalVolumeCombo.setEditable(true);
        internalVolumeCombo.setPreferredSize(new java.awt.Dimension(175, 25));
        internalVolumeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            }
        });

        internalVolumeCombo.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
		public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
		}
		public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
		}
		public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
			internalVolumeComboPopupMenuWillBecomeVisible(evt);
		}
        });

        internalVolumePanel.add(internalVolumeCombo);

        volumeCompletionDateLabel.setText("Volume Completion Date:");
        internalVolumePanel.add(volumeCompletionDateLabel);

		dateField.getComponent(1).setMaximumSize(new Dimension(50,20));
		JTextField field = (JTextField)dateField.getComponent(0);
        field.setColumns(10);
		dateField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateFieldPropertyChange(evt);
            }
        });


        internalVolumePanel.add(dateField);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(internalVolumePanel, gridBagConstraints);


        unitizeLabel.setFont(new java.awt.Font("Dialog", 0, 11));
		unitizeLabel.setText("Skip Unitization:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(unitizeLabel, gridBagConstraints);

        unitizeOptional.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        unitizeOptional.setMargin(new java.awt.Insets(0, 50, 0, 0));
        unitizeOptional.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitizeOptionalActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(0,5, 0, 0);
        parameterPanel.add(unitizeOptional, gridBagConstraints);

        emptyLabel.setFont(new java.awt.Font("Dialog", 0, 11));
        emptyLabel.setText("  ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(0,5, 0, 0);
        parameterPanel.add(emptyLabel, gridBagConstraints);


        jLabel7.setText("L1 Process:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(jLabel7, gridBagConstraints);

        l1Checkbox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        l1Checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                l1CheckboxActionPerformed(evt);
                jCheckBox1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(0,5, 0, 0);
        parameterPanel.add(l1Checkbox, gridBagConstraints);

        brsFilePathTextField.setColumns(50);
		brsFilePathTextField.setDocument(new PlainDocument() {
            public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {
                super.insertString(offs, str, a);
                checkEnableImportButton();
            }
            public void remove(int offs, int len)
            throws BadLocationException
            {
                super.remove(offs,len);
                checkEnableImportButton();
            }
        });
        brsFilePathTextField.setToolTipText("Please enter the BRS file path relative to Project and Volume");
        l1BrsFileNamePanel.add(brsFilePathTextField);
		browseBRSButton.setText("...");
		browseBRSButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseBRSButtonActionPerformed(evt);
            }
        });
		l1BrsFileNamePanel.add(browseBRSButton);
        brsFilePathTextField.getAccessibleContext().setAccessibleName("brsFilePathTextField");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        parameterPanel.add(l1BrsFileNamePanel, gridBagConstraints);

        imgFilePathTextField.setColumns(50);
		imgFilePathTextField.setDocument(new PlainDocument() {
            public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {
                super.insertString(offs, str, a);
                checkEnableImportButton();
            }
            public void remove(int offs, int len)
            throws BadLocationException
            {
                super.remove(offs,len);
                checkEnableImportButton();
            }
        });
        imgFilePathTextField.setToolTipText("Enter the path of .IMG file relative to the project and volume");
        l1ImgFileNamePanel.add(imgFilePathTextField);
		browseIMGButton.setText("...");
		browseIMGButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseIMGButtonActionPerformed(evt);
            }
        });
		l1ImgFileNamePanel.add(browseIMGButton);
        imgFilePathTextField.getAccessibleContext().setAccessibleName("imgFilePathTextField");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        parameterPanel.add(l1ImgFileNamePanel, gridBagConstraints);

        srcTxtFilePathTextField.setColumns(50);
        srcTxtFilePathTextField.setDocument(new PlainDocument() {
            public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {
                super.insertString(offs, str, a);
                checkEnableImportButton();
            }
            public void remove(int offs, int len)
            throws BadLocationException
            {
                super.remove(offs,len);
                checkEnableImportButton();
            }
        });
        srcTxtFilePathTextField.setToolTipText("Enter source.TXT file of your project");
        l1SrcTxtFileNamePanel.add(srcTxtFilePathTextField);
		browseTXTButton.setText("...");
		browseTXTButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseTXTButtonActionPerformed(evt);
            }
        });
		l1SrcTxtFileNamePanel.add(browseTXTButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        parameterPanel.add(l1SrcTxtFileNamePanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;

        srcImgPathTextField.setColumns(50);
		srcImgPathTextField.setDocument(new PlainDocument() {
            public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {
                super.insertString(offs, str, a);
                checkEnableImportButton();
            }
            public void remove(int offs, int len)
            throws BadLocationException
            {
                super.remove(offs,len);
                checkEnableImportButton();
            }
        });
        srcImgPathTextField.setName("");
		browseSRCIMGButton.setText("...");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        parameterPanel.add(l1SrcImgPathPanel, gridBagConstraints);

        l1BatchSpanField.setColumns(6);
        l1BatchSpanPanel.add(l1BatchSpanField);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(l1BatchSpanPanel, gridBagConstraints);

        add(parameterPanel, new java.awt.GridBagConstraints());
        importButton.setFont(new java.awt.Font("Dialog", 1, 14));
        importButton.setText("Import");
        importButton.setToolTipText("Import");
        importButton.setEnabled(false);
       // importButton.setFocusable(false);
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

	    JPanel importPanel = new JPanel(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.insets = new java.awt.Insets(20,120, 20, 0);
        importPanel.add(importButton, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		parameterPanel.add(importPanel,gridBagConstraints);

		importProgressBar.setForeground(new java.awt.Color(102, 204, 0));
        importProgressBar.setPreferredSize(new java.awt.Dimension(600, 12));
		gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
        add(importProgressBar, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void l1CheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_l1CheckboxActionPerformed
        if (l1Checkbox.isSelected()) {
            brsFilePathTextField.setEnabled(true);
            imgFilePathTextField.setEnabled(true);
            srcTxtFilePathTextField.setEnabled(true);
            srcImgPathTextField.setEnabled(true);
            l1BatchSpanField.setEnabled(true);
            lfpFilename.setEnabled(false);
            browseCROSSREFButton.setEnabled(false);
            brsButton.setSelected(true);
            browseBRSButton.setEnabled(true);
            browseTXTButton.setEnabled(true);
            browseSRCIMGButton.setEnabled(true);
            browseIMGButton.setEnabled(true);
            lfpFilename.setText("");
        } else {
            lfpButton.setSelected(true);
            disableFieldsForL2();
        }
    }//GEN-LAST:event_l1CheckboxActionPerformed

    private void unitizeOptionalActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unitizeOptionalActionPerformed
        if (unitizeOptional.isSelected()) {
            isUnitizeOptional = true;
            jLabel5.setText("L1 Document Range:");
            spanLabel.setText("L2 Document Range:");
        } else if (!unitizeOptional.isSelected()) {
            isUnitizeOptional = false;
            jLabel5.setText("L1 Batch Span:");
            spanLabel.setText("Batch Span:");
        }
	}//GEN-LAST:event_unitizeOptionalActionPerformed
    private void disableFieldsForL2() {
        brsFilePathTextField.setEnabled(false);
        imgFilePathTextField.setEnabled(false);
        srcTxtFilePathTextField.setEnabled(false);
        srcImgPathTextField.setEnabled(false);
        l1BatchSpanField.setEnabled(false);
        lfpFilename.setEnabled(true);
        browseCROSSREFButton.setEnabled(true);
        browseBRSButton.setEnabled(false);
        browseIMGButton.setEnabled(false);
        browseTXTButton.setEnabled(false);
        browseSRCIMGButton.setEnabled(false);
        brsFilePathTextField.setText("");
        imgFilePathTextField.setText("");
        srcTxtFilePathTextField.setText("");
    }

    private void browseBRSButtonActionPerformed(java.awt.event.ActionEvent evt) {
        chooser = new JFileChooser();
        chooser.setDialogTitle("Imported BRS Filename");
        chooser.addChoosableFileFilter(brsFilter);
        chooser.setFileFilter(brsFilter);
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int select = chooser.showOpenDialog(l1BrsFileNamePanel);
        if (select == JFileChooser.APPROVE_OPTION) {
            brsFilePathTextField.setText(chooser.getSelectedFile().getPath());
        }
    }

    private void browseIMGButtonActionPerformed(java.awt.event.ActionEvent evt) {

        chooser = new JFileChooser();
        chooser.setDialogTitle("Imported LFP Filename");
        chooser.addChoosableFileFilter(imgFilter);
        chooser.setFileFilter(imgFilter);
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int select = chooser.showOpenDialog(l1BrsFileNamePanel);
        if (select == JFileChooser.APPROVE_OPTION) {
            imgFilePathTextField.setText(chooser.getSelectedFile().getPath());
        }
    }

    private void browseTXTButtonActionPerformed(java.awt.event.ActionEvent evt) {
        chooser = new JFileChooser();
        chooser.setDialogTitle("Imported TXT Filename");
        chooser.addChoosableFileFilter(txtFilter);
        chooser.setFileFilter(txtFilter);
        //chooser.showOpenDialog(l1BrsFileNamePanel);
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int select = chooser.showOpenDialog(l1BrsFileNamePanel);
        if (select == JFileChooser.APPROVE_OPTION) {
            srcTxtFilePathTextField.setText(chooser.getSelectedFile().getPath());
        }
    }

    private void browseCROSSREFButtonActionPerformed(java.awt.event.ActionEvent evt) {
        chooser = new JFileChooser();
        chooser.setDialogTitle("Imported CROSS_REF_FILE Filename");
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int select = chooser.showOpenDialog(l1BrsFileNamePanel);
        if (select == JFileChooser.APPROVE_OPTION) {
            lfpFilename.setText(chooser.getSelectedFile().getPath());
        }
    }

    private void browseIMGPATHButtonActionPerformed(java.awt.event.ActionEvent evt) {
        chooser = new JFileChooser();
        chooser.setDialogTitle("Imported IMG_PATH ");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int select = chooser.showOpenDialog(l1BrsFileNamePanel);
        if (select == JFileChooser.APPROVE_OPTION) {
            imagePath.setText(chooser.getSelectedFile().getPath());
        }
    }

    private void browseCODMANUALButtonActionPerformed(java.awt.event.ActionEvent evt) {
        chooser = new JFileChooser();
        chooser.setDialogTitle("Imported CODING_MANUAL Filename ");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int select = chooser.showOpenDialog(l1BrsFileNamePanel);
        if (select == JFileChooser.APPROVE_OPTION) {
            codingmanualTextField.setText(chooser.getSelectedFile().getPath());
        }
    }

    private void volumeComboPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_volumeComboPopupMenuWillBecomeVisible
        int sel = projectCombo.getSelectedIndex();
        if (sel > -1) {
            project = (String) projectCombo.getSelectedItem();
            projectId = ((QueryComboModel) projectCombo.getModel()).getIdAt(sel);
            volumeModel = new QueryComboModel(GET_ALL_VOLUMES, /* required? */ false, new String[]{Integer.toString(projectId)}, "");
            volumeCombo.setModel(volumeModel);
        }
    }//GEN-LAST:event_volumeComboPopupMenuWillBecomeVisible

	 private void internalVolumeComboPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_internalVolumeComboPopupMenuWillBecomeVisible
             int sel = projectCombo.getSelectedIndex();
             if (sel > -1) {
                 project = (String) projectCombo.getSelectedItem();
                 projectId = ((QueryComboModel) projectCombo.getModel()).getIdAt(sel);
                 volumeModel = new QueryComboModel(GET_ALL_INTERNAL_VOLUMES, /* required? */ false, new String[]{Integer.toString(projectId)}, "");
                 internalVolumeCombo.setModel(volumeModel);
             }
    }//GEN-LAST:event_internalVolumeComboPopupMenuWillBecomeVisible

    private void projectComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectComboActionPerformed

        int sel = projectCombo.getSelectedIndex();
        if (sel > -1) {
            project = (String) projectCombo.getSelectedItem();
            projectId = ((QueryComboModel) projectCombo.getModel()).getIdAt(sel);
            setProjectSplitDocuments(projectId);
            splitsCheckBox.setEnabled(true);
            if (volumeModel != null) {
                volumeCombo.setSelectedIndex(-1);
            }
            volumeCombo.setEnabled(true);
        } else {
            project = "";
            projectId = 0;
            volumeCombo.setEnabled(true);
            splitsCheckBox.setEnabled(false);
        }
        checkEnableImportButton();
    }//GEN-LAST:event_projectComboActionPerformed

    private void projectComboPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt){
       tabSelected();
    }
    
    private void setProjectSplitDocuments(int projectId) {
        final ClientTask task = new TaskExecuteQuery("ProjectAdminPage.get_split_documents", Integer.toString(projectId));
        task.setCallback(new Runnable() {

            public void run() {
                try {
                    ResultSet rs = (ResultSet) task.getResult();
                    if (rs != null) {
                        setProjectSplitDocumentsEntry(rs);
                    }
                } catch (Throwable th) {
                    Log.quit(th);
                }
            }
        });
        task.enqueue();
    }

    private void setProjectSplitDocumentsEntry(ResultSet rs) {
        try {
            if (rs.next()) {
                splitsCheckBox.setSelected("0".equals(rs.getString(1)) ? false : true);
            }
        } catch (Throwable th) {
            Log.quit(th);
        }
    }

    private void volumeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volumeComboActionPerformed
        int sel = volumeCombo.getSelectedIndex();
        if (sel > -1) {
            volume = (String) volumeModel.getElementAt(sel);
            volumeId = volumeModel.getIdAt(sel);
            replaceCheckBox.setEnabled(true);
        } else {
            volume = "";
            volumeId = 0;
            replaceCheckBox.setEnabled(false);
        }
        checkEnableImportButton();
    }//GEN-LAST:event_volumeComboActionPerformed

    boolean isImportDone = false;
    boolean isUnitizeOptional = false;

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed

        JTextField selectedDate = (JTextField) dateField.getComponent(0);
        String date = selectedDate.getText();
        importButton.setEnabled(false);
        isImportDone = false;
        String name = imagePath.getText();
        String codingmanual = codingmanualTextField.getText().trim();
        if(codingmanual.length() != 0){
            if(codingmanual.startsWith("http")){ //check Http path existence
                try{
                        URL url = new URL(codingmanual);                
                        URLConnection  conn = url.openConnection();      
                        BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));                        
                }catch(Exception e){
                     importButton.setEnabled(true);
                     JOptionPane.showMessageDialog(this, "Coding manual file not found.\nPlease verify the path.","Alert",JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            }else{   //check unc path existence 
                    if(codingmanual.startsWith("\\\\")){
                        File file = new File(codingmanual);                         
                        if(!file.isFile() || !file.exists()){
                             importButton.setEnabled(true);
                             JOptionPane.showMessageDialog(this, "Coding manual file not found.\nPlease verify the path.","Alert",JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                    }else{
                        importButton.setEnabled(true);
                        JOptionPane.showMessageDialog(this, "Coding Manual path can be either http path or unc path.","Alert",JOptionPane.INFORMATION_MESSAGE);
                        return;        
                    }
            }
        }
       
        int fileType = 0;
        if (!name.endsWith("/") && !name.endsWith("\\")) {
            name = name + "/";
        }
        volume = (String) volumeCombo.getEditor().getItem();
        project = (String) projectCombo.getEditor().getItem();
        internalVolume = (String) internalVolumeCombo.getEditor().getItem();
        if(!date.isEmpty()){
           String [] split = date.split("-");
           Calendar cal = new GregorianCalendar();
           //system input
           int year = cal.get(Calendar.YEAR);
           int month = cal.get(Calendar.MONTH) + 1;    // because in Gregorian cal month starts from '0 to 11'

           int day = cal.get(Calendar.DAY_OF_MONTH);
           //userInput

           int inputYear =Integer.parseInt( split[0]);
           int inputMonth = Integer.parseInt( split[1]);
           int inputDate = Integer.parseInt( split[2]);
           if(inputYear == year){
             if(inputMonth ==month){
                 if(inputDate>=day){

                 }else{
                    importButton.setEnabled(true);
                   JOptionPane.showMessageDialog(this,
                  "Date should Be Greater/Equal to Current Date");
                    return;
                 }

             }else if(inputMonth < month){
                importButton.setEnabled(true);
               JOptionPane.showMessageDialog(this,
              "Date should Be Greater/Equal to Current Date");
                return;
              }

           }else if(inputYear < year){
              importButton.setEnabled(true);
               JOptionPane.showMessageDialog(this,
              "Date should Be Greater/Equal to Current Date");
                return;
            }
        }else{
               importButton.setEnabled(true);
               JOptionPane.showMessageDialog(this,
              "Please specify the volume completion date");
                return;
        }
        if (doculexButton.isSelected()) {
            fileType = DOCULEX;
        } else if (lfpButton.isSelected()) {
            fileType = LFP;
        } else if (opticonButton.isSelected()) {
            fileType = OPTICON;
        } else if (summationButton.isSelected()) {
            fileType = SUMMATION;
        } else if (brsButton.isSelected()) {
            fileType = BRS;
        }

        if (l1Checkbox.isSelected()) {
            if (unitizeOptional.isSelected()) {
                isUnitizeOptional = true;
                jLabel5.setText("L1 Document Range:");
                spanLabel.setText("L2 Document Range:");
            } else if (!unitizeOptional.isSelected()) {
                isUnitizeOptional = false;
                jLabel5.setText("L1 Batch Span:");
                spanLabel.setText("Batch Span:");
            }
            String brsFileName = brsFilePathTextField.getText();
            String imgFileName = imgFilePathTextField.getText();
            String txtFileName = srcTxtFilePathTextField.getText();
            String imageIP = ipAddress.getText();
            String portAddress = port.getText();
            String imageServerPath = null;
            if (http.isSelected()) {
                //validation
                if (imageIP.isEmpty()) {
                    JOptionPane.showMessageDialog(this,
                        "serverIP should not be empty");
                    importButton.setEnabled(true);
                    return;
                } else {
                    Pattern specialPattern = Pattern.compile("[a-z,A-Z]");
                    Matcher specialMatcher = specialPattern.matcher(imageIP);
                    Pattern specialPattern1 = Pattern.compile("[/,+=! \\[#$-]");
                    Matcher specialMatcher1 = specialPattern1.matcher(imageIP);
                    if (specialMatcher.find()) {
                        JOptionPane.showMessageDialog(this,
                            "Character are not allowed for serverIP");
                        importButton.setEnabled(true);
                        return;

                    } else if (specialMatcher1.find()) {
                        //error1= true;
                        JOptionPane.showMessageDialog(this,
                            "Special Character are not allowed for serverIP");
                        importButton.setEnabled(true);
                        return;
                    }
                }
                if (portAddress.isEmpty()) {
                    JOptionPane.showMessageDialog(this,
                        "port number should not be empty");
                    importButton.setEnabled(true);
                    return;
                } else {
                    try {
                        int x = Integer.parseInt(portAddress);
                    } catch (NumberFormatException nFE) {
                        JOptionPane.showMessageDialog(this,
                            "Only integer are allowed for port number");
                        importButton.setEnabled(true);
                        return;
                    }
                }
                imageServerPath = "image:" + imageIP + ":" + portAddress + ":";
            } else {
                imageServerPath = "unc:";
            }
            if (http.isSelected()) {
                browseIMGPATHButton.setEnabled(false);
            } else if (unc.isSelected()) {
                browseIMGPATHButton.setEnabled(true);
            }
            
            
                 
            

            final ClientTask task = new TaskImportData( project, volume, codingmanual,
                                                            l1BatchSpanField.getValue(),
                                                            batchspanField.getValue(),
                                                            fileType, brsFileName, imgFileName, txtFileName, name,
                                                            replaceCheckBox.isSelected() ? "Yes" : "No",
                                                            splitsCheckBox.isSelected() ? "Yes" : "No",
                                                            imageServerPath, internalVolume, isUnitizeOptional, date);
            task.enqueue();

        } else {
            if (unitizeOptional.isSelected()) {
                isUnitizeOptional = true;
                jLabel5.setText("L1 Document Range:");
                spanLabel.setText("L2 Document Range:");
            } else if (!unitizeOptional.isSelected()) {
                isUnitizeOptional = false;
                jLabel5.setText("L1 Batch Span:");
                spanLabel.setText("Batch Span:");
            }
            String imageIP = ipAddress.getText();
            String portAddress = port.getText();
            //validation
            if (http.isSelected()) {
                if (imageIP.isEmpty()) {
                    JOptionPane.showMessageDialog(this,
                        "serverIP should not be empty");
                    importButton.setEnabled(true);
                    return;
                } else {

                    Pattern specialPattern = Pattern.compile("[a-z,A-Z]");
                    Matcher specialMatcher = specialPattern.matcher(imageIP);
                    Pattern specialPattern1 = Pattern.compile("[/,+=! \\[#$-]");
                    Matcher specialMatcher1 = specialPattern1.matcher(imageIP);
                    if (specialMatcher.find()) {
                        JOptionPane.showMessageDialog(this,
                            "Character are not allowed for serverIP");
                        importButton.setEnabled(true);
                        return;

                    } else if (specialMatcher1.find()) {
                        //error1= true;
                        JOptionPane.showMessageDialog(this,
                            "Special Character are not allowed for serverIP");
                        importButton.setEnabled(true);
                        return;
                    }
                }
                if (portAddress.isEmpty()) {
                    JOptionPane.showMessageDialog(this,
                        "port number should not be empty");
                    importButton.setEnabled(true);
                    return;
                } else {
                    try {
                        int x = Integer.parseInt(portAddress);

                    } catch (NumberFormatException nFE) {
                        JOptionPane.showMessageDialog(this,
                            "Only integer are allowed for port number");
                        importButton.setEnabled(true);
                        return;
                    }
                }

                if (portAddress.isEmpty()) {
                    JOptionPane.showMessageDialog(this,
                        "port number should not be empty");
                    importButton.setEnabled(true);
                    return;
                } else {
                    try {
                        int x = Integer.parseInt(portAddress);

                    } catch (NumberFormatException nFE) {
                        JOptionPane.showMessageDialog(this,
                            "Only integer are allowed for port number");
                        importButton.setEnabled(true);
                        return;
                    }
                }

                browseIMGPATHButton.setEnabled(false);

            } else if (unc.isSelected()) {
                browseIMGPATHButton.setEnabled(true);
            }

            String imageServerPath = null;
            if (null != imageIP && null != portAddress && !imageIP.isEmpty() || !portAddress.isEmpty()) {
                imageServerPath = "image:" + imageIP + ":" + portAddress + ":";
            } else if (imageIP.isEmpty() || portAddress.isEmpty()) {
                imageServerPath = "unc:";
            }

            final ClientTask task = new TaskImportData( project, volume,
                                                            codingmanual,
                                                            batchspanField.getValue(),
                                                            fileType,
                                                            (String) lfpFilename.getText(),
                                                            name,
                                                            replaceCheckBox.isSelected() ? "Yes" : "No",
                                                            splitsCheckBox.isSelected() ? "Yes" : "No",
                                                            imageServerPath, internalVolume, isUnitizeOptional, date);

            task.enqueue();
        }

        //--------for progress bar --------------
        progressCount = 3;
        errorMessage = null;
        importProgressBar.setValue(progressCount);
        new Thread() {

            public void run() {
                try {

                    for (; progressCount < 100 && (errorMessage == null || errorMessage.trim().length() == 0);) {
                        Thread.sleep(1500);
                        final TaskRequestImportProgressStatus task = new TaskRequestImportProgressStatus();
                        task.setCallback(new Runnable() {

                            public void run() {
                                List progressRecList = (List) task.getResult();
                                progressCount = new Integer(progressRecList.get(0).toString());
                                errorMessage = (progressRecList.get(1) == null || progressRecList.get(1).toString().trim().equals("")) ? null : progressRecList.get(1).toString();
                                if (errorMessage != null && errorMessage.trim().length() != 0) {
                                    progressCount = 0;
                                    importProgressBar.setValue(progressCount);
                                    isImportDone = false;
                                } else {
                                    isImportDone = true;
                                }
                                importProgressBar.setValue(progressCount);
                            }
                        });
                        task.enqueue();
                    }
                    if (isImportDone) {
                        JOptionPane.showMessageDialog(
                            ImportPageWithL1.this,
                            "Import to " + (String) projectCombo.getSelectedItem() + " was successful.",
                            "Confirmation",
                            JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(
                            ImportPageWithL1.this, errorMessage,
                            "Import Error",
                            JOptionPane.ERROR_MESSAGE);
                    }
                    importButton.setEnabled(true);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }.start();
    }//GEN-LAST:event_importButtonActionPerformed


    private void importEntry(String status) {

        if (status.equals("ok")) {
            JOptionPane.showMessageDialog(this,
                    "Import to " + (String) projectCombo.getSelectedItem() + " was successful.",
                    "Confirmation",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, status,
                    "Import Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    //importButton.setEnabled(true);
    }

    private void checkEnableImportButton() {

            volume = (String)volumeCombo.getEditor().getItem();

            project = (String)projectCombo.getEditor().getItem();

          if(l1Checkbox.isSelected()){
            if( project.equals("")
            || volume.equals("")
            || brsFilePathTextField.getText().equals("")
            || imgFilePathTextField .getText().equals("")
            || srcTxtFilePathTextField.getText().equals("")
            || imagePath.getText().equals("")){
             importButton.setEnabled(false);
            }else{
              importButton.setEnabled(true);
            }
	    }
        else{
           if (project.equals("")
            || volume.equals("")
            || lfpFilename.getText().equals("")
            || imagePath.getText().equals("")) {
            importButton.setEnabled(false);
        } else {
            importButton.setEnabled(true);
        }
	    }

        //importButton.setEnabled(true);
    }

     private void dateFieldPropertyChange(java.beans.PropertyChangeEvent evt) {
     }

    /**
     * Check that it's OK to exit the current page.  Subclasses must override this to provide a
     * page-dependent check.
     * @return true if it's OK to exit.  If field cancels save/no-save/cancel dialog,
     *         false is returned.
     */
    protected boolean exitPageCheck() {
        // TBD
        return true;
    }

    /** Get the menu bar for the current page.  Subclasses must override this to provide a
     * page-dependent menu bar.
     */
    protected javax.swing.JMenuBar getPageJMenuBar() {
        return menuBar;
    }

    /**
     * Perform page initialization.  Subclasses must override this to provide any
     * required page-dependent initialization.
     *
     * Create a filtered and unfiltered model for project, volume, batch and batchEnd combos.
     */
    protected void tabSelected() {
        Log.print("ImportPage tabSelected");

//        if (projectModel == null) {
//            projectModel = new SQLManagedComboModel(GET_ALL_PROJECTS);
//            projectModel.register();
//            projectCombo.setModel(projectModel);
//        }
        QueryComboModel combo = new QueryComboModel(GET_ALL_PROJECTS);
        projectCombo.setModel(combo);
    }

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
       try {
          exitForm();
       } catch (Throwable th) {
          Log.quit(th);
       }
    }

    private ActionListener buttonComboListener = new ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent A) {
            Object source = A.getSource();
            if (source == http) {
                 browseIMGPATHButton.setEnabled(true);
                 ipAddress.setEnabled(true);
                 port.setEnabled(true);

            }else if(source == unc){
                 browseIMGPATHButton.setEnabled(true);
                 ipAddress.setText("");
                 port.setText("");
                 ipAddress.setEnabled(false);
                 port.setEnabled(false);
            }
       }
    };

    public DateSelectionField getDateField() {
        return (DateSelectionField) dateField;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
	private beans.LIntegerField batchspanField;
	private beans.LIntegerField l1BatchSpanField;
	private javax.swing.JTextField brsFilePathTextField;
	private javax.swing.JRadioButton doculexButton;
	private javax.swing.JMenuItem exitMenuItem;
	private javax.swing.JMenu fileMenu;
	private javax.swing.JRadioButton brsButton;
	private javax.swing.JRadioButton lfpButton;
	private java.awt.GridBagConstraints gridBagConstraints;
	private java.awt.GridBagConstraints gridBagConstraints1;
	private javax.swing.JLabel imageLabel;
	private javax.swing.JPanel imagePanel;
	private javax.swing.JTextField imagePath;
	private javax.swing.JTextField imgFilePathTextField;
	private javax.swing.JButton importButton;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel jLabel7;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JPanel l1BatchSpanPanel;
	private javax.swing.JPanel l1BrsFileNamePanel;
	private javax.swing.JCheckBox l1Checkbox;
	private javax.swing.JPanel l1ImgFileNamePanel;
	private javax.swing.JPanel l1SrcImgPathPanel;
	private javax.swing.JPanel l1SrcTxtFileNamePanel;
	private javax.swing.JTextField lfpFilename;
	private javax.swing.JLabel lfpLabel;
	private javax.swing.JPanel lfpPanel;
	private javax.swing.JMenuBar menuBar;
	private javax.swing.JRadioButton opticonButton;
	private javax.swing.JPanel parameterPanel;
	private javax.swing.JComboBox projectCombo;
	private javax.swing.JLabel projectLabel;
	private javax.swing.JPanel projectPanel;
	private javax.swing.JCheckBox replaceCheckBox;
	private javax.swing.JLabel spanLabel;
	private javax.swing.JPanel spanPanel;
	private javax.swing.JCheckBox splitsCheckBox;
	private javax.swing.JTextField srcImgPathTextField;
	private javax.swing.JTextField srcTxtFilePathTextField;
	private javax.swing.JRadioButton summationButton;
	private javax.swing.JLabel titleLabel;
	private javax.swing.JComboBox volumeCombo;
	private javax.swing.JLabel volumeLabel;
	private javax.swing.JPanel volumePanel;
	private javax.swing.ButtonGroup xrefTypeButtonGroup;
	private javax.swing.JPanel xrefTypePanel;
	private javax.swing.JLabel codingmanualLabel;
    private javax.swing.JTextField codingmanualTextField;
	private javax.swing.JPanel codingmanualPanel;
	private javax.swing.JButton browseBRSButton;
	private javax.swing.JButton browseIMGButton;
	private javax.swing.JButton browseTXTButton;
	private javax.swing.JButton browseSRCIMGButton;
	private javax.swing.JButton browseIMGPATHButton;
	private javax.swing.JButton browseCROSSREFButton;
	private javax.swing.JButton browseCODMANUALButton;
	private javax.swing.JProgressBar importProgressBar;
	private javax.swing.JRadioButton unc;
	private javax.swing.JRadioButton http;
	private javax.swing.ButtonGroup pathTypeButtonGroup;
	private javax.swing.JPanel pathTypePanel;
	private javax.swing.JPanel httpPathPanel;
	private LTextField ipAddress;
	private LTextField port;


	private javax.swing.JLabel ipAddressLabel;
	private javax.swing.JLabel portLabel;
	private javax.swing.JLabel volumeCompletionDateLabel;
	private javax.swing.JPanel dateField;
	private javax.swing.JCheckBox unitizeOptional;
	private javax.swing.JLabel unitizeLabel;
	private javax.swing.JLabel internalVolumeLabel;
	private javax.swing.JComboBox   internalVolumeCombo;
	private javax.swing.JPanel   internalVolumePanel;
	private javax.swing.JLabel emptyLabel;
	private javax.swing.JPanel volumeCompletionDatePanel =new JPanel();
    // End of variables declaration//GEN-END:variables

}
