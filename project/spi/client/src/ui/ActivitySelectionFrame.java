/* $Header: /home/common/cvsarea/ibase/dia/src/ui/ActivitySelectionFrame.java,v 1.10.6.1 2006/02/17 13:40:06 nancy Exp $ */
/*
 * ActivitySelectionFrame.java
 *
 * Created on December 12, 2003, 9:36 AM
 */
package ui;

import client.ClientTask;
import client.Global;
import client.TaskExecuteQuery;
import client.TaskGoodbye;
import client.TaskIsAssignedForListingQc;
import common.Log;
import common.CommonConstants;
import common.msg.MessageConstants;
import model.MailreceivedManagedModel;

import java.awt.Image;
import java.awt.Toolkit;

import java.sql.ResultSet;

import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.w3c.dom.Element;
import tools.LocalProperties;
import ui.DTYGMod;

/**
 * Show the buttons from which the user may select an action:
 * Coding, Quality Control, Quality Assurance, Unitization, Unitization QC
 *
 * @author  Bill
 */
public final class ActivitySelectionFrame extends JFrame implements MessageConstants {
    
    // This is the login frame, or null.  Used to close login frame.
    private JFrame loginFrame;
    public static final String PROPS_SERVER_IP = LocalProperties.getProperty("server_ip");
    /** Creates new form ActivitySelectionFrame
     *
     * @param loginFrame used to close login frame
     */
    public ActivitySelectionFrame(JFrame loginFrame) {
        super();
        setTitle("Activity Selection Page - Conected To server : "+ PROPS_SERVER_IP);
        
        // set the frame's icon
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Image iconImage;
        iconImage = toolkit.getImage("images/ibase8-32.gif");
        setIconImage(iconImage);
        
        this.loginFrame = loginFrame;        
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        activitySelectionPanel = new javax.swing.JPanel();
        activitySelectionTitle = new javax.swing.JLabel();
        activitySelectionGrid = new javax.swing.JPanel();
        codingButton = new javax.swing.JButton();
        unitizeButton = new javax.swing.JButton();
        codingqcButton = new javax.swing.JButton();
        uqcButton = new javax.swing.JButton();
        qaButton = new javax.swing.JButton();
        itButton = new javax.swing.JButton();
        dtygModButton = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        exitButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        mailButton = new javax.swing.JButton();		
		othersButton = new javax.swing.JButton();	
		taskSummaryButton = new javax.swing.JButton();
		codingManButton = new javax.swing.JButton();
        listingButton = new javax.swing.JButton();
		listingQcButton = new javax.swing.JButton();
		tallyButton = new javax.swing.JButton();
		tallyQCButton = new javax.swing.JButton();
        maskingButton = new javax.swing.JButton(); 
        modifyErrorButton = new javax.swing.JButton();
		qaProofReadingButton = new javax.swing.JButton();
		loginServer = new javax.swing.JLabel();
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        activitySelectionPanel.setLayout(new java.awt.GridBagLayout());

        activitySelectionPanel.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(40, 40, 40, 40)), new javax.swing.border.CompoundBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED), new javax.swing.border.EmptyBorder(new java.awt.Insets(40, 40, 40, 40)))));
        activitySelectionPanel.setMinimumSize(new java.awt.Dimension(800, 600));
        activitySelectionPanel.setPreferredSize(new java.awt.Dimension(800, 600));
        activitySelectionTitle.setFont(new java.awt.Font("Dialog", 1, 24));
        activitySelectionTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        activitySelectionTitle.setText("Select Desired Activity");
        activitySelectionTitle.setAlignmentX(0.5F);
        activitySelectionTitle.setMaximumSize(new java.awt.Dimension(299, 60));
        activitySelectionTitle.setMinimumSize(new java.awt.Dimension(400, 60));
        activitySelectionTitle.setPreferredSize(new java.awt.Dimension(400, 60));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = -119;
        gridBagConstraints.ipady = -17;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        activitySelectionPanel.add(activitySelectionTitle, gridBagConstraints);
         
        
		loginServer.setBackground(new java.awt.Color(204, 204, 204));
		loginServer.setFont(new java.awt.Font("Dialog", 1, 12));
        loginServer.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        loginServer.setText(PROPS_SERVER_IP+"...");      
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;       
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        //activitySelectionPanel.add(loginServer, gridBagConstraints);

        activitySelectionGrid.setLayout(new java.awt.GridLayout(0, 2, 80, 20));

        codingButton.setText("Coding");
        codingButton.setEnabled(Global.theServerConnection.getPermissionCoding());
        codingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codingButtonActionPerformed(evt);
            }
        });

        activitySelectionGrid.add(codingButton);

        unitizeButton.setText("Unitization");
        unitizeButton.setEnabled(Global.theServerConnection.getPermissionUnitize());
        unitizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitizeButtonActionPerformed(evt);
            }
        });

        activitySelectionGrid.add(unitizeButton);

        codingqcButton.setText("Quality Control");
        codingqcButton.setEnabled(Global.theServerConnection.getPermissionCodingqc());
        codingqcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codingqcButtonActionPerformed(evt);
            }
        });

        activitySelectionGrid.add(codingqcButton);

        uqcButton.setText("Unitization QC");
        uqcButton.setEnabled(Global.theServerConnection.getPermissionUqc());
        uqcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uqcButtonActionPerformed(evt);
            }
        });
       
         activitySelectionGrid.add(uqcButton);
        
		maskingButton.setText("Masking");
        maskingButton.setEnabled(Global.theServerConnection.getPermissionCodingqc());
        maskingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maskingButtonActionPerformed(evt);
            }
        });

		      
        activitySelectionGrid.add(maskingButton);

        listingButton.setText("Listing");
		if(Global.theServerConnection.getPermissionListing()){
		listingButton.setEnabled(Global.theServerConnection.getPermissionListing());
		}else{
		  listingButton.setEnabled(Global.theServerConnection.getPermissionTeamLeader());
		}
      
        listingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listingButtonActionPerformed(evt);
            }
        });

        activitySelectionGrid.add(listingButton);

		tallyButton.setText("Tally Admin");
		if(Global.theServerConnection.getPermissionTally()){
		tallyButton.setEnabled(Global.theServerConnection.getPermissionTally());
		}else{
		  tallyButton.setEnabled(Global.theServerConnection.getPermissionTeamLeader());
		}
        //tallyButton.setEnabled(Global.theServerConnection.getPermissionTally());
        tallyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tallyButtonActionPerformed(evt);
            }
        });
       
        activitySelectionGrid.add(tallyButton);

        listingQcButton.setText("Listing QC");
        listingQcButton.setEnabled(Global.theServerConnection.getPermissionUqc());
        listingQcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listingQcButtonActionPerformed(evt);
            }
        });
       
        //activitySelectionGrid.add(listingQcButton);

		tallyQCButton.setText("Tally");
		if(Global.theServerConnection.getPermissionTally() || Global.theServerConnection.getPermissionTeamLeader()){
		 tallyQCButton.setEnabled(true);
		}else{
		  tallyQCButton.setEnabled(false);
		}
        
        tallyQCButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tallyQCButtonActionPerformed(evt);
            }
        });
       
        activitySelectionGrid.add(tallyQCButton);
		
        qaButton.setText("Quality Assurance");
        qaButton.setEnabled(Global.theServerConnection.getPermissionQa());
        qaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qaButtonActionPerformed(evt);
            }
        });
       
        activitySelectionGrid.add(qaButton);

		modifyErrorButton.setText("Modify Errors");
		if(Global.theServerConnection.getPermissionTeamLeader() || Global.theServerConnection.getPermissionCoding() || Global.theServerConnection.getPermissionCodingqc()){
		   modifyErrorButton.setEnabled(true);
		}else{
		   modifyErrorButton.setEnabled(false);
		}       
        modifyErrorButton.addActionListener(new java.awt.event.ActionListener() { 
		public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyErrorButtonActionPerformed(evt);
            }
        });
       
        activitySelectionGrid.add(modifyErrorButton);

		qaProofReadingButton.setText("QA PR");
		qaProofReadingButton.setEnabled(Global.theServerConnection.getPermissionQa());
		qaProofReadingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qaProofReadingButtonActionPerformed(evt);
            }
        });

		activitySelectionGrid.add(qaProofReadingButton);

 		itButton.setText("Investigation Tool");
        itButton.setEnabled(Global.theServerConnection.getPermissionQa());
        itButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itButtonActionPerformed(evt);
            }
        });
        activitySelectionGrid.add(itButton);

		activitySelectionGrid.add(modifyErrorButton);
 		dtygModButton.setText("DTYG Mod");
        dtygModButton.setEnabled(Global.theServerConnection.getPermissionQa());
        dtygModButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dtygModButtonActionPerformed(evt);
            }
        });
        activitySelectionGrid.add(dtygModButton);	

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        activitySelectionPanel.add(activitySelectionGrid, gridBagConstraints);

        buttonPanel.setLayout(new java.awt.GridLayout(1, 0, 60, 0));
                
		othersButton.setText("Others");
        othersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                othersButtonActionPerformed(evt);
            }
        });

		buttonPanel.add(othersButton);
		
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
         
        buttonPanel.add(exitButton);
       
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        activitySelectionPanel.add(buttonPanel, gridBagConstraints);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setPreferredSize(new java.awt.Dimension(0, 56));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        activitySelectionPanel.add(jSeparator1, gridBagConstraints);

        mailButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/checkmail.gif")));
        mailButton.setToolTipText("Mail");
        mailButton.setFocusable(false);
        mailButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        mailButton.setPreferredSize(new java.awt.Dimension(28, 28));
        mailButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        mailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        activitySelectionPanel.add(mailButton, gridBagConstraints);


		codingManButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/document1.gif")));
        codingManButton.setToolTipText("Coding Manual");
        codingManButton.setFocusable(false);
        codingManButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        codingManButton.setPreferredSize(new java.awt.Dimension(28, 28));
        codingManButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        codingManButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codingManButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        activitySelectionPanel.add(codingManButton, gridBagConstraints);
        
		taskSummaryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/notepad_icon.gif")));
        taskSummaryButton.setToolTipText("Task List Summary");
        taskSummaryButton.setFocusable(false);
        taskSummaryButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        taskSummaryButton.setPreferredSize(new java.awt.Dimension(28, 28));
        taskSummaryButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        taskSummaryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskSummaryButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        activitySelectionPanel.add(taskSummaryButton, gridBagConstraints);
		
        getContentPane().add(activitySelectionPanel, java.awt.BorderLayout.NORTH);

        pack();

    }//GEN-END:initComponents

    /**
     * Opens up Mails page.
     *
     * @param evt   Action Event fired by Mail button
     */
    private void mailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailButtonActionPerformed
        try {
            MailreceivedManagedModel.getInstance().showMailDialog();
        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_mailButtonActionPerformed

    /**
     * Opens up Task List Summary page.
     *
     * @param evt   Action Event fired by Task Summary button
     */
    private void taskSummaryButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            setVisible(false);
            ShowTaskListSummary taskListSumm = new ShowTaskListSummary(this);
            taskListSumm.setLocationRelativeTo(null);
            taskListSumm.setVisible(true);
        } catch (Throwable th) {
            Log.quit(th);
        }
    }

    /**
     * Opens up Coding Manual selection page.
     *
     * @param evt   Action Event fired by Coding Manual button
     */
    private void codingManButtonActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            JDialog dialog;
            dialog = new ProjectSelectionDialog(this, "codingManual");
            this.setVisible(true);
            dialog.setVisible(true);
        } catch (Throwable th) {
            Log.quit(th);
        }
    }

    /**
     * Opens up Project Selection page to select Coding batch.
     *
     * @param evt   Action Event fired by Coding button
     */
    private void codingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codingButtonActionPerformed
        createDialog(CommonConstants.PROCESS_CODING);
    }//GEN-LAST:event_codingButtonActionPerformed

    /**
     * Opens up Project Selection page to select QA batch.
     *
     * @param evt   Action Event fired by QA button
     */
    private void qaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qaButtonActionPerformed
        createDialog(CommonConstants.PROCESS_QA);
    }//GEN-LAST:event_qaButtonActionPerformed

    /**
     * Opens up Project Selection page to select QA batch.
     *
     * @param evt   Action Event fired by QA button
     */
    private void itButtonActionPerformed(java.awt.event.ActionEvent evt) {
        JFrame frame = new InvestigationToolForm(this);
        this.setVisible(false);
        frame.setVisible(true);
    }

    /**
     * Opens up DTYG MOD page.
     *
     * @param evt   Action Event fired by DTYG MOD button
     */
    private void dtygModButtonActionPerformed(java.awt.event.ActionEvent evt) {
        JFrame frame = new DTYGMod(this);
        this.setVisible(false);
        frame.setVisible(true);
    }    
    
    /**
     * Opens up Other Activity page.
     *
     * @param evt   Action Event fired by Other Activity button
     */
    private void createOthersDialog() {
        JFrame dialog = new OthersActivitySelectionDialog(this);
        dialog.setLocationRelativeTo(null);
        this.setVisible(false);
        dialog.setVisible(true);

    }
    
    /**
     * Opens up Project Selection page to select Unitize QC batch.
     *
     * @param evt   Action Event fired by Unitize QC button
     */
    private void uqcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uqcButtonActionPerformed
        createDialog(CommonConstants.PROCESS_UNITIZE_QC);
    }//GEN-LAST:event_uqcButtonActionPerformed
    
    /**
     * Opens up Project Selection page to select coding QC batch.
     *
     * @param evt   Action Event fired by Coding QC button
     */
    private void codingqcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codingqcButtonActionPerformed
        createDialog(CommonConstants.PROCESS_CODING_QC);
    }//GEN-LAST:event_codingqcButtonActionPerformed

    /**
     * Opens up Project Selection page to select Unitization batch.
     *
     * @param evt   Action Event fired by Unitization button
     */
    private void unitizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unitizeButtonActionPerformed
        createDialog(CommonConstants.PROCESS_UNITIZE);
    }//GEN-LAST:event_unitizeButtonActionPerformed
    
    /**
     * Opens up Project Selection page to select masking batch.
     *
     * @param evt   Action Event fired by masking button
     */
     private void maskingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maskingButtonActionPerformed
         createDialog(CommonConstants.PROCESS_MASKING);
     }//GEN-LAST:event_maskingButtonActionPerformed

     /**
     * Opens up Listing Page.
     *
     * @param evt   Action Event fired by Listing button
     */
    private void listingButtonActionPerformed(java.awt.event.ActionEvent evt) {
        createDialog(CommonConstants.PROCESS_LISTING);
    }

    /**
     * Opens up Listing QC Page.
     *
     * @param evt   Action Event fired by Listing QC button
     */
    private void listingQcButtonActionPerformed(java.awt.event.ActionEvent evt) {
        createListingQcDialog(CommonConstants.PROCESS_LISTING_QC);
    }

    /**
     * Opens up Tally Page.
     *
     * @param evt   Action Event fired by Tally button
     */
    private void tallyButtonActionPerformed(java.awt.event.ActionEvent evt) {
        createDialog(CommonConstants.PROCESS_TALLY);
    }

    /**
     * Opens up Tally QC Page.
     *
     * @param evt   Action Event fired by Tally QC button
     */
    private void tallyQCButtonActionPerformed(java.awt.event.ActionEvent evt) {
        createTallyQcDialog(CommonConstants.PROCESS_TALLY_QC);
    }

    /**
     * Opens up Project Selection page to select a batch to fix errors.
     *
     * @param evt   Action Event fired by Modify Errors button
     */
    private void modifyErrorButtonActionPerformed(java.awt.event.ActionEvent evt) {
        createDialog(CommonConstants.PROCESS_MODIFY_ERRORS);
    }

    /**
     * Closes Login window on opening this Activity Selection Page
     *
     * @param evt   The Window Event
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Close the login frame, if any.  (This is done the first time the window is made visible.)
        if (loginFrame != null) {
            loginFrame.dispose();
            loginFrame = null;
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * Closes the Activity Selection page
     *
     * @param evt   The Action Event fired by the Exit Button.
     */
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // Add your handling code here:
        exitForm(null);
    }//GEN-LAST:event_exitButtonActionPerformed
    
    /**
     * Opens up the Other Activity dialog screen.
     *
     * @param evt The Action Event fired by Others button
     */
    private void othersButtonActionPerformed(java.awt.event.ActionEvent evt) {
        createOthersDialog();
    }

    /**
     * Opens up the QA Proof Reading page to pick a group to do Proof reading
     *
     * @param evt   The Action Event fired by QA Proof Reading button
     */

   private void qaProofReadingButtonActionPerformed(java.awt.event.ActionEvent evt) {    
       final ActivitySelectionFrame parent = this;

        try {
            final TaskExecuteQuery task = new TaskExecuteQuery("qapr.getProjectNames");            
            task.setCallback((new Runnable() {
                public void run() {
                    ResultSet results = (ResultSet) task.getResult();
                    QAGroupAssignWindow qaGroupAssignWindow = new QAGroupAssignWindow(results,parent);
                    ActivitySelectionFrame.this.setVisible(false);
                    qaGroupAssignWindow.setVisible(true);

                }
            }));
            task.enqueue(this);

        } catch (Throwable th) {
            Log.quit(th);
        }
    }
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        try {
            // close the server and image server connections gently
            // TBD: really should be in a client task
            try {                
                final ClientTask task;
                task = new TaskGoodbye();
                task.enqueue(this);

            } catch (Exception ignored) { }
            
            System.exit(0);
            
        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_exitForm

    // Create and start a viewer dialog.
    // The whichStatus parameter is a value of the enum type for batch.status
    private void createDialog(String whichStatus) {
        try {
            JDialog dialog;
            if (CommonConstants.PROCESS_QA.equals(whichStatus)) {
                Log.print("createDialog for QA");
                dialog = new QAVolumeSelectionDialog(this);
                
            } else if(CommonConstants.PROCESS_LISTING.equals(whichStatus)){
                dialog = new ProjectSelectionDialogForListing(this, whichStatus);
                
            }  else if(CommonConstants.PROCESS_TALLY.equals(whichStatus)){
                dialog = new ProjectSelectionDialogForTally(this, whichStatus);
                
            }          
            else {
                Log.print("createDialog: "+whichStatus);
                dialog = new ProjectSelectionDialog(this, whichStatus);
            }
            this.setVisible(false);
            dialog.setVisible(true);
        } catch (Throwable th) {
            Log.quit(th);
        }
    }
    

    /**
     * Opens up the Listing QC dialog window.
     *
     * @param status    Listing QC status
     */
    private void createListingQcDialog(String status) {
        
        final String userName = Global.theServerConnection.getUserName();
        final ClientTask task = new TaskIsAssignedForListingQc(userName,status);
        task.setCallback(new Runnable() {
                public void run() {
                    Element reply = (Element) task.getResult();
                    String action = reply.getNodeName();
                     if (T_REPLY_IS_ASSIGNED_LISTING_QC.equals(action)) {
                         int userId = Integer.parseInt(reply.getAttribute(A_USERS_ID));
                         JDialog dialog = new ProjectSelectionDialogForListingQc(ActivitySelectionFrame.this,userId,"ListingQC");
                         ActivitySelectionFrame.this.setVisible(false);
                         dialog.setVisible(true);
                        
                     }
                     else if (T_FAIL.equals(action)) {
                        // TBD: How do we tell them of problem opening batch
                        // This gives them a message box, doesn't open viewer
                        JOptionPane.showMessageDialog(ActivitySelectionFrame.this,
                                "Can't open Field selection Dialog",
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                    }                     
                }

         });
          task.enqueue(this);            
    }

    
    /**
     * Opens up the Tally Group page to pick up the group to Tally.
     *
     * @param status    Tally QC Status
     */
    private void createTallyQcDialog(String status) {
        final String userName = Global.theServerConnection.getUserName();
        final ClientTask task = new TaskExecuteQuery("user.getUserId", userName);
        task.setCallback(new Runnable() {

            public void run() {
                ResultSet results = (ResultSet) task.getResult();
                int userId = 0;
                try {
                    if (results.next()) {
                        userId = results.getInt(1);                        
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

                JDialog dialog = new ProjectSelectionDialogForTallyQc(ActivitySelectionFrame.this, userId, "TallyQC");
                ActivitySelectionFrame.this.setVisible(false);
                dialog.setVisible(true);

            }
        });
        task.enqueue(this);
    }
    
    
    /**
     * Make this frame visible.  Overrides JFrame.setVisible to
     * record the current visible frame for use in dialogs.
     *
     * @param flag true or false to set visible or not
     */
    public void setVisible(boolean flag) {
        if (flag) {
            Global.mainWindow = this;
        } else if (Global.mainWindow == this) {
            Global.mainWindow = null;
        }
        super.setVisible(flag);
    }

  
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel activitySelectionGrid;
    private javax.swing.JPanel activitySelectionPanel;
    private javax.swing.JLabel activitySelectionTitle;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton codingButton;
    private javax.swing.JButton codingqcButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton mailButton;
    private javax.swing.JButton qaButton;
    private javax.swing.JButton itButton;
    private javax.swing.JButton dtygModButton;
    private javax.swing.JButton modifyErrorButton;
    private javax.swing.JButton unitizeButton;
    private javax.swing.JButton uqcButton;
    private javax.swing.JButton codingManButton;
    private javax.swing.JButton listingButton;
    private javax.swing.JButton listingQcButton;
    private javax.swing.JButton tallyButton;
    private javax.swing.JButton tallyQCButton;
    private javax.swing.JButton maskingButton;	
    private javax.swing.JButton othersButton;
    private javax.swing.JButton taskSummaryButton;
	private javax.swing.JButton qaProofReadingButton;
	private javax.swing.JLabel loginServer;

    // End of variables declaration//GEN-END:variables
    
}
