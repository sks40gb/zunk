/* $Header: /home/common/cvsarea/ibase/dia/src/ui/TeamAdminPage.java,v 1.26.6.1 2006/03/29 14:27:55 nancy Exp $ */
/*
 * OldUserAdminPage.java
 *
 * Created on December 14, 2003, 6:17 AM
 */

package ui;

import beans.AddEditTeams;
import beans.AddEditUsers;
import client.ClientTask;
import client.TaskSendTeams;
import common.Log;
import model.ManagedNode;
import model.ManagedNodeModel;
import model.ManagedTableGroup;
import model.ManagedTableModel;
import model.ManagedTableSorter;
import model.SQLManagedTableModel;
import model.TableRow;
import ui.AdminFrame;


import javax.swing.JOptionPane;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
/**
 * On the AdminFrame, the Teams page shows all teams defined in DIA in
 * tree format.  The team leader's name is shown in parens beside the
 * team name.  The user can edit the team name or change the team leader.
 * Also, users' teams may be changed or removed.  New teams may be Added from
 * this screen.
 *
 * @author  Bill
 * @see beans.AddEditTeams
 * @see beans.AddEditUsers
 */
public final class TeamAdminPage extends ui.AbstractPage {

    /** data model for teamsTree */
    DefaultTreeModel teamsModel;

    /**
     * Creates new form TeamAdminPage.
     * @param frame the frame in which to place this screen
     */
    public TeamAdminPage(AdminFrame frame) {
        super(frame);
        initComponents();
        teamsModel = new DefaultTreeModel(null);
        teamsModel.setAsksAllowsChildren(true);
        teamsTree.setModel(teamsModel);
        //teamsModel.setRoot(new RootNode(teamsTree));
        
        TreeSelectionModel selectionModel = teamsTree.getSelectionModel();
        selectionModel.setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        selectionModel.addTreeSelectionListener(new TreeSelectionListener() {
                public void valueChanged(TreeSelectionEvent evt) {
                    treeSelectionValueChanged(evt);
                }
           });
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        teamPane = new javax.swing.JPanel();
        teamsScrollPane = new javax.swing.JScrollPane();
        teamsTree = new javax.swing.JTree();
        bottomPane = new javax.swing.JPanel();
        buttonPanel = new javax.swing.JPanel();
        editButton = new javax.swing.JButton();
        addTeamButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");
        exitMenuItem.setMnemonic('E');
        exitMenuItem.setText("Exit");
        exitMenuItem.setToolTipText("Exit program.");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);
        menuBar.add(fileMenu);

        setLayout(new java.awt.BorderLayout());

        teamPane.setLayout(new java.awt.BorderLayout());

        teamPane.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        teamsTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                teamsTreeMouseClicked(evt);
            }
        });

        teamsTree.addTreeWillExpandListener(new javax.swing.event.TreeWillExpandListener() {
            public void treeWillExpand(javax.swing.event.TreeExpansionEvent evt)
            throws javax.swing.tree.ExpandVetoException {
                teamsTreeTreeWillExpand(evt);
            }
            public void treeWillCollapse(javax.swing.event.TreeExpansionEvent evt)
            throws javax.swing.tree.ExpandVetoException {
            }
        });

        teamsScrollPane.setViewportView(teamsTree);

        teamPane.add(teamsScrollPane, java.awt.BorderLayout.CENTER);

        add(teamPane, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new java.awt.GridLayout(1, 0, 20, 0));

        editButton.setText("  Edit  ");
        editButton.setEnabled(false);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(editButton);
		addTeamButton.setEnabled(true);
        addTeamButton.setText("Add Team");
        addTeamButton.setSelected(true);
        addTeamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTeamButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(addTeamButton);

        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(deleteButton);

        bottomPane.add(buttonPanel);

        add(bottomPane, java.awt.BorderLayout.SOUTH);

    }//GEN-END:initComponents

    private void addTeamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTeamButtonActionPerformed
        try {
            setButtonsEnabled(false);
            TreePath path = teamsTree.getSelectionPath();
            (new AddEditTeams(this, 0)).setVisible(true);
            //addTeamButton.setEnabled(true);
        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_addTeamButtonActionPerformed

    private void teamsTreeTreeWillExpand(javax.swing.event.TreeExpansionEvent evt) throws javax.swing.tree.ExpandVetoException {//GEN-FIRST:event_teamsTreeTreeWillExpand
        ManagedNode.checkRegisterOnTreeExpansion(evt);
    }//GEN-LAST:event_teamsTreeTreeWillExpand
    

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        try {
            exitForm();
        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_exitMenuItemActionPerformed
    

    private void teamsTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_teamsTreeMouseClicked
        // TBD: Would like to select on double click
        // Don't know how to avoid having the team node collapse when doing it
        //try {
        //    if (evt.getClickCount() > 1) {
        //        // double-click on a row
        //        Object nodeObject = teamsTree.getLastSelectedPathComponent();
        //        if (nodeObject instanceof TeamsNode
        //        || nodeObject instanceof UsersNode) {
        //            editButton.doClick();
        //        }
        //    }
        //} catch (Throwable th) {
        //    Log.quit(th);
        //}
    }//GEN-LAST:event_teamsTreeMouseClicked

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        try {
            TreePath path = teamsTree.getLeadSelectionPath();
            int i = teamsTree.getMinSelectionRow();
            if (i > -1) {
                String type = "";
                ManagedNode node = (ManagedNode)
                           teamsTree.getLastSelectedPathComponent();

                if (node != null){
                    if (node.getAllowsChildren()) {
                        type = "Team";
                    } else {
                        type = "User";
                    }
                }

                Log.print("TeamAdminPage: delete, showing teamsTree");
                Object[] options = {"Yes"
                                  , "No"};
                int ok = JOptionPane.showOptionDialog(this,
                        "Do you want to delete this '" + type + ":  "
                        + node.getUserObject() + "'?\n"
                        + "This will remove this '"  + type + ":  " 
                        + node.getUserObject() + "', wherever it appears",
                        "Delete Verification", JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE, 
                        null, options, options[1]);
                if (ok == JOptionPane.YES_OPTION) {
                    if (type.equals("User")) {
                        UserAdminPage.deleteUser(this, node.getRowId()
                                                 , node.toString());
                    } else {
                        final ClientTask task
                                = new TaskSendTeams(node.getRowId(), 0, "");
                        task.enqueue(this);
                    }
                    // TBD save();
                }
            }
        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        try {
            TreePath path = teamsTree.getSelectionPath();
            if (path != null) {
                ManagedNode node = (ManagedNode) path.getLastPathComponent();
                int rowId = node.getRowId();
                if (node instanceof TeamsNode) {
                    setButtonsEnabled(false);
                    TeamsNode theTeamsNode = (TeamsNode) node;
                    (new AddEditTeams(this, rowId)).setVisible(true);
                } else if (node instanceof UsersNode) {
                    setButtonsEnabled(false);
                    UsersNode theUsersNode = (UsersNode) node;
                    (new AddEditUsers(this, rowId)).setVisible(true);
                }
            }
        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_editButtonActionPerformed
    
    public void setButtonsEnabled(boolean status){
        addTeamButton.setEnabled(status);
        editButton.setEnabled(status);
        deleteButton.setEnabled(status);
    }
    
    private void treeSelectionValueChanged(TreeSelectionEvent evt) {
        try {
            TreePath path = evt.getNewLeadSelectionPath();
            Object node = (path == null ? null : path.getLastPathComponent());
            if (node instanceof TeamsNode
            || node instanceof UsersNode) {
                editButton.setEnabled(true);
                deleteButton.setEnabled(true);
            } else {
                editButton.setEnabled(false);
                deleteButton.setEnabled(false);
                if (path != null) {
                    teamsTree.getSelectionModel().clearSelection();

                }
            }
        } catch (Throwable th) {
            Log.quit(th);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new TeamAdminPage(AdminFrame.getInstance(null)).setVisible(true);
    }


    /**
     * Check that it's OK to exit the current page.  Subclasses must override this to provide a
     * page-dependent check.
     * @return true if it's OK to exit.  If user cancels save/no-save/cancel dialog,
     *         false is returned.
     */
    protected boolean exitPageCheck() {
        DefaultTreeModel teamsTreeModel = (DefaultTreeModel) teamsTree.getModel();
        Log.print("teamsTreeModel: asksAllowsChildren="+teamsTreeModel.asksAllowsChildren());
        return true;
    }

    /** Get the menu bar for the current page.  Subclasses must override this to provide a
     * page-dependent menu bar.
     */
    protected javax.swing.JMenuBar getPageJMenuBar() {
        return menuBar;
    }
    
    /**
     * Perform page initialization.  Subclasses must override this to provide any
     * required page-dependent initialization.
     */
    protected void tabSelected() {
        Log.print("TeamAdminPage tabSelected");
        (new RootNode()).setAsModelRoot(teamsModel);
        //ManagedNode root = (ManagedNode) teamsModel.getRoot();
        //root.register();
    }

    ManagedNode currentNode;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton editButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton deleteButton;
    private javax.swing.JPanel teamPane;
    private javax.swing.JButton addTeamButton;
    private javax.swing.JTree teamsTree;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JScrollPane teamsScrollPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel bottomPane;
    private javax.swing.JPanel buttonPanel;
    // End of variables declaration//GEN-END:variables
    
    ////////// TREE STRUCTURE DECLARATION
    // RootNode
    //   TeamsNode*
    //     UsersNode*
    //   UnassignedUsersNode?
    //     UsersNode*


    protected class RootNode extends ManagedNode {

        RootNode() {
            super("SPiCA Teams");

            ////////// SUBTREE FOR EACH TEAM
            // select T.teams_id,T.team_name, U.user_name
            //   from teams T left join users U on users_id = U.users_id
            ManagedTableModel childModel 
                    = new ManagedTableSorter(0,
                        SQLManagedTableModel.makeInstance ("TeamAdminPage.teams"));

            add(new ManagedNodeModel(childModel) {
                    public ManagedNode makeChildNode(Object rowData) {
                        TeamsNode result = new TeamsNode(rowData);
                        return result;
                    }
                });

            //////// GROUP NODE FOR UNASSIGNED USERS
            final ManagedTableModel grandchildModel 
                    = new ManagedTableSorter(0,
                        SQLManagedTableModel.makeInstance(
                                "TeamAdminPage.unassignedUsers"));

            ManagedTableModel unassignedGroupModel 
                    = new ManagedTableGroup("<unassigned>", grandchildModel);

            add(new ManagedNodeModel(unassignedGroupModel) {
                    public ManagedNode makeChildNode(Object rowData) {
                        return new UnassignedUsersNode(rowData, grandchildModel);
                    }
                });
        }
    }

    protected class TeamsNode extends ManagedNode {

        TeamsNode(Object userObject) {
            super(userObject);

            ManagedTableModel childModel 
                    = new ManagedTableSorter(0,
                        SQLManagedTableModel.makeInstance ("TeamAdminPage.users", getRowId()));

            add(new ManagedNodeModel(childModel) {
                        public ManagedNode makeChildNode(Object rowData) {
                            return new UsersNode(rowData);
                        }
                });
        }

        /**
         * Overridden to append the team leader name, if any, to the team name
         * Note.  toString() is used to print the tree legend.
         */
        public String toString() {
            TableRow rowData = (TableRow) getUserObject();
            String leaderName = (String) rowData.getValue(1);
            if (leaderName == null || leaderName.length() == 0) {
                return super.toString();
            } else {
                return super.toString()+" ("+leaderName+")";
            }
        }
    }

    protected class UnassignedUsersNode extends ManagedNode {

        //ManagedNodeModel nodeModel = null;

        UnassignedUsersNode(Object rowData, final ManagedTableModel childModel) {
            super(rowData);

            ManagedNodeModel nodeModel = new ManagedNodeModel(childModel) {
                    public ManagedNode makeChildNode(Object rowData) {
                        return new UsersNode(rowData);
                    }
                };
            add(nodeModel);
        }

        //public ManagedNodeModel getNodeModel() {
        //    return nodeModel;
        //}
    }
    
    protected class UsersNode extends ManagedNode {
        UsersNode (Object userObject) {
            super(userObject, /* allowsChildren => */ false);
        }
    }
}
