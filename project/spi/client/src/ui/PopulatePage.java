/* $Header: /home/common/cvsarea/ibase/dia/src/ui/PopulatePage.java,v 1.5.6.4 2006/03/28 17:02:05 nancy Exp $ */
/*
 * PopulatePage.java
 *
 * Created on December 13, 2004, 6:06 AM
 */

package ui;

import client.ClientTask;
import client.TaskPopulateData;
import common.Log;
import common.DelimiterData;
import common.PopulateData;
import model.SQLManagedComboModel;
import model.QueryComboModel;

import javax.swing.JOptionPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

/**
 * The Import Data screen on the AdminFrame allows users to import coded data to
 * a given project/volume.  The fields must be in the order of the fields
 * listed on the ProjectPage.  The delimiters selected at the bottom of the
 * screen are used to parse the input.  The Data Filename is read from the server.
 * @author  Nancy McCall
 * @see client.TaskPopulateData
 * @see common.DelimiterData
 * @see DelimiterPanel
 */
public class PopulatePage extends AbstractPage {
    private final String GET_ALL_PROJECTS = "ReportPage.projectCombo";
    private final String GET_ALL_VOLUMES = "Import Export.get all volumes";
    
    private SQLManagedComboModel projectModel = null;
    private QueryComboModel volumeModel = null;

    private int projectId = 0;
    private int volumeId = 0;
    private String project = "";
    private String volume = "";

    private DelimiterPanel delimiters = null;

    PopulateData data;

    /**
     * Creates new form PopulatePage.
     * @param frame the frame in which to place this screen
     */
    public PopulatePage(AdminFrame frame) {
        super(frame);
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        parameterPanel = new javax.swing.JPanel();
        projectLabel = new javax.swing.JLabel();
        projectPanel = new javax.swing.JPanel();
        projectCombo = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        replaceCheckBox = new javax.swing.JCheckBox();
        volumeLabel = new javax.swing.JLabel();
        volumePanel = new javax.swing.JPanel();
        volumeCombo = new javax.swing.JComboBox();
        dataLabel = new javax.swing.JLabel();
        dataPanel = new javax.swing.JPanel();        
        dataFilename = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane(
                javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER, 
                javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        delimiterPanel = new javax.swing.JPanel();
        populateButton = new javax.swing.JButton();

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");
        exitMenuItem.setMnemonic('E');
        exitMenuItem.setText("Exit");
        exitMenuItem.setToolTipText("Exit program.");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        titleLabel.setFont(new java.awt.Font("Dialog", 1, 24));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Import Delimited Data");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 20, 0);
        jPanel1.add(titleLabel, gridBagConstraints);

        parameterPanel.setLayout(new java.awt.GridBagLayout());

        projectLabel.setFont(new java.awt.Font("Dialog", 0, 11));
        projectLabel.setText("Project: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(projectLabel, gridBagConstraints);

        projectCombo.setEditable(true);
        projectCombo.setPreferredSize(new java.awt.Dimension(175, 25));
        projectCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectComboActionPerformed(evt);
            }
        });

        projectPanel.add(projectCombo);

        jSeparator1.setPreferredSize(new java.awt.Dimension(30, 0));
        projectPanel.add(jSeparator1);

        replaceCheckBox.setFont(new java.awt.Font("Dialog", 0, 11));
        replaceCheckBox.setText("Replace Existing Data");
        projectPanel.add(replaceCheckBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(projectPanel, gridBagConstraints);

        volumeLabel.setFont(new java.awt.Font("Dialog", 0, 11));
        volumeLabel.setText("Volume: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(volumeLabel, gridBagConstraints);

        volumeCombo.setEditable(true);
        volumeCombo.setPreferredSize(new java.awt.Dimension(175, 25));
        volumeCombo.setEnabled(false);
        volumeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volumeComboActionPerformed(evt);
            }
        });
        volumeCombo.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                volumeComboPopupMenuWillBecomeVisible(evt);
            }
        });

        volumePanel.add(volumeCombo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(volumePanel, gridBagConstraints);

        dataLabel.setFont(new java.awt.Font("Dialog", 0, 11));
        dataLabel.setText("Data Filename: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(dataLabel, gridBagConstraints);
        
        dataFilename.setColumns(50);
        dataFilename.setDocument(new PlainDocument() {
            public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {
                if(! str.equals("\n")) { // changed here
                	super.insertString(offs, str, a);
                } // changed here
                checkEnablePopulateButton();
            }
            public void remove(int offs, int len)
            throws BadLocationException
            {
                super.remove(offs,len);
                checkEnablePopulateButton();
            }
        });        
        dataFilename.setRows(1);
        dataFilename.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        dataFilename.setMaximumSize(new java.awt.Dimension(2147483647, 20));
        dataFilename.setAutoscrolls(false);
        jScrollPane1.setViewportView(dataFilename); // changed here
        dataPanel.add(jScrollPane1); // changed here

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parameterPanel.add(dataPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel1.add(parameterPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(delimiterPanel, gridBagConstraints);

        populateButton.setFont(new java.awt.Font("Dialog", 1, 14));
        populateButton.setText("Import Data");
        populateButton.setToolTipText("");
        populateButton.setFocusable(false);
        populateButton.setEnabled(false);
        populateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                populateButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 20, 0);
        jPanel1.add(populateButton, gridBagConstraints);

        add(jPanel1, java.awt.BorderLayout.CENTER);

    }                        

    private void populateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_populateButtonActionPerformed
       System.out.println("inside populateButtonActionPerformed------------->");
        populateButton.setEnabled(false);
       
        if (volumeId == 0) {
            data.volume_name = (String)volumeCombo.getEditor().getItem();
        } else {
            data.volume_name = (String)volumeCombo.getSelectedItem();
        }
        if (projectId == 0) {
            data.project_name = (String)projectCombo.getEditor().getItem();
        } else {
            data.project_name = (String)projectCombo.getSelectedItem();
        }
        DelimiterData delimiterData = delimiters.getDelimiterData(false);      
        
        data.delimiter_set_name = delimiterData.delimiter_set_name;
        data.field_delimiter = delimiterData.field_delimiter;
        data.text_qualifier = delimiterData.text_qualifier;
        data.value_separator = delimiterData.value_separator;
        data.date_format = delimiterData.date_format;
        data.name_mask1 = delimiterData.name_mask1;
        data.name_mask2 = delimiterData.name_mask2;
        data.name_mask3 = delimiterData.name_mask3;
        data.name_mask4 = delimiterData.name_mask4;
        data.missing_date = delimiterData.missing_date;
        data.missing_year = delimiterData.missing_year;
        data.missing_month = delimiterData.missing_month;
        data.missing_day = delimiterData.missing_day;
        data.missing_date_character = delimiterData.missing_date_character;
        data.brs_format = delimiterData.brs_format;
        data.uppercase_names = "No";
        data.uppercase = delimiterData.uppercase;
        //data.force = "No";
        data.unitizeOnly = delimiterData.unitizeOnly;
        data.nullAttachments = delimiterData.nullAttachments;
        data.dataFilename = (String)dataFilename.getText();
        data.force = replaceCheckBox.isSelected() ? "Yes" : "No";
        data.field_names = "";
        data.standard_field_validations = "";
        data.user_name = "";
        final ClientTask task = new TaskPopulateData(data);
        task.setCallback(new Runnable() {
                public void run() {
                    populateEntry((String)task.getResult());
                }
            });
        task.enqueue();
    }//GEN-LAST:event_populateButtonActionPerformed

    private void populateEntry(String status) {
        Log.print("(PopulatePage) back from populate with " + status);
        if (status.equals("ok")) {
            JOptionPane.showMessageDialog(
                this,
                "Populate of " + (String)projectCombo.getSelectedItem() + " was successful.",
                "Confirmation",
                JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(
                this, status,
                "Confirmation",
                JOptionPane.INFORMATION_MESSAGE);
        }
        populateButton.setEnabled(true);
    }

    private void volumeComboPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_volumeComboPopupMenuWillBecomeVisible
        //Log.print("(PopulatePage.volumeComboPopupMenuWillBecomeVisisble) projectId " + projectId);
        volumeModel = new QueryComboModel(GET_ALL_VOLUMES
                                           , /* required? */ false
                                           , new String[] { Integer.toString(projectId) } 
                                           , "");
        volumeCombo.setModel(volumeModel);
    }//GEN-LAST:event_volumeComboPopupMenuWillBecomeVisible

    private void volumeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volumeComboActionPerformed
        int sel = volumeCombo.getSelectedIndex();
        if (sel > -1) {
            data.volume_name = (String)volumeModel.getElementAt(sel);
            volumeId = volumeModel.getIdAt(sel);
            replaceCheckBox.setEnabled(true);
        } else {
            data.volume_name = "";
            volumeId = 0;
            replaceCheckBox.setEnabled(false);
        }
        checkEnablePopulateButton();
    }//GEN-LAST:event_volumeComboActionPerformed

    private void projectComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectComboActionPerformed
        //Log.print("(PopulatePage.projectComboActionPerformed) " + evt.getActionCommand());
        String projectName = "";
        if(data != null) {
            projectName = data.project_name;
        }
        int sel = projectCombo.getSelectedIndex();
        if (sel > -1) {
            data.project_name = (String)projectModel.getElementAt(sel);
            projectId = ((SQLManagedComboModel)projectCombo.getModel()).getIdAt(sel);
            if (volumeModel != null) {
                if(! projectName.equals(data.project_name)) { // changed here
                    volumeCombo.setSelectedIndex(-1);
                } // changed here
            }
            volumeCombo.setEnabled(true);
        } else {
            data.project_name = "";
            projectId = 0;
            volumeCombo.setEnabled(true);
        }
        checkEnablePopulateButton();
    }//GEN-LAST:event_projectComboActionPerformed

    private void checkEnablePopulateButton() {
        System.out.println("inside checkEnablePopulateButton---------->");
        if (volumeId == 0) {
            data.volume_name = (String)volumeCombo.getEditor().getItem();
        }
        if (projectId == 0) {
            data.project_name = (String)projectCombo.getEditor().getItem();
        }
        if (data.project_name.equals("")
            || data.volume_name.equals("")
            || dataFilename.getText().trim().equals("")) {
            populateButton.setEnabled(false);
        } else {
            populateButton.setEnabled(true);
        }
    }

    /**
     * Perform page initialization.  Subclasses must override this to provide any
     * required page-dependent initialization.
     * 
     * If this is the first time into this page, create a new instance of
     * <code>DelimiterPanel</code> and keep it for future entries.
     */
    protected void tabSelected() {
        Log.print("PopulatePage tabSelected");

        // project model
        projectModel = new SQLManagedComboModel(GET_ALL_PROJECTS);
        projectModel.register();
        projectCombo.setModel(projectModel);        
        if(data != null) {
            ((SQLManagedComboModel)
                    projectCombo.getModel()).setSelectedItem(data.project_name);
            ((model.ManagedTableSorter)((SQLManagedComboModel)
                    projectCombo.getModel()).getModel()).fireTableDataChanged();
        }
        
        if (delimiters == null) {
            delimiters = new DelimiterPanel(null);
            delimiterPanel.add(delimiters, java.awt.BorderLayout.CENTER);

            delimiters.loadDelimiterNames(DelimiterPanel.DEFAULT);
            
            data = new PopulateData();
        }
    }    
    
    /**
     * Check that it's OK to exit the current page.  Subclasses must override this to provide a
     * page-dependent check.
     * @return true if it's OK to exit.  If field cancels save/no-save/cancel dialog,
     *         false is returned.
     */
    protected boolean exitPageCheck() {
        // TBD
        return true;
    }    
    
    /**
     * Get the menu bar for the current page.  Subclasses must override this to provide a
     * page-dependent menu bar.
     */
    protected javax.swing.JMenuBar getPageJMenuBar() {
        return menuBar;
    }
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                             
       try {
          exitForm();
       } catch (Throwable th) {
          Log.quit(th);
       }
    } 
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea dataFilename;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel dataLabel;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JPanel delimiterPanel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel parameterPanel;
    private javax.swing.JButton populateButton;
    private javax.swing.JComboBox projectCombo;
    private javax.swing.JLabel projectLabel;
    private javax.swing.JPanel projectPanel;
    private javax.swing.JCheckBox replaceCheckBox;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JComboBox volumeCombo;
    private javax.swing.JLabel volumeLabel;
    private javax.swing.JPanel volumePanel;
    // End of variables declaration//GEN-END:variables
    
}
