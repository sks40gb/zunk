/*
 * OthersActivitySelectionDialog.java
 *
 * Created on March 5, 2008, 8:34 PM
 */

package ui;

import client.ClientTask;
import client.Global;
import client.ServerConnection;
import client.TaskExecuteQuery;
import client.TaskStartOtherActivity;
import common.msg.MessageConstants;
import java.sql.ResultSet;
import java.util.Calendar;

import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.w3c.dom.Element;

/**
 * Class to Dispaly Other Activity List(break)
 * @author  anurag
 */
public class OthersActivitySelectionDialog extends javax.swing.JFrame implements MessageConstants {
   private JFrame parent;
   private int userId = 0;
   private static int event_break_id = 0;
   private String status;
   private String notes;
   
   private final static String ACTIVITY_STATUS_OTHERS = "Others";
   private final static String ALERT_NOTES_LENGTH = "Notes can have only 255 characters. Please trim the notes."; 
   private final static String ALERT_NOTES_IF_EMPTY = "Notes is mandatory for Others.";
   private final static String GET_USERID_QUERY  = "select users_id from users";
   
   /** Creates new form OthersActivitySelectionDialog */
   public OthersActivitySelectionDialog(JFrame parent) {
      this.parent = parent;
      initComponents();
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jLabel1 = new javax.swing.JLabel();
      jComboBox1 = new javax.swing.JComboBox();
      jLabel2 = new javax.swing.JLabel();
      jScrollPane1 = new javax.swing.JScrollPane();
      jTextArea1 = new javax.swing.JTextArea();
      jButton1 = new javax.swing.JButton();
      jButton2 = new javax.swing.JButton();
      jLabel3 = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      jLabel5 = new javax.swing.JLabel();

        addWindowListener(new java.awt.event.WindowAdapter() {
           public void windowClosing(java.awt.event.WindowEvent evt) {
                cancelButtonActionPerformed();
            }
        });

      jLabel1.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14));
      jLabel1.setText("Activity :");

      jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Break", "Others" }));

      jLabel2.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14));
      jLabel2.setText("Notes :");

      jTextArea1.setColumns(20);
      jTextArea1.setLineWrap(true);
      jTextArea1.setRows(5);
      jScrollPane1.setViewportView(jTextArea1);

      jButton1.setText("Start");

	   jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

      jButton2.setText("Cancel");
	
	  jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed();
            }
        });
		
      jLabel3.setText("(255 chars max)");

      jLabel4.setText("* Notes is mandatory if Activity is Others. ");

	  this.setSize(400,600);
      this.setLocationRelativeTo(null);
	  this.setTitle("Start for Other Activities!");

      jLabel5.setFont(new java.awt.Font("Dialog", 1, 24));
      jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel5.setText("Miscellaneous Activity");
      jLabel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                     .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(jLabel2)
                           .addComponent(jLabel3)
                           .addComponent(jLabel1))
                        .addGap(69, 69, 69))
                     .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(46, 46, 46)))
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jLabel4)
                     .addComponent(jButton2)
                     .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
               .addGroup(layout.createSequentialGroup()
                  .addGap(161, 161, 161)
                  .addComponent(jLabel5)))
            .addContainerGap(95, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(25, 25, 25)
            .addComponent(jLabel5)
            .addGap(34, 34, 34)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel1))
            .addGap(22, 22, 22)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addGroup(layout.createSequentialGroup()
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(12, 12, 12)
                  .addComponent(jLabel4)
                  .addGap(34, 34, 34))
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(jLabel2)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jLabel3)
                  .addGap(106, 106, 106)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButton2)
               .addComponent(jButton1))
            .addGap(37, 37, 37))
      );

      pack();
	   getUserId();
   }// </editor-fold>//GEN-END:initComponents
   
//   Action to be handled for start button.  
   private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
       
          notes = jTextArea1.getText();          

          if(notes.length() <= 255) {   
            if(jComboBox1.getSelectedItem().toString().equalsIgnoreCase(ACTIVITY_STATUS_OTHERS)) {
              if(!notes.isEmpty()) {   
                 status = jComboBox1.getSelectedItem().toString();
                 createDialog(status,notes);
              } else {
                 JOptionPane.showMessageDialog(this,ALERT_NOTES_IF_EMPTY);
              }
              
            } else { // Then the activity is 'BREAK'           
              status = jComboBox1.getSelectedItem().toString();
              createDialog(status,notes);
            }
           
         } else {
             JOptionPane.showMessageDialog(this,ALERT_NOTES_LENGTH);
         }
       
    }
   
//   Action to be handled for cancel button.
   private void cancelButtonActionPerformed() {   
         setVisible(false);
         dispose();
         parent.setVisible(true);
    }  

     
//  Get user-id from user name in the server connection.
  private void getUserId(){
         final ClientTask task;
         ServerConnection sconn = Global.theServerConnection;
         String userName = sconn.getUserName();
         task = new TaskExecuteQuery(GET_USERID_QUERY,userName);
         task.setCallback(new Runnable(){
              public void run()
              {
                 try{
                  ResultSet rs = (ResultSet)task.getResult();
                  rs.next();
                  userId = rs.getInt(1);
                 }catch(Exception e){
                    e.printStackTrace();
                 }                       
              }});
         task.enqueue(this);
      }
    
   
 // Sends parameters for generating the xml. 
//  Creates a Break Dialog on start action. 
  private void createDialog(String status,String notes){
     setVisible(false);
     Calendar timeStamp = Calendar.getInstance();     
     final ClientTask tsk = new TaskStartOtherActivity(userId,status,notes,timeStamp.getTimeInMillis());     
     tsk.setCallback(new Runnable() {
         public void run() {
             Element element = (Element) tsk.getResult();
             String action  =element.getNodeName();
             if(T_SEND_EVENT_BREAK_ID.equals(action)){
                int evt_break_id = Integer.parseInt(element.getAttribute(A_EVENT_BREAK_ID));
                getEventBreakId(evt_break_id);
             }
         }});
            
     tsk.enqueue(this);
  } 
   
  // Get the last inserted id from the event_break table.
  // Displays the Break Dialog.
  private void getEventBreakId(int event_Break_Id){
     event_break_id = event_Break_Id;
     JDialog breakDialog = new ShowBreakDialog(this.parent,status,notes,event_break_id);
     breakDialog.setLocationRelativeTo(null);
      breakDialog.setVisible(true);
  }
  
   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      OthersActivitySelectionDialog dialog = new OthersActivitySelectionDialog(new javax.swing.JFrame());
   }
   
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton jButton1;
   private javax.swing.JButton jButton2;
   private javax.swing.JComboBox jComboBox1;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JTextArea jTextArea1;
   // End of variables declaration//GEN-END:variables
   
}
