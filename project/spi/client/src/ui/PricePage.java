/* $Header: /home/common/cvsarea/ibase/dia/src/ui/PricePage.java,v 1.4.2.3 2006/03/30 12:28:55 nancy Exp $ */
/*
 * PricePage.java
 *
 * Created on April 18, 2005, 10:15 AM
 */
package ui;

import beans.ToolTipText;
import beans.AddEditUnitprice;
import common.Log;
import common.UnitpriceData;
//import model.ManagedTableFilter;
import model.ManagedComboModel;
import model.ManagedTableModel;
import model.ManagedTableSorter;
import model.QueryComboModel;
import model.SQLManagedTableModel;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Point;

import java.awt.event.MouseEvent;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;

import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;


/**
 * The Prices screen on the AdminFrame shows the prices paid
 * for each project, volume and level by Page and Document for
 * Unitize, Unitize QC, Coding and Coding QC.  The first row of
 * the table is the Volume Default, the prices used is there is no
 * price defined for a column in a volume.  If a volume has a price
 * defined that does not match the Volume Default, the price will
 * show in bold green, rather than black.  The user may edit the
 * prices by selecting a row and clicking the Edit button (or double
 * clicking a row).
 *
 * @author  Nancy McCall
 * @see beans.AddEditUnitprice
 * @see common.UnitpriceData
 */
public final class PricePage extends ui.AbstractPage
{

   private final String GET_ALL_VOLUMES = "Import Export.get all volumes";
   private QueryComboModel volumeModel = null;
   private ManagedTableSorter pModel = null;
   private ManagedComboModel projectModel = null;
   private ManagedComboModel projectModelFilter = null;
   private int projectId = 0;
   private int volumeId = 0;
   private int unitpriceId = 0;
   private String projectName = "";
   private String[] tableHeadings;

   /**
     * Creates new form PricePage.
     * @param frame the frame in which to place this screen
     */
   public PricePage(AdminFrame frame)
   {
      super(frame);
      initComponents();

      // keep the unitpriceTable model headings for use in loading the table data
      tableHeadings = new String[unitpriceTable.getColumnModel().getColumnCount()];
      TableModel model = unitpriceTable.getModel();
      for (int i = 0; i < tableHeadings.length; i++) {
         tableHeadings[i] = model.getColumnName(i);
      }
   }

   /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        xrefFormatGroup = new javax.swing.ButtonGroup();
        titleLabel = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        projectCombo = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        fieldsScrollPane = new javax.swing.JScrollPane();
        unitpriceTable = new UnitpriceTableClass();
        jPanel1 = new javax.swing.JPanel();
        editButton = new javax.swing.JButton();

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");
        exitMenuItem.setMnemonic('E');
        exitMenuItem.setText("Exit");
        exitMenuItem.setToolTipText("Exit program.");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
		fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setLayout(new java.awt.GridBagLayout());

        titleLabel.setFont(new java.awt.Font("Dialog", 1, 24));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Unit Price");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 20, 0);
        add(titleLabel, gridBagConstraints);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel10.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14));
        jLabel1.setText("Select Project: ");
        jPanel10.add(jLabel1, new java.awt.GridBagConstraints());

        projectCombo.setPreferredSize(new java.awt.Dimension(175, 25));
        projectCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectComboActionPerformed(evt);
            }
        });

        jPanel13.add(projectCombo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel10.add(jPanel13, gridBagConstraints);

        jPanel6.add(jPanel10, java.awt.BorderLayout.NORTH);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        add(jPanel6, gridBagConstraints);

        fieldsScrollPane.setPreferredSize(new java.awt.Dimension(653, 403));
        unitpriceTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        unitpriceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Volume", "Lvl", "U. Page", "U. Doc", "UQC Page", "UQC Doc", "C. Page", "C. Doc", "CQC Page", "CQC Doc"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        unitpriceTable.setFocusable(false);
        unitpriceTable.setIntercellSpacing(new java.awt.Dimension(2, 1));
        unitpriceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                unitpriceTableMouseClicked(evt);
            }
        });

        fieldsScrollPane.setViewportView(unitpriceTable);

        jPanel2.add(fieldsScrollPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.insets = new java.awt.Insets(25, 25, 25, 25);
        add(jPanel2, gridBagConstraints);

        editButton.setFont(new java.awt.Font("Dialog", 0, 12));
        editButton.setText("Edit");
        editButton.setToolTipText("");
        editButton.setFocusable(false);
        editButton.setEnabled(false);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        jPanel1.add(editButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        add(jPanel1, gridBagConstraints);

    }//GEN-END:initComponents

    private void unitpriceTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_unitpriceTableMouseClicked
       try {
          if (evt.getClickCount() > 1 &&
                  unitpriceTable.getSelectedRow() > -1) { // 2007-06-26: changed here) {
                // double-click on a row
             editButton.doClick();
          }
          if (unitpriceTable.getSelectedRow() > -1) {
             editButton.setEnabled(true);
          }
          else {
             editButton.setEnabled(false);
          }
       } catch (Throwable th) {
          Log.quit(th);
       }
    }//GEN-LAST:event_unitpriceTableMouseClicked

    //private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
    //    try {
    //        assert projectId > 0;
    //
    //        UnitpriceData up = new UnitpriceData();
    //        up.project_id = projectId;
    //        up.volume_id = -1; // signal the add to addEditUnitprice
    //
    //        AddEditUnitprice priceDialog;
    //        priceDialog = new AddEditUnitprice((java.awt.Component)this
    //                   , projectName, up);
    //        priceDialog.setModal(true);
    //        priceDialog.show();
    //    } catch (Throwable th) {
    //        Log.quit(th);
    //    }
    //}//GEN-LAST:event_addButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
       try {
          assert projectId > 0;

          UnitpriceData up = new UnitpriceData();

          int i = unitpriceTable.getSelectedRow();
          ManagedTableSorter model = (ManagedTableSorter) unitpriceTable.getModel();

          int level = 0;
          String volume = (String) model.getValueAt(i, 10);
          if (volume != null & !volume.equals("")) {
             up.volume_id = Integer.parseInt(volume);
          }
          String levelString = (String) model.getValueAt(i, 1);
          if (levelString != null & !levelString.equals("")) {
             up.field_level = Integer.parseInt(levelString);
          }

          up.unitprice_id = model.getRowId(i);
          up.project_id = projectId;
          up.unitize_page_price = (String) model.getValueAt(i, 2);
          up.unitize_doc_price = (String) model.getValueAt(i, 3);
          up.uqc_page_price = (String) model.getValueAt(i, 4);
          up.uqc_doc_price = (String) model.getValueAt(i, 5);
          up.coding_page_price = (String) model.getValueAt(i, 6);
          up.coding_doc_price = (String) model.getValueAt(i, 7);
          up.codingqc_page_price = (String) model.getValueAt(i, 8);
          up.codingqc_doc_price = (String) model.getValueAt(i, 9);

          AddEditUnitprice priceDialog;
          priceDialog = new AddEditUnitprice((java.awt.Component) this, projectName, (String) model.getValueAt(i, 0) // volume_name
                  , up);
          priceDialog.setModal(true);
          priceDialog.show();
          ((ManagedTableSorter) unitpriceTable.getModel()).fireTableDataChanged();
          if (unitpriceTable.getSelectedRow() == -1) {
             editButton.setEnabled(false);
          }
       // ends here
       } catch (Throwable th) {
          Log.quit(th);
       }
    }//GEN-LAST:event_editButtonActionPerformed

    //private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
    //    try {
    //        // TBD:  Make sure the price is not in use?
    //        int i = unitpriceTable.getSelectedRow();
    //        ManagedTableSorter model = (ManagedTableSorter)unitpriceTable.getModel();
    //        final ClientTask task = new TaskExecuteUpdate("PricePage.deleteUnitprice"
    //                                                    , Integer.toString(model.getRowId(i))); // unitpriceId
    //        //task.setCallback(new Runnable() {
    //        //        public void run() {
    //        //            deleteUnitpriceEntry((String)task.getResult());
    //        //        }
    //        //    });
    //        task.enqueue(this);
    //        editButton.setEnabled(false);
    //        deleteButton.setEnabled(false);
    //    } catch (Throwable th) {
    //        Log.quit(th);
    //    }
    //}//GEN-LAST:event_deleteButtonActionPerformed

    private void projectComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectComboActionPerformed
       try {
          int projectIndex = projectCombo.getSelectedIndex();
          projectId = (projectIndex >= 0
                  ? ((ManagedComboModel) projectCombo.getModel()).getIdAt(projectIndex)
                  : 0);
          if (projectId > 0) {
             projectName = (String) projectCombo.getSelectedItem();

             // The painted column names are retained
                // Sort on column 11, sequence
             SQLManagedTableModel unsortedModel = SQLManagedTableModel.makeInstance("PricePage.unitpriceTable",
                     unitpriceTable.getModel(),
                     projectId);
             unsortedModel.setColumnClass(11, Integer.class);  // sequence
             ManagedTableModel model = new ManagedTableSorter(new int[]{11, 1}, unsortedModel);
             unitpriceTable.setModel(model);
             model.register();

             //addButton.setEnabled(true);
             editButton.setEnabled(false);
          //deleteButton.setEnabled(false);
          }
          else {
             projectName = "";
             //addButton.setEnabled(false);
             editButton.setEnabled(false);
          //deleteButton.setEnabled(false);
          }

          unitpriceTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
          // set the table row colors and justification
          TableColumn column = null;
          for (int i = 0; i < unitpriceTable.getColumnCount(); i++) {
             column = unitpriceTable.getColumnModel().getColumn(i);
             column.setCellRenderer(formatCell);
          }
          column = unitpriceTable.getColumnModel().getColumn(0);
          column.setPreferredWidth(150);
          column = unitpriceTable.getColumnModel().getColumn(1);
          column.setPreferredWidth(35);

          unitpriceTable.getModel().addTableModelListener(new RepaintCells());
       } catch (Throwable th) {
          Log.quit(th);
       }
    }//GEN-LAST:event_projectComboActionPerformed

   /**
     * Check that it's OK to exit the current page.  Subclasses must override this to provide a
     * page-dependent check.
     * @return true if it's OK to exit.  If field cancels save/no-save/cancel dialog,
     *         false is returned.
     */
   protected boolean exitPageCheck()
   {
      // TBD
      return true;
   }

   /** Get the menu bar for the current page.  Subclasses must override this to provide a
     * page-dependent menu bar.
     */
   protected javax.swing.JMenuBar getPageJMenuBar()
   {
      return menuBar;
   }

   /**
     * Perform page initialization.  Subclasses must override this to provide any
     * required page-dependent initialization.
     * 
     * Create a filtered and unfiltered model for project, volume, batch and batchEnd combos.
     */
   protected void tabSelected()
   {
      Log.print("PricePage tabSelected");

      // project model
      if (pModel == null) {
         pModel = new ManagedTableSorter(0, SQLManagedTableModel.makeInstance("PricePage.projectCombo"));
         projectModel = new ManagedComboModel(pModel);
         pModel.register();
         projectCombo.setModel(projectModel);
      }
   }

   private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                             
       try {
          exitForm();
       } catch (Throwable th) {
          Log.quit(th);
       }
    } 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton editButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JScrollPane fieldsScrollPane;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JComboBox projectCombo;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JTable unitpriceTable;
    private javax.swing.ButtonGroup xrefFormatGroup;
    // End of variables declaration//GEN-END:variables

   private class UnitpriceTableClass extends JTable
   {

      public String getToolTipText(MouseEvent event)
      {
         return ToolTipText.getToolTipText(event, unitpriceTable);
      }

      public Point getToolTipLocation(MouseEvent event)
      {
         return ToolTipText.getToolTipLocation(event, unitpriceTable);
      }

   }

   TableCellRenderer formatCell = new DefaultTableCellRenderer()
           {
              /**
         *
         * Returns the default table cell renderer.
         *
         * @param table  the <code>JTable</code>
         * @param value  the value to assign to the cell at
         *			<code>[row, column]</code>
         * @param isSelected true if cell is selected
         * @param hasFocus true if cell has focus
         * @param row  the row of the cell to render
         * @param column the column of the cell to render
         * @return the default table cell renderer
         */

              public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
              {
                 Component renderer = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                 //Log.print("(PricePage.renderer) enter");

                 if (column > 0) {
                    setHorizontalAlignment(JLabel.RIGHT);
                 }
                 else {
                    setHorizontalAlignment(JLabel.LEFT);
                 }
                 if (isSelected) {
                    // leave default background
                    return this;
                 }

                 if (row % 2 == 1) {
                    renderer.setBackground(new Color(234, 234, 234));
                    renderer.setForeground(Color.black);
                 }
                 else {
                    renderer.setBackground(Color.white);
                    renderer.setForeground(Color.black);
                 }
                 ManagedTableModel model = (ManagedTableModel) unitpriceTable.getModel();
                 int i = model.getRowCount() + 1;
                 int thisLevel = Integer.parseInt((String) model.getValueAt(row, 1));
                 if (column > 1 && !((String) model.getValueAt(row, 10)).equals("0")) { // volume_id <> 0
                // price
                    for (i = 0; i < model.getRowCount(); i++) {
                       if (thisLevel == Integer.parseInt((String) model.getValueAt(i, 1)) && ((String) model.getValueAt(i, 10)).equals("0")) {
                          // the default row for this level
                          if (!((String) value).equals((String) model.getValueAt(i, column))) {
                             // reverse colors to flag a non-matching value
                            //Color color = renderer.getBackground();
                            //renderer.setBackground(renderer.getForeground());
                            //Log.print("(PricePage.repaint) setForeground green");
                             renderer.setForeground(Color.green.darker());
                             Font font = renderer.getFont();
                             renderer.setFont(new Font(font.getFontName(), Font.BOLD, font.getSize()));
                          }
                          i = model.getRowCount() + 1;
                          break;
                       }
                       if (0 < Integer.parseInt((String) model.getValueAt(i, 10))) {
                          // beyond default volumes
                          break;
                       }
                    }
                 }
                 if (i < model.getRowCount()) {
                    // didn't find a default for this level, so make it darker gray
                //Log.print("(PricePage.repaint) setBackground lightGray");
                    renderer.setBackground(Color.lightGray);
                 }
                 return this;
              }

           };

   /**
     * This listener detects changes to the default volume rows of the unitpriceTable
     * and initiates a fireTableRowsUpdated on the rows following the defaults to
     * cause the renderer to repaint the prices with the appropriate colors.
     * 
     * NOTE:  This logic assumes the model is sorted by volume.sequence (column 11) first!
     */
   private class RepaintCells implements TableModelListener
   {
      /**
         * This fine grain notification tells listeners the exact range
         * of cells, rows, or columns that changed.
         */

      public void tableChanged(TableModelEvent e)
      {
         ManagedTableSorter model = (ManagedTableSorter) e.getSource();
         if (e.getFirstRow() >= model.getRowCount()) {
            return;
         }
         int i;
         if (((String) model.getValueAt(e.getFirstRow(), 10)).equals("0")) {
            // default volume
                // get beyond default volumes
            for (i = e.getFirstRow() + 1; i < model.getRowCount(); i++) {
               if (!((String) model.getValueAt(i, 10)).equals("0")) {
                  break;
               }
            }
            model.fireTableRowsUpdated(i, model.getRowCount() - 1);
         }
      }

   }

}
