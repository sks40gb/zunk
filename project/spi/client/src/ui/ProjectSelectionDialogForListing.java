/*
 * ProjectSelectionDialogForListing.java
 *
 * Created on February 11, 2008, 7:41 PM
 */

package ui;

import beans.ToolTipText;
import client.ClientTask;
import client.Global;
import client.TaskCheckBatchAvailable;
import client.TaskExecuteQuery;
import client.TaskOpenBatch;
import common.Log;
import common.PopulateData;
import common.msg.MessageConstants;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import model.QueryComboModel;
import model.SQLManagedComboModel;
import model.TallyFieldSelectionModel;
import org.w3c.dom.Element;

/**
 * Dialog to Display List Of all Projects and Volumes
 *s
 * @author  murali
 */
public class ProjectSelectionDialogForListing extends javax.swing.JDialog implements MessageConstants {   
    private JFrame parent;     
    private String whichStatus;
    private javax.swing.JTable fieldsTable;
    private javax.swing.JPanel projectPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox projectCombo;
    private javax.swing.JComboBox fieldCombo;
    private javax.swing.JPanel fieldsPane;
    private javax.swing.JScrollPane fieldsScrollPane;
    private javax.swing.JPanel bottomPane;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton okButton;
    private javax.swing.JButton cancelButton;
    private SQLManagedComboModel projectModel = null;
    private QueryComboModel fieldModel = null;
    PopulateData data;
    private final String GET_ALL_PROJECTS = "AdvanceValidation.projectCombo";
    private final String GET_ALL_VOLUME = "listing.get volume";
    private int projectId = 0;
    private int volumeId = 0;
  
    private String projectName = "";
    private String volumeName = "";
    final private static int PROJECT_COLUMN = 2;    
    private int selectedBatchId;
    private List fieldName;
    boolean flag = true;
    /** Creates new form ProjectSelectionDialogForListing */
    public ProjectSelectionDialogForListing(JFrame parent, String whichStatus) {
      
        super(parent, true);    
         setTitle("Project Selection for Listing");
        this.parent = parent;
        this.whichStatus = whichStatus;        
        initComponents();
		
        setLocationRelativeTo(parent);        
        tabSelected();               
    }    

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
		
        projectPane = new javax.swing.JPanel();       
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        projectCombo = new javax.swing.JComboBox();
        fieldCombo = new javax.swing.JComboBox();
        
        fieldsPane = new javax.swing.JPanel();
        fieldsScrollPane = new javax.swing.JScrollPane();
        fieldsTable = new ProjectFieldsTableClass();
        bottomPane = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
         
         projectPane.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14));
        jLabel1.setText("Select Project:");
        projectPane.add(jLabel1);
        
		
        projectCombo.setPreferredSize(new java.awt.Dimension(150, 25));
        projectCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectComboActionPerformed(evt);
            }
        });

        projectPane.add(projectCombo);
        
        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14));
        jLabel2.setText("Select Project Volumes:");
        projectPane.add(jLabel2);
        
		fieldCombo.setEnabled(false);
        fieldCombo.setPreferredSize(new java.awt.Dimension(150, 25));
        fieldCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldComboActionPerformed(evt);
            }
        });
        fieldCombo.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {               
                fieldComboPopupMenuWillBecomeVisible(evt);
            }
        });

        projectPane.add(fieldCombo);

        add(projectPane, java.awt.BorderLayout.NORTH);

        fieldsPane.setLayout(new java.awt.BorderLayout());

        fieldsPane.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        fieldsScrollPane.setPreferredSize(new java.awt.Dimension(400, 300));
        fieldsTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        fieldsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
               
            new String [] {
                "Field Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                 false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        fieldsTable.setFocusable(false);
        fieldsTable.setIntercellSpacing(new java.awt.Dimension(2, 1));
        fieldsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fieldsTableMouseClicked(evt);
            }
        });

        fieldsScrollPane.setViewportView(fieldsTable);

        fieldsPane.add(fieldsScrollPane, java.awt.BorderLayout.CENTER);

        add(fieldsPane, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0, 20, 0));

        okButton.setText("  Ok  ");
        okButton.setEnabled(true);
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        jPanel1.add(okButton);        
        cancelButton.setText("  Cancel  ");
        cancelButton.setEnabled(true);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        jPanel1.add(cancelButton);
        bottomPane.add(jPanel1);
        add(bottomPane, java.awt.BorderLayout.SOUTH);

        //setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        //setTitle("Project Selection");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

     /*   jPanel1.setLayout(new java.awt.GridBagLayout());

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
*/
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProjectSelectionDialogForListing(new javax.swing.JFrame(), "dummy").setVisible(true);                
            }
        });
    }
    
    private void closeDialog(java.awt.event.WindowEvent evt) {                             
        setVisible(false);
        dispose();
        parent.setVisible(true);
    }  

	private class ProjectFieldsTableClass extends JTable {
            public String getToolTipText(MouseEvent event) {
                return ToolTipText.getToolTipText(event, fieldsTable);
            }
            public Point getToolTipLocation(MouseEvent event) {
                return ToolTipText.getToolTipLocation(event, fieldsTable);
            }
        }
    
        protected void tabSelected() {
            Log.print("Listing Button selected");
            // project model
            projectModel = new SQLManagedComboModel(GET_ALL_PROJECTS);
            projectModel.register();
            projectCombo.setModel(projectModel);
            data = new PopulateData();
        }
    
	private void projectComboActionPerformed(java.awt.event.ActionEvent evt) {                                             
        //Log.print("(PopulatePage.projectComboActionPerformed) " + evt.getActionCommand());
       
        if(data != null) {
            projectName = data.project_name;
        }
        int sel = projectCombo.getSelectedIndex();     
        if (sel > -1) {
            data.project_name = (String)projectModel.getElementAt(sel);
            projectId = ((SQLManagedComboModel)projectCombo.getModel()).getIdAt(sel);
            if (fieldModel != null) {
                if(! projectName.equals(data.project_name)) { // changed here
                    fieldCombo.setSelectedIndex(-1);
                } // changed here
            }
            fieldModel = new QueryComboModel(GET_ALL_VOLUME
                                           , /* required? */ false
                                           , new String[] { Integer.toString(projectId) } 
                                           , "");
            fieldCombo.setModel(fieldModel);        
            fieldCombo.setEnabled(true);
        } else {
            data.project_name = "";
            projectId = 0;
            fieldCombo.setEnabled(false);
        }
      }  
    
     private void fieldComboPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {                                                       
        //Log.print("(PopulatePage.volumeComboPopupMenuWillBecomeVisisble) projectId " + projectId);
//        fieldModel = new QueryComboModel(GET_ALL_VOLUME
//                                           , /* required? */ false
//                                           , new String[] { Integer.toString(projectId) } 
//                                           , "");
//        fieldCombo.setModel(fieldModel);        
     }  
     
     private void fieldComboActionPerformed(java.awt.event.ActionEvent evt) {         
         cancelButton.setEnabled(true);
         try {            
             int sel = fieldCombo.getSelectedIndex();
        if (sel > -1) {
            data.field_names = (String)fieldModel.getElementAt(sel);
           // data.standard_field_validations = (String)fieldModel.getElementAt(sel);
            volumeId = fieldModel.getIdAt(sel);
            System.out.println("volumeId------------>"+  volumeId);
        }         
            if (sel > 0) {
                flag = true;
                volumeName = (String) fieldCombo.getSelectedItem();      
                final ClientTask task = new TaskCheckBatchAvailable(projectId,volumeId, whichStatus);
                      task.setCallback(new Runnable() {
                public void run() {
                    Element reply = (Element) task.getResult();
                    String action = reply.getNodeName();                    
                    if (T_FAIL.equals(action)) {                          
                         JOptionPane.showMessageDialog(ProjectSelectionDialogForListing.this,
                                "Can't open selected batch",
                                "Error",
                                JOptionPane.ERROR_MESSAGE);
                    }else{
//                            SQLManagedTableModel projectModel = SQLManagedTableModel.makeInstance("listing.get fields",
//                                                              fieldsTable.getModel(),
//                                                              projectId);                
//                           // unsortedModel.setColumnClass(6, Integer.class);  // sequence
//                            ManagedTableModel model = new ManagedTableSorter(0, projectModel);                 
//                            fieldsTable.setModel(model);
//                            model.register();                 
//                            TableColumn column = null;
//                            column = fieldsTable.getColumnModel().getColumn(0);
//                            column.setPreferredWidth(110); // fieldName   
                                                   
                           final TaskExecuteQuery tallytask = new TaskExecuteQuery("listing.get fields",""+projectId);

                             tallytask.setCallback((new Runnable() {

                                 public void run() {
                                     try {                                        
                                        ArrayList fieldNameList = new ArrayList();
                                         ResultSet results = (ResultSet) tallytask.getResult();
                                         while (results.next()) {
                                             String fieldName = results.getString(2);
                                             fieldNameList.add(fieldName);
                                         }
                                          String headings[] = {"Select", "Project Fields"};
                                          Object object[][] = new Object[fieldNameList.size()][headings.length + 1];       
                                         for(int j =0;j < fieldNameList.size();j++){                                                                                         
                                             String project_field = null;                                                     
                                             project_field = fieldNameList.get(j).toString();
                                             object[j][0] = new Boolean(false);
                                             object[j][1] = project_field;                                                       
                                         }
                                             TallyFieldSelectionModel tallymodel = new TallyFieldSelectionModel(object, headings);
                                             fieldsTable.setModel(tallymodel);         
                                             fieldsTable.getColumnModel().getColumn(0).setMaxWidth(50);                                        

                                     } catch (SQLException ex) {
                                         Logger.getLogger(AddMoreFieldsDialog.class.getName()).log(Level.SEVERE, null, ex);
                                     }
                                 }
                             }));
                             tallytask.enqueue();
                    }                     
                }});
                   //flag();
                task.enqueue(this);
               }
        } catch (Throwable th) {
            Log.quit(th);
        }
     }
     private void flag(){          
         flag= false;
         dispose();
     }
     private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {
        okButton.setEnabled(false);
        try {
            fieldName = new ArrayList();
//            int[] selectedIndex = fieldsTable.getSelectedRows();
//            for (int i = 0; selectedIndex.length > i; i++) {
//                int row = selectedIndex[i];
//                Object obj = fieldsTable.getValueAt(row, 0);
//                fieldName.add(obj);
//            }          
            
            int rows = fieldsTable.getRowCount();

            boolean proceedToNextWindow = false;
            for (int i = 0; i < rows; i++) {
                String selectedValue = fieldsTable.getValueAt(i, 0).toString();

                if (null != selectedValue && selectedValue.equals("true")) {                    
                    proceedToNextWindow = true;                    
                    String fieldname = fieldsTable.getValueAt(i, 1).toString();
                    fieldName.add(fieldname);
                }
            }
            if (!proceedToNextWindow) {
                JOptionPane.showMessageDialog(this,
                        "Select rows and proceed");
                okButton.setEnabled(true);
            } else{                   
                 if(volumeId != 0 || projectId != 0 || fieldName.size() != 0){
                     System.out.println("volumeId--------->" +volumeId);
                     final ClientTask task = new TaskOpenBatch(projectId, whichStatus,volumeId);
                         task.setCallback(new Runnable() {
                             public void run() {
                                 Element reply = (Element) task.getResult();
                                 String action = reply.getNodeName();
                             SplitPaneViewer viewer = SplitPaneViewer.getInstance();
                             if (T_BATCH_OPENED.equals(action)) {
                                 // get data for opened batch// TBD - should probably continue at ClientTask level
                                 int batchId = Integer.parseInt(reply.getAttribute(A_BATCH_ID));
                                 int projectId = Integer.parseInt(reply.getAttribute(A_PROJECT_ID));
                                 // int activeGroup = Integer.parseInt(reply.getAttribute(A_GROUP));
                                 String project = reply.getAttribute(A_PROJECT_NAME);
                                 String splitDocuments = reply.getAttribute(A_SPLIT_DOCUMENTS);
                                 // Log.print("ready to open b="+batchId+" p="+project);
                                 viewer.setParent(parent);
                                 viewer.setFields(fieldName);
                                 viewer.setVolumeId(volumeId);
                                 viewer.setVolume(volumeName);
                                 viewer.setBatchId(batchId);
                                 // viewer.setActiveGroup(activeGroup);
                                 viewer.initializeForProject(project, projectId,
                                         whichStatus, splitDocuments);
                                 // Open the viewer.  This instance of the viewer becomes
                             // the main window, for error pop-ups
                                 viewer.setVisible(true);
                                 Global.mainWindow = viewer;
                                 // close the dialog without showing the parent
                             // TBD: this is strange coding - worry about restructuring it
                                 setVisible(false);
                                 dispose();
                             } else if (T_FAIL.equals(action)) {
                                 // TBD: How do we tell them of problem opening batch
                             // This gives them a message box, doesn't open viewer
                                 JOptionPane.showMessageDialog(ProjectSelectionDialogForListing.this,
                                         "Can't open selected batch",
                                         "Error",
                                         JOptionPane.ERROR_MESSAGE);
                             } else {
                                 Log.quit("ProjectSelectionDialog:" + " unexpected message type: " + action);
                             }
                         }
                     });
                     task.enqueue(this);
                     }
            }
        } catch (Throwable th) {
            Log.quit(th);
        }
    }
     
     DefaultTableModel fieldCheckBoxModel = new DefaultTableModel(){
         
     };
     
     private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        try {
            // Add your handling code here:
            
            Log.print("ProjectSelectionDialog: Cancel pressed");
            closeDialog(null);
        } catch (Throwable th) {
            Log.quit(th);
        }
     } 

     private void fieldsTableMouseClicked(java.awt.event.MouseEvent evt) {                                         
        try {
            if (evt.getClickCount() > 1) {
                // double-click on a row
                //okButton.doClick();
                 okButton.setEnabled(true);
            }
        } catch (Throwable th) {
            Log.quit(th);
        }
     }

}
