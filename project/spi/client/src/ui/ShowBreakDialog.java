/*
 * ShowBreakDialog.java
 *
 * Created on March 6, 2008, 6:02 PM
 */
package ui;

import client.ClientTask;
import client.Global;
import client.TaskOpenBatch;
import client.TaskOpenQAVolume;
import client.TaskStopOtherActivity;
import com.lexpar.util.Log;
import common.msg.MessageConstants;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import org.w3c.dom.Element;

/**
 *
 * @author  anurag
 */

  /* public class ShowBreakDialog extends javax.swing.JDialog implements MessageConstants{
      private static String status;
      private static String notes;
      private static int event_break_id;
      private JFrame parent;
      private String duration = null;
      private int batchId = 0;
      private int projectId = 0;
      private int volumeId = 0;
      private String activity = null;
      private String volumeName = null;
      private List fields = null;
      private int userId = 0;
      private String fields_name = null;*/

public class ShowBreakDialog extends javax.swing.JDialog implements MessageConstants
{

   private static String status;
   private static String notes;
   private static int event_break_id;
   private JFrame parent;
   private String duration = null;
   private int batchId = 0;
   private int projectId = 0;
   private int volumeId = 0;
   private String activity = null;
   private String volumeName = null;
   private List fields = null;
   private int userId = 0;
   private String fields_name = null;
   private QAProofReadingpage qaProofReadingpage = null;

   /** Creates new form ShowBreakDialog
    * @param parent 
    * called for others activity chosen
    */

   public ShowBreakDialog(JFrame parent, String status, String notes, int event_break_id)
   {
      super(parent);
      this.parent = parent;
      this.status = status;
      this.notes = notes;
      this.event_break_id = event_break_id;
      initComponents();
   }

   //called inside any activity like Coding,QA etc.

  // public ShowBreakDialog(JFrame parent,String status,int event_break_id,String dur,int batchID,int projectID,String activity,int volumeId,String volume,List fieldNames,int userId,String fields_name) {


   public ShowBreakDialog(JFrame parent, String status, int event_break_id, String dur, int batchID, int projectID, String activity, int volumeId, String volume, List fieldNames, int userId, String fields_name)
   {

      super(parent);
      this.parent = parent;
      this.status = status;
      this.event_break_id = event_break_id;
      duration = dur;
      batchId = batchID;
      projectId = projectID;
      this.volumeId = volumeId;
      this.activity = activity;
      volumeName = volume;
      fields = fieldNames;

      /*this.userId = userId;
      this.fields_name = fields_name;
      initComponents();    */  

      this.userId = userId;
      this.fields_name = fields_name;
      initComponents();

   }
   
   public ShowBreakDialog(QAProofReadingpage parent,String status, int event_break_id, String dur,String activity, int userId)
   {

      super(parent);
      this.parent = parent;
      this.status = status;
      this.event_break_id = event_break_id;
      duration = dur;
      this.activity = activity;

      this.userId = userId;
      this.qaProofReadingpage = parent;
      initComponents();

   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   private void initComponents()
   {

      jLabel1 = new javax.swing.JLabel();
      jButton1 = new javax.swing.JButton();
      jLabel2 = new javax.swing.JLabel();
      jPanel1 = new javax.swing.JPanel();
      jPanel2 = new javax.swing.JPanel();
      notesArea = new JTextArea(15, 40);

      //this.setLocationRelativeTo(null);

      jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(102, 153, 0)));

      timerDemo = new TimerDemo();
      timerDemo.setFloatable(false);
      timerDemo.event_break_id = event_break_id;
      timerDemo.taskLabel.setText("Task :   " + this.status);

      jLabel1.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 14));

      
      addWindowListener(new java.awt.event.WindowAdapter() {
           public void windowClosing(java.awt.event.WindowEvent evt) {
                stopButtonActionPerformed();
            }
        });
      
      jButton1.setText("End Break");
	  jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed();
            }
        });

      jLabel2.setFont(new java.awt.Font("Verdana", 0, 12));
      jLabel2.setText("BREAK !!!");
       if(this.status.equalsIgnoreCase("Others")){
            jLabel1.setText("You are currently working on other task :");
            jLabel2.setText(" " + this.notes);
       }
       else{
            jLabel1.setText("You are currently out for a ");
            jLabel2.setText("BREAK !!!");
       }
     this.setTitle("GO for a BREAK!");
     
     javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel1)
               .addComponent(jLabel2))
            .addContainerGap(175, Short.MAX_VALUE))
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jLabel2)
            .addContainerGap(69, Short.MAX_VALUE))
      );

      jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

      javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(timerDemo, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
            .addContainerGap())
      );
      jPanel2Layout.setVerticalGroup(
         jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addComponent(timerDemo, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
      );

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(52, 52, 52)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(82, Short.MAX_VALUE))
         .addGroup(layout.createSequentialGroup()
            .addGap(124, 124, 124)
            .addComponent(jButton1)
            .addContainerGap(158, Short.MAX_VALUE))
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap(221, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(57, 57, 57)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(31, 31, 31)
            .addComponent(jButton1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
      );

      pack();
   }
   
   //Action handled for stop button.
   //Hides the current window.
   private void stopButtonActionPerformed() {   
         timerDemo.destroy();
         setVisible(false);
         if(activity == null){
           parent.setVisible(true); 
         }else if("QAProofReading".equals(activity)) {
             timerDemo = new TimerDemo();
             qaProofReadingpage.viewerPane.remove(qaProofReadingpage.belowPanel);
             qaProofReadingpage.free();
             //qaProofReadingpage.timerDemo.resume(duration);
             qaProofReadingpage.addTimerPanel(activity);
             qaProofReadingpage.timerDemo.resume(duration);
             qaProofReadingpage.setVisible(true);
         }
         else{
             showParentWindow();
         }
         Calendar timeStamp = Calendar.getInstance();
         long close_timestamp = timeStamp.getTimeInMillis();
         TaskStopOtherActivity task = new TaskStopOtherActivity(event_break_id,close_timestamp);
         task.enqueue(this);
    } 
   
   //Opens the parent window.
   private void showParentWindow(){
      if(activity.equalsIgnoreCase("QA")){
          final ClientTask task = new TaskOpenQAVolume(volumeId);
            task.setCallback(
                new Runnable() {
                    public void run() {
                        Element reply = (Element) task.getResult();
                        String action = reply.getNodeName();
                        if (T_BATCH_OPENED.equals(action)) {
                            String projectName = reply.getAttribute(A_PROJECT_NAME);
                            String splitDocuments = reply.getAttribute(A_SPLIT_DOCUMENTS);
                            int activeGroup = 0;
                            openViewerForQA(projectName,projectId, splitDocuments, activeGroup);
                        } else if (T_FAIL.equals(action)) {
                            JOptionPane.showMessageDialog(parent,"Can't open selected volume","Error",JOptionPane.ERROR_MESSAGE);
                        } else {
                            Log.quit("ProjectSelectionDialog:"
                                     +" unexpected message type: "+action);
                        }
                    }
                });
            task.enqueue(this);
 }
      else if(activity.equalsIgnoreCase("Listing")) {
             final ClientTask task = new TaskOpenBatch(projectId,activity,volumeId);
            task.setCallback(new Runnable() {
                public void run() {
                    Element reply = (Element) task.getResult();
                    String action = reply.getNodeName();
                    SplitPaneViewer viewer = SplitPaneViewer.getInstance();
                    if (T_BATCH_OPENED.equals(action)) {
                        int batchId = Integer.parseInt(reply.getAttribute(A_BATCH_ID));
                        int projectId = Integer.parseInt(reply.getAttribute(A_PROJECT_ID));
                        String project = reply.getAttribute(A_PROJECT_NAME);
                        String splitDocuments = reply.getAttribute(A_SPLIT_DOCUMENTS);
                        viewer.setParent(parent);
                        viewer.setFields(fields);
                        viewer.setVolumeId(volumeId);
                        viewer.setVolume(volumeName);
                        viewer.setBatchId(batchId);
                        viewer.initializeForProject(project, projectId,activity, splitDocuments);
                        viewer.setVisible(true);
                        viewer.timerDemo.resume(duration);
                        Global.mainWindow = viewer;
                        setVisible(false);
                        dispose();
                    } else if (T_FAIL.equals(action)) {
                        JOptionPane.showMessageDialog(parent,"Can't open selected batch","Error",JOptionPane.ERROR_MESSAGE);
                    } else {
                        Log.quit("ProjectSelectionDialog:" + " unexpected message type: " + action);
                    }
                }
            });
            task.enqueue(this);
      }else if(activity.equalsIgnoreCase("ListingQC")) {
             final ClientTask task = new TaskOpenBatch(userId,activity,fields_name);
            task.setCallback(new Runnable() {
                public void run() {
                    Element reply = (Element) task.getResult();
                    String action = reply.getNodeName();
                    SplitPaneViewer viewer = SplitPaneViewer.getInstance();
                    if (T_BATCH_OPENED.equals(action)) {
 //                       int batchId = Integer.parseInt(reply.getAttribute(A_BATCH_ID));
                        int projectId = Integer.parseInt(reply.getAttribute(A_PROJECT_ID));
 //                       String project = reply.getAttribute(A_PROJECT_NAME);
                        String splitDocuments = reply.getAttribute(A_SPLIT_DOCUMENTS);
                        viewer.setParent(parent);
                        viewer.setFields(fields);
                        viewer.setFieldName(fields_name);
                        viewer.setVolumeId(volumeId);
                        viewer.setVolume(volumeName);
                        viewer.setBatchId(batchId);
                        viewer.initializeForProject("", projectId,activity, splitDocuments);
                        viewer.setVisible(true);
                        viewer.timerDemo.resume(duration);
                        Global.mainWindow = viewer;
                        setVisible(false);
                        dispose();
                    } else if (T_FAIL.equals(action)) {
                        JOptionPane.showMessageDialog(parent,"Can't open selected batch","Error",JOptionPane.ERROR_MESSAGE);
                    } else {
                        Log.quit("ProjectSelectionDialog:" + " unexpected message type: " + action);
                    }
                }
            });
            task.enqueue(this);
      }else if(activity.equalsIgnoreCase("Tally")) {
             final ClientTask task = new TaskOpenBatch(projectId,activity,volumeId);
            task.setCallback(new Runnable() {
                public void run() {
                    Element reply = (Element) task.getResult();
                    String action = reply.getNodeName();
                    SplitPaneViewer viewer = SplitPaneViewer.getInstance();
                    if (T_BATCH_OPENED.equals(action)) {
                        int batchId = Integer.parseInt(reply.getAttribute(A_BATCH_ID));
                        int projectId = Integer.parseInt(reply.getAttribute(A_PROJECT_ID));
                        String project = reply.getAttribute(A_PROJECT_NAME);
                        String splitDocuments = reply.getAttribute(A_SPLIT_DOCUMENTS);
                        viewer.setParent(parent);
                        viewer.setFields(fields);
                        viewer.setVolumeId(volumeId);
                        viewer.setVolume(volumeName);
                        viewer.setBatchId(batchId);
                        viewer.initializeForProject(project, projectId,activity, splitDocuments);
                        viewer.setVisible(true);
                        viewer.timerDemo.resume(duration);
                        Global.mainWindow = viewer;
                        setVisible(false);
                        dispose();
                    } else if (T_FAIL.equals(action)) {
                        JOptionPane.showMessageDialog(parent,"Can't open selected batch","Error",JOptionPane.ERROR_MESSAGE);
                    } else {
                        Log.quit("ProjectSelectionDialog:" + " unexpected message type: " + action);
                    }
                }
            });
            task.enqueue(this);
      }else if(activity.equalsIgnoreCase("TallyQC")) {
             final ClientTask task = new TaskOpenBatch(userId,activity,fields_name);
            task.setCallback(new Runnable() {
                public void run() {
                    Element reply = (Element) task.getResult();
                    String action = reply.getNodeName();
                    SplitPaneViewer viewer = SplitPaneViewer.getInstance();
                    if (T_BATCH_OPENED.equals(action)) {
                        //int batchId = Integer.parseInt(reply.getAttribute(A_BATCH_ID));
                        int projectId = Integer.parseInt(reply.getAttribute(A_PROJECT_ID));
                       // String project = reply.getAttribute(A_PROJECT_NAME);
                        String splitDocuments = reply.getAttribute(A_SPLIT_DOCUMENTS);
                        viewer.setParent(parent);
                        viewer.setFields(fields);
                        viewer.setFieldName(fields_name);
                        viewer.setVolumeId(volumeId);
                        viewer.setVolume(volumeName);
                        viewer.setBatchId(batchId);
                        viewer.initializeForProject("", projectId,activity, splitDocuments);
                        viewer.setVisible(true);
                        viewer.timerDemo.resume(duration);
                        Global.mainWindow = viewer;
                        setVisible(false);
                        dispose();
                    } else if (T_FAIL.equals(action)) {
                        JOptionPane.showMessageDialog(parent,"Can't open selected batch","Error",JOptionPane.ERROR_MESSAGE);
                    } else {
                        Log.quit("ProjectSelectionDialog:" + " unexpected message type: " + action);
                    }
                }
            });
            task.enqueue(this);
      }
      else if (activity.equalsIgnoreCase("ListingQC")) {
         final ClientTask task = new TaskOpenBatch(userId, activity, fields_name);
         task.setCallback(new Runnable()
                 {

                    public void run()
                    {
                       Element reply = (Element) task.getResult();
                       String action = reply.getNodeName();
                       SplitPaneViewer viewer = SplitPaneViewer.getInstance();
                       if (T_BATCH_OPENED.equals(action)) {
                          //                       int batchId = Integer.parseInt(reply.getAttribute(A_BATCH_ID));
                          int projectId = Integer.parseInt(reply.getAttribute(A_PROJECT_ID));
                          //                       String project = reply.getAttribute(A_PROJECT_NAME);
                          String splitDocuments = reply.getAttribute(A_SPLIT_DOCUMENTS);
                          viewer.setParent(parent);
                          viewer.setFields(fields);
                          viewer.setFieldName(fields_name);
                          viewer.setVolumeId(volumeId);
                          viewer.setVolume(volumeName);
                          viewer.setBatchId(batchId);
                          viewer.initializeForProject("", projectId, activity, splitDocuments);
                          viewer.setVisible(true);
                          viewer.timerDemo.resume(duration);
                          Global.mainWindow = viewer;
                          setVisible(false);
                          dispose();
                       }
                       else if (T_FAIL.equals(action)) {
                          JOptionPane.showMessageDialog(parent, "Can't open selected batch", "Error", JOptionPane.ERROR_MESSAGE);
                       }
                       else {
                          Log.quit("ProjectSelectionDialog:" + " unexpected message type: " + action);
                       }
                    }

                 });
         task.enqueue(this);
      }
      else if (activity.equalsIgnoreCase("Tally")) {
         final ClientTask task = new TaskOpenBatch(projectId, activity, volumeId);
         task.setCallback(new Runnable()
                 {

                    public void run()
                    {
                       Element reply = (Element) task.getResult();
                       String action = reply.getNodeName();
                       SplitPaneViewer viewer = SplitPaneViewer.getInstance();
                       if (T_BATCH_OPENED.equals(action)) {
                          int batchId = Integer.parseInt(reply.getAttribute(A_BATCH_ID));
                          int projectId = Integer.parseInt(reply.getAttribute(A_PROJECT_ID));
                          String project = reply.getAttribute(A_PROJECT_NAME);
                          String splitDocuments = reply.getAttribute(A_SPLIT_DOCUMENTS);
                          viewer.setParent(parent);
                          viewer.setFields(fields);
                          viewer.setVolumeId(volumeId);
                          viewer.setVolume(volumeName);
                          viewer.setBatchId(batchId);
                          viewer.initializeForProject(project, projectId, activity, splitDocuments);
                          viewer.setVisible(true);
                          viewer.timerDemo.resume(duration);
                          Global.mainWindow = viewer;
                          setVisible(false);
                          dispose();
                       }
                       else if (T_FAIL.equals(action)) {
                          JOptionPane.showMessageDialog(parent, "Can't open selected batch", "Error", JOptionPane.ERROR_MESSAGE);
                       }
                       else {
                          Log.quit("ProjectSelectionDialog:" + " unexpected message type: " + action);
                       }
                    }

                 });
         task.enqueue(this);
      }
      else if (activity.equalsIgnoreCase("TallyQC")) {
         final ClientTask task = new TaskOpenBatch(userId, activity, fields_name);
         task.setCallback(new Runnable()
                 {

                    public void run()
                    {
                       Element reply = (Element) task.getResult();
                       String action = reply.getNodeName();
                       SplitPaneViewer viewer = SplitPaneViewer.getInstance();
                       if (T_BATCH_OPENED.equals(action)) {
                          //int batchId = Integer.parseInt(reply.getAttribute(A_BATCH_ID));
                          int projectId = Integer.parseInt(reply.getAttribute(A_PROJECT_ID));
                          // String project = reply.getAttribute(A_PROJECT_NAME);
                          String splitDocuments = reply.getAttribute(A_SPLIT_DOCUMENTS);
                          viewer.setParent(parent);
                          viewer.setFields(fields);
                          viewer.setFieldName(fields_name);
                          viewer.setVolumeId(volumeId);
                          viewer.setVolume(volumeName);
                          viewer.setBatchId(batchId);
                          viewer.initializeForProject("", projectId, activity, splitDocuments);
                          viewer.setVisible(true);
                          viewer.timerDemo.resume(duration);
                          Global.mainWindow = viewer;
                          setVisible(false);
                          dispose();
                       }
                       else if (T_FAIL.equals(action)) {
                          JOptionPane.showMessageDialog(parent, "Can't open selected batch", "Error", JOptionPane.ERROR_MESSAGE);
                       }
                       else {
                          Log.quit("ProjectSelectionDialog:" + " unexpected message type: " + action);
                       }
                    }

                 });
         task.enqueue(this);
      }
      else {
         final ClientTask task = new TaskOpenBatch(batchId, projectId, activity);
         task.setCallback(new Runnable()
                 {

                    public void run()
                    {
                       Element reply = (Element) task.getResult();
                       SplitPaneViewer viewer = SplitPaneViewer.getInstance();

                       int batchID = Integer.parseInt(reply.getAttribute(A_BATCH_ID));
                       int projectID = Integer.parseInt(reply.getAttribute(A_PROJECT_ID));
                       int activeGroup = Integer.parseInt(reply.getAttribute(A_GROUP));
                       String project = reply.getAttribute(A_PROJECT_NAME);
                       String splitDocuments = reply.getAttribute(A_SPLIT_DOCUMENTS);
                       viewer.setParent(parent);
                       viewer.setBatchId(batchID);
                       viewer.setActiveGroup(activeGroup);
                       viewer.initializeForProject(project, projectID, activity, splitDocuments);
                       viewer.setVisible(true);
                       viewer.timerDemo.resume(duration);
                       Global.mainWindow = viewer;
                       dispose();
                    }

                 });
         task.enqueue(this);
      }

   }

   //Invoked when activity is  QA.

   private void openViewerForQA(String projectName, int projId, String splitDocuments, int activeGroup)
   {
      SplitPaneViewer viewer = SplitPaneViewer.getInstance();
      viewer.setVolumeId(volumeId);
      viewer.setParent(parent);
      viewer.setActiveGroup(activeGroup);
      viewer.initializeForProject(projectName, projectId, "QA", splitDocuments);
      viewer.setVisible(true);
      viewer.timerDemo.resume(duration);
      Global.mainWindow = viewer;
      setVisible(false);
      dispose();
   }

   /**
    * @param args the command line arguments
    */
   public static void main(String args[])
   {
      ShowBreakDialog dialog = new ShowBreakDialog(new javax.swing.JFrame(), status, notes, event_break_id);
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables

   private javax.swing.JButton jButton1;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private TimerDemo timerDemo;
   // End of variables declaration//GEN-END:variables

   private JTextArea notesArea;
}
