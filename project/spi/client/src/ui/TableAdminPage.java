/* $Header: /home/common/cvsarea/ibase/dia/src/ui/TableAdminPage.java,v 1.17.6.3 2006/03/29 13:54:20 nancy Exp $ */
/*
 * TableAdminPage.java
 *
 * Created on April 6, 2004, 4:11 AM
 */
package ui;

import beans.AddEditTablespec;
import beans.SweepTablevalue;
import beans.ToolTipText;
import client.ClientTask;
import client.Global;
import client.TaskSendTablespec;
import common.Log;
import common.TablespecData;
import model.SQLManagedTableModel;
import model.ManagedTableModel;
import model.ManagedTableSorter;
import ui.AdminFrame;


import java.awt.Point;
import java.awt.event.MouseEvent;
import javax.swing.ListSelectionModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;


/**
 * On the AdminFrame, the Tables page shows all tables defined in DIA.
 * From this screen, the user may Add, Edit or Delete a table 
 * (<code>tablespec</code>) or sweep the database and table values and
 * edit the table values. Sweep Database is available only to those tables
 * defined for a specific project.
 * 
 * @author  Nancy McCall
 */
public class TableAdminPage extends ui.AbstractPage
{

   SweepTablevalue sweepDialog = null;

   /**
     * Creates new form TableAdminPage.
     * @param frame the frame in which to place this screen
     */
   public TableAdminPage(AdminFrame frame)
   {
      super(frame);
      initComponents();

      addButton.setEnabled(true);
      tablespecTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
      tablespecTable.getSelectionModel().addListSelectionListener(new ListSelectionListener()
              {

                 public void valueChanged(ListSelectionEvent e)
                 {
                    //Ignore extra messages.
                    if (e.getValueIsAdjusting()) {
                       return;
                    }

                    ListSelectionModel lsm =
                            (ListSelectionModel) e.getSource();
                    if (lsm.isSelectionEmpty()) {
                       //no rows are selected
                       editButton.setEnabled(false);
                       sweepButton.setEnabled(false);
                       editTableButton.setEnabled(false);
                       deleteButton.setEnabled(false);
                    }
                    else {
                       editButton.setEnabled(true);
                       editTableButton.setEnabled(true);
                       deleteButton.setEnabled(true);
                       if (Global.theServerConnection.getPermissionAdminEdit()) {
                          int row = tablespecTable.getSelectedRow();
                          if (row > -1) {
                             if (((String) ((ManagedTableModel) tablespecTable.getModel()).getValueAt(row, 2)).equals("<All Projects>")) {
                                sweepButton.setEnabled(false);
                             }
                             else {
                                sweepButton.setEnabled(true);
                             }
                          }
                          else {
                             sweepButton.setEnabled(false);
                          }
                       }
                       else {
                          sweepButton.setEnabled(false);
                       }
                    }
                 }

              });
   }

   /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        jPanel2 = new javax.swing.JPanel();
        topPane = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        editTableButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        tablespecScrollPane = new javax.swing.JScrollPane();
        tablespecTable = new TablespecTableClass();
        bottomPane = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        editButton = new javax.swing.JButton();
        sweepButton = new javax.swing.JButton();

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");
        exitMenuItem.setMnemonic('E');
        exitMenuItem.setText("Exit");
        exitMenuItem.setToolTipText("Exit program.");
		exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(1, 0, 20, 0));

        addButton.setText("Add Table");
        addButton.setToolTipText("Create a new table.");
        addButton.setFocusable(false);
        addButton.setEnabled(false);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jPanel3.add(addButton);

        editTableButton.setText("Edit Table");
        editTableButton.setToolTipText("Edit the selected table.");
        editTableButton.setFocusable(false);
        editTableButton.setEnabled(false);
        editTableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTableButtonActionPerformed(evt);
            }
        });

        jPanel3.add(editTableButton);

        deleteButton.setText("Delete Table");
        deleteButton.setToolTipText("Delete the selected table.");
        deleteButton.setFocusable(false);
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jPanel3.add(deleteButton);

        topPane.add(jPanel3);

        jPanel2.add(topPane, java.awt.BorderLayout.NORTH);

        tablespecScrollPane.setPreferredSize(new java.awt.Dimension(753, 503));
        tablespecTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tablespecTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Table Name", "Type", "Project", "Required", "Updateable", "Model Table"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablespecTable.setFocusable(false);
        tablespecTable.setIntercellSpacing(new java.awt.Dimension(2, 1));
        tablespecTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablespecTableMouseClicked(evt);
            }
        });

        tablespecScrollPane.setViewportView(tablespecTable);

        jPanel2.add(tablespecScrollPane, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0, 20, 0));

        editButton.setMnemonic('E');
        editButton.setText("Edit Values");
        editButton.setToolTipText("Add or edit values for the selected table.");
        editButton.setFocusable(false);
        editButton.setEnabled(false);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        jPanel1.add(editButton);

        sweepButton.setMnemonic('S');
        sweepButton.setText("Sweep Database");
        sweepButton.setToolTipText("Show database values of the type defined in the selected table.");
        sweepButton.setFocusable(false);
        sweepButton.setEnabled(false);
        sweepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sweepButtonActionPerformed(evt);
            }
        });

        jPanel1.add(sweepButton);

        bottomPane.add(jPanel1);

        jPanel2.add(bottomPane, java.awt.BorderLayout.SOUTH);

        add(jPanel2, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
       int row = tablespecTable.getSelectedRow();
       if (row > -1) {
          TablespecData tablespecData = new TablespecData();
          tablespecData.tablespec_id = ((ManagedTableModel) tablespecTable.getModel()).getRowId(row); // Tablespec_id
          tablespecData.table_name = (String) ((ManagedTableModel) tablespecTable.getModel()).getValueAt(row, 0);

          Object[] options = {"Yes", "No"};
          int ok = JOptionPane.showOptionDialog(deleteButton,
                  "Do you want to delete this table: " + tablespecData.table_name, "Delete Verification",
                  JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
                  null, options, options[1]);

          if (ok == JOptionPane.YES_OPTION) {
             tablespecData.table_type = "";
             tablespecData.project_id = 0;
             tablespecData.requirement = "";
             tablespecData.updateable = "";

             final ClientTask task =
                     new TaskSendTablespec(tablespecData);
             task.setCallback(new Runnable()
                     {

                        public void run()
                        {
                           String task_ok = (String) task.getResult();
                           if (task_ok.equals(common.msg.MessageConstants.T_OK)) {
                           }
                           else {
                              JOptionPane.showMessageDialog(deleteButton,
                                      "Delete failed: " + task_ok,
                                      "Delete Error",
                                      JOptionPane.ERROR_MESSAGE);
                           }
                        }

                     });
             task.enqueue(this);
          }
       }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void editTableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTableButtonActionPerformed
       try {
          int row = tablespecTable.getSelectedRow();
          if (row > -1) {
             AddEditTablespec tablespecDialog;
             tablespecDialog = new AddEditTablespec(this, "editTable", ((ManagedTableModel) tablespecTable.getModel()).getRowId(row)); // Tablespec_id
             tablespecDialog.setModal(true);
             tablespecDialog.show();
          }
       } catch (Throwable th) {
          Log.quit(th);
       }
    }//GEN-LAST:event_editTableButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
       try {
          AddEditTablespec tablespecDialog;
          tablespecDialog = new AddEditTablespec(this, 0);
          tablespecDialog.setModal(true);
          tablespecDialog.show();
       } catch (Throwable th) {
          Log.quit(th);
       }
    }//GEN-LAST:event_addButtonActionPerformed

    private void sweepButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sweepButtonActionPerformed
       try {
          loadSweepTablevalue();
       } catch (Throwable th) {
          Log.quit(th);
       }
    }//GEN-LAST:event_sweepButtonActionPerformed

    private void tablespecTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablespecTableMouseClicked
       try {
          if (evt.getClickCount() > 1) {
             // double-click on a row
             editButton.doClick();
          }
       } catch (Throwable th) {
          Log.quit(th);
       }
    }//GEN-LAST:event_tablespecTableMouseClicked

   private class TablespecTableClass extends JTable
   {

      public String getToolTipText(MouseEvent event)
      {
         return ToolTipText.getToolTipText(event, tablespecTable);
      }

      public Point getToolTipLocation(MouseEvent event)
      {
         return ToolTipText.getToolTipLocation(event, tablespecTable);
      }

   }

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
       try {
          exitForm();
       } catch (Throwable th) {
          Log.quit(th);
       }
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
       try {
          loadTablespecDialog();
       } catch (Throwable th) {
          Log.quit(th);
       }
    }//GEN-LAST:event_editButtonActionPerformed

   private void loadSweepTablevalue()
   {
      int i = tablespecTable.getSelectedRow();
      //Log.print("(TableAdminPage).sweepButton table selection is " + ((ManagedTableModel)tablespecTable.getModel()).getRowId(i));
      if (sweepDialog != null && sweepDialog.isVisible()) {
         // allow only one dialog
         return;
      }
      sweepDialog = new SweepTablevalue(this, ((ManagedTableModel) tablespecTable.getModel()).getRowId(i)); // Tablespec_id
        //sweepDialog.setModal(true);
      sweepDialog.show();
   }

   private void loadTablespecDialog()
   {
      int i = tablespecTable.getSelectedRow();
      //Log.print("(TableAdminPage).editButton table selection is " + ((ManagedTableModel)tablespecTable.getModel()).getRowId(i));
      AddEditTablespec tablespecDialog = new AddEditTablespec(this, ((ManagedTableModel) tablespecTable.getModel()).getRowId(i)); // Tablespec_id
      tablespecDialog.setModal(true);
      tablespecDialog.show();
   }

   private boolean crossFieldEdits()
   {
      return true;
   }

   /**
     * Check that it's OK to exit the current page.  Subclasses must override this to provide a
     * page-dependent check.
     * @return true if it's OK to exit.  If field cancels save/no-save/cancel dialog,
     *         false is returned.
     */
   protected boolean exitPageCheck()
   {
      // TBD
      return true;
   }

   /** Get the menu bar for the current page.  Subclasses must override this to provide a
     * page-dependent menu bar.
     */
   protected javax.swing.JMenuBar getPageJMenuBar()
   {
      return menuBar;
   }

   /**
     * Perform page initialization.  Subclasses must override this to provide any
     * required page-dependent initialization.
     */
   protected void tabSelected()
   {
      Log.print("TableAdminPage tabSelected");
      String sqlname = (Global.theServerConnection.getPermissionAdmin()
              ? "TableAdminPage.tablespecTable"
              : "TableAdminPage.tablespecTableTL");

      SQLManagedTableModel sqlManagedTableModel = SQLManagedTableModel.makeInstance(sqlname,
              tablespecTable.getModel());
      tablespecTable.setModel(new ManagedTableSorter(0, sqlManagedTableModel));
      ManagedTableModel model = (ManagedTableModel) tablespecTable.getModel();
      model.register();
   }
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel bottomPane;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JButton editTableButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton sweepButton;
    private javax.swing.JScrollPane tablespecScrollPane;
    private javax.swing.JTable tablespecTable;
    private javax.swing.JPanel topPane;
    // End of variables declaration//GEN-END:variables

}
