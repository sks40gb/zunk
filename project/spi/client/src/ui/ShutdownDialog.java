/* $Header: /home/common/cvsarea/ibase/dia/src/ui/ShutdownDialog.java,v 1.13 2005/05/03 20:07:00 weaston Exp $ */
/*
 * Created on November 3, 2003, 12:17 PM
 */

package ui;

import common.Log;
import common.msg.MessageConstants;
import common.msg.MessageWriter;
import client.ClientTask;
import client.Global;
import client.ServerConnection;
import client.Sql;

import java.io.IOException;
import java.sql.ResultSet;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import org.w3c.dom.Element;

/**
 * NOT CURRENTLY USED.
 * @author  Bill
 */
public class ShutdownDialog extends javax.swing.JDialog implements MessageConstants {

    final private static int COUNT_COLUMN = 1;  // column containing batch count
    final private static int PROJECT_COLUMN = 2;  // project_id col. (hidden)
    final private static int COUNT_WIDTH = 80;  // preferred width of count column

    final private ServerConnection scon = Global.theServerConnection;
    private int selectedBatchId = 0;
    // The client task to handle interaction with the server for this dialog
    private ClientTask task;
    private JFrame parent;
      
    /** Creates new form ShutdownDialog */
    public ShutdownDialog(JFrame parent) {
        super(parent, true);
        this.parent = parent;
        initComponents();
        
        // set cancelButton to respond to enter key
        // user must explicitly select OK for shutdown
        this.getRootPane().setDefaultButton(cancelButton);
    }
   
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        confirmShutdownPanel = new javax.swing.JPanel();
        confirmShutdownTitle = new javax.swing.JLabel();
        messageArea = new javax.swing.JTextArea();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Project Selection");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        confirmShutdownPanel.setLayout(new java.awt.GridBagLayout());

        confirmShutdownPanel.setBorder(new javax.swing.border.CompoundBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(40, 40, 40, 40)), new javax.swing.border.CompoundBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED), new javax.swing.border.EmptyBorder(new java.awt.Insets(40, 40, 40, 40)))));
        confirmShutdownPanel.setMinimumSize(new java.awt.Dimension(800, 500));
        confirmShutdownPanel.setPreferredSize(new java.awt.Dimension(800, 500));
        confirmShutdownTitle.setBackground(new java.awt.Color(204, 204, 204));
        confirmShutdownTitle.setFont(new java.awt.Font("Dialog", 1, 24));
        confirmShutdownTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        confirmShutdownTitle.setText("Confirm Server Shutdown");
        confirmShutdownTitle.setAlignmentX(0.5F);
        confirmShutdownTitle.setMaximumSize(new java.awt.Dimension(299, 60));
        confirmShutdownTitle.setMinimumSize(new java.awt.Dimension(400, 60));
        confirmShutdownTitle.setPreferredSize(new java.awt.Dimension(400, 60));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = -119;
        gridBagConstraints.ipady = -17;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        confirmShutdownPanel.add(confirmShutdownTitle, gridBagConstraints);

        // null inherits background from parent
        messageArea.setBackground(null);
        messageArea.setColumns(50);
        messageArea.setEditable(false);
        messageArea.setLineWrap(true);
        messageArea.setRows(2);
        messageArea.setText("Server process will stop accepting new connections.  It will shut down when all users have terminated their sessions.  You may start a new server while waiting for termination.");
        messageArea.setWrapStyleWord(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        confirmShutdownPanel.add(messageArea, gridBagConstraints);

        buttonPanel.setLayout(new java.awt.GridLayout(1, 0, 60, 0));

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(okButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(cancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        confirmShutdownPanel.add(buttonPanel, gridBagConstraints);

        getContentPane().add(confirmShutdownPanel, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        try {
            // Add your handling code here:
            Log.print("ShutdownDialog: Cancel pressed");
            setVisible(false);
            dispose();
            parent.setVisible(true);
        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        try {
            // Add your handling code here:
            Log.print("ShutdownDialog: OK pressed");
            final ClientTask task = new TaskShutdown();
            task.setCallback(new Runnable() {
                    public void run() {
                        //closeDialog(null);
                        setVisible(false);
                        dispose();
                        parent.setVisible(true);
                    }
                });
            task.enqueue(this);
        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_okButtonActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        System.exit(0);
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new ShutdownDialog(new JFrame()).setVisible(true);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel confirmShutdownPanel;
    private javax.swing.JLabel confirmShutdownTitle;
    private javax.swing.JTextArea messageArea;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
    
    // A task to handle server interaction for this dialog
    private class TaskShutdown extends ClientTask {

        public void run() throws IOException {
            MessageWriter writer;
            writer = scon.startMessage(T_SHUTDOWN);
            writer.endElement();
            writer.close();

            Element reply = scon.receiveMessage();

            final ResultSet rs2 = Sql.resultFromXML(reply);
            if (T_OK.equals(reply.getNodeName())) {
            } else if (T_FAIL.equals(reply.getNodeName())) {
                Log.quit("ShutdownDialog: "+reply);
            } else {
                Log.quit("ShutdownDialog: unexpected message type: "
                         +reply.getNodeName());
            }
        }
    }
}
