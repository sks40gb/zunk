/* $Header: /home/common/cvsarea/ibase/dia/src/ui/TableViewer.java,v 1.18.2.2 2006/03/29 14:27:55 nancy Exp $ */
/*
 * TableViewer.java
 *
 * Created on October 12, 2003, 2:28 PM
 */

package ui;

import model.SumTableModel;
import beans.TableSorter;

import java.awt.Component;
import java.awt.Frame;
import javax.swing.JDialog;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;

/**
 * This JDialog formats and shows the data given in the <code>setModel()</code>
 * and <code>setReportHeading()</code> methods.  The report may be printed or
 * exported from this dialog.
 * @author  Bill
 */
public class TableViewer extends JDialog {

    SumTableModel model;
    String[] paramNames;
    String[] paramDisplay;
    private Frame parent; 
    
    /**
     * Creates new form TableViewer.
     */
    public TableViewer(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        parent.setEnabled(false);
        this.parent = parent;
        initComponents();
        // Add a renderer for Float columns (used for percents)
        // (Without this renderer, the table would not show a decimal
        // place when the percentage is an exact integer)
        table.setDefaultRenderer(Float.class,
                                 new DefaultTableCellRenderer()
            {
                public Component getTableCellRendererComponent(JTable table,
                                                               Object value,
                                                               boolean isSelected,
                                                               boolean hasFocus,
                                                               int row,
                                                               int column)
                {
                    if (value != null) {
                        setValue(value.toString());
                    } else {
                        setValue(null);
                    }
                    setHorizontalAlignment(SwingConstants.RIGHT);
                    return this;
                }
            });
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        mainPanel = new javax.swing.JPanel();
        titlePane = new javax.swing.JPanel();
        titleText = new javax.swing.JTextArea();
        paramDisplayArea = new javax.swing.JTextArea();
        scrollPanel = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        closeButtonPane = new javax.swing.JPanel();
        buttonPane = new javax.swing.JPanel();
        printButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Report Viewer");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        mainPanel.setLayout(new java.awt.BorderLayout());

        mainPanel.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(20, 20, 20, 20)));
        mainPanel.setPreferredSize(new java.awt.Dimension(780, 500));
        titlePane.setLayout(new javax.swing.BoxLayout(titlePane, javax.swing.BoxLayout.Y_AXIS));

        titleText.setEditable(false);
        titleText.setFont(new java.awt.Font("Dialog", 1, 14));
        titleText.setText("titleText");
        titleText.setOpaque(false);
        titlePane.add(titleText);

        paramDisplayArea.setEditable(false);
        paramDisplayArea.setOpaque(false);
        titlePane.add(paramDisplayArea);

        mainPanel.add(titlePane, java.awt.BorderLayout.NORTH);

        scrollPanel.setPreferredSize(new java.awt.Dimension(780, 500));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        scrollPanel.setViewportView(table);

        mainPanel.add(scrollPanel, java.awt.BorderLayout.CENTER);

        closeButtonPane.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(12, 1, 1, 1)));
        buttonPane.setLayout(new java.awt.GridLayout(1, 0, 15, 0));

        printButton.setText("Print");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        buttonPane.add(printButton);

        exportButton.setText("Export");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        buttonPane.add(exportButton);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        buttonPane.add(closeButton);

        closeButtonPane.add(buttonPane);

        mainPanel.add(closeButtonPane, java.awt.BorderLayout.SOUTH);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        System.out.println("printButtonActionPerformed title="+titleText.getText());
        TablePrinter.doPrint(model, titleText.getText(), paramNames, paramDisplay);
    }//GEN-LAST:event_printButtonActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        TableExporter.export(this, model);
    }//GEN-LAST:event_exportButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        closeDialog(null);
        parent.setEnabled(true);
    }//GEN-LAST:event_closeButtonActionPerformed

    /**
     * Remember the given title and parameters to display and print on the report.
     * @param title the String text to print as the title of the report
     * @param paramNames the String names of the parameters to print on the report
     * @param paramDisplay the String formatted selection parameters to print on the report
     */
    public void setReportHeading(String title, String[] paramNames, String[] paramDisplay) {
        //Log.print("(TableViewer.setReportHeading)");
        titleText.setText(title);
        this.paramNames = paramNames;
        this.paramDisplay = paramDisplay;
        // remove duplicates
        for (int i = 0; i < paramNames.length; i++) {
            for (int j = i+1; j < paramNames.length; j++) {
                if (paramNames[i].equals(paramNames[j])) {
                    // a parameter is needed multiple times for the sql,
                    // but should not be printed on the report.
                    paramNames = (String[])common.DynamicArrays.remove((Object[])paramNames, j);
                }
            }
        }
        if (paramNames != null && paramNames.length > 0) {
            StringBuffer buffer = new StringBuffer();
            for (int i = 0; i < paramNames.length; i++) {
                buffer.append(paramNames[i]);
                buffer.append(": ");
                buffer.append(paramDisplay[i]);
                buffer.append("\n");
            }
            paramDisplayArea.setText(buffer.toString());
        }
    }
    
    /**
     * Closes the dialog.
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
//        setVisible(false);
        parent.setEnabled(true);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * Set the TableModel containing the data for this report.
     * A SumTableModel is created, containing total lines, and
     * preferred column widths are computed as the maximum
     * preferred width of any value in the column.
     */
    public void setModel(TableModel model) {
        //Log.print("(TableViewer.setModel)");
        this.model = new SumTableModel(model);
        sorter = new TableSorter(this.model);
        //table.setModel(this.model);
        table.setModel(sorter);
        sorter.setTableHeader(table.getTableHeader());
        // ends here
        this.model.computeColumnWidths(table);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPane;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel closeButtonPane;
    private javax.swing.JButton exportButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextArea paramDisplayArea;
    private javax.swing.JButton printButton;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JTable table;
    private javax.swing.JPanel titlePane;
    private javax.swing.JTextArea titleText;
    private TableSorter sorter;
    // End of variables declaration//GEN-END:variables
    
}
