/* $Header: /home/common/cvsarea/ibase/dia/src/ui/QACloseDialog.java,v 1.6 2005/01/05 16:08:38 weaston Exp $ */
/*
 * QACloseDialog.java
 */

package ui;

import beans.QACommentsDialog;
import client.ClientTask;
import client.TaskExecuteQuery;
import client.TaskCloseQA;
import common.Log;
import model.TableComboModel;
import model.ResultSetTableModel;

import java.awt.Component;
import java.sql.ResultSet;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.table.TableModel;

/**
 * Dialog to close or reject QA batches.
 * @author  bill
 */
public class QACloseDialog extends javax.swing.JDialog {
    
    private Component parentItem;
    private boolean reject;
    
    private TableModel teamModel;
    private TableModel coderModel;
    
    /**
     * Creates new form QACloseDialog.
     * The form is positioned relative to parentItem.  (Note:  If parentItem is not visible,
     * form is centered on the screen.  If this dialog is shown as an action for a subment,
     * the submenu is not visible, so the form will be centered; thus we position relative
     * to the File menu, not the Add to QA Sample submenu.*/
    public QACloseDialog(JFrame owner, Component parentItem, boolean reject) {
        super(owner, /* modal => */ true);
        this.parentItem = parentItem;
        this.reject = reject;
        initComponents();
        if (reject) {
            closeRejectLabel.setText("REJECT QA batches for:");
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        selectGroup = new javax.swing.ButtonGroup();
        radioGroup = new javax.swing.ButtonGroup();
        outerPanel = new javax.swing.JPanel();
        closeRejectLabel = new javax.swing.JLabel();
        allButton = new javax.swing.JRadioButton();
        teamButton = new javax.swing.JRadioButton();
        teamCombo = new javax.swing.JComboBox();
        coderButton = new javax.swing.JRadioButton();
        coderCombo = new javax.swing.JComboBox();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(parentItem);
        outerPanel.setLayout(new java.awt.GridBagLayout());

        outerPanel.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(40, 40, 40, 40)));
        closeRejectLabel.setFont(new java.awt.Font("MS Sans Serif", 0, 14));
        closeRejectLabel.setText("Close QA batches for:");
        closeRejectLabel.setPreferredSize(new java.awt.Dimension(211, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        outerPanel.add(closeRejectLabel, gridBagConstraints);

        allButton.setText("All Teams");
        radioGroup.add(allButton);
        allButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkEnable(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        outerPanel.add(allButton, gridBagConstraints);

        teamButton.setText("Team:");
        teamButton.setToolTipText("Select from current batches for team");
        radioGroup.add(teamButton);
        teamButton.setEnabled(false);
        teamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkEnable(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        outerPanel.add(teamButton, gridBagConstraints);

        teamCombo.setEnabled(false);
        teamCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboItemChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        outerPanel.add(teamCombo, gridBagConstraints);

        coderButton.setText("Coder: ");
        coderButton.setToolTipText("Select from current batches for coder");
        radioGroup.add(coderButton);
        coderButton.setEnabled(false);
        coderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkEnable(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        outerPanel.add(coderButton, gridBagConstraints);

        coderCombo.setEnabled(false);
        coderCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboItemChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        outerPanel.add(coderCombo, gridBagConstraints);

        buttonPanel.setLayout(new java.awt.GridLayout(1, 0, 30, 0));

        buttonPanel.setOpaque(false);
        okButton.setText("OK");
        okButton.setEnabled(false);
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(okButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(cancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        outerPanel.add(buttonPanel, gridBagConstraints);

        getContentPane().add(outerPanel, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void comboItemChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboItemChanged
        checkEnable(null);
    }//GEN-LAST:event_comboItemChanged

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Set controls enabled, as appropriate
    private void checkEnable(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkEnable
        okButton.setEnabled(allButton.isSelected()
                            || teamButton.isSelected() && teamCombo.getSelectedIndex() >= 0
                            || coderButton.isSelected() && coderCombo.getSelectedIndex() >= 0);
        teamCombo.setEnabled(teamButton.isSelected());
        coderCombo.setEnabled(coderButton.isSelected());        
    }//GEN-LAST:event_checkEnable

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        try {
            String teamsIdString = null;
            String usersIdString = null;
            if (teamButton.isSelected()) {
                System.out.println("selected team index "+ teamCombo.getSelectedIndex());
                teamsIdString = (String) teamModel
                        .getValueAt(teamCombo.getSelectedIndex(), 1);
            } else if (coderButton.isSelected()) {
                System.out.println("selected coder index "+ coderCombo.getSelectedIndex());
                usersIdString = (String) coderModel
                        .getValueAt(coderCombo.getSelectedIndex(), 1);
            }

            String comments = "";
            if (reject) {
                comments = QACommentsDialog.showDialog(this);
                if (comments == null) {
                    // User cancelled on commments screen
                    this.dispose();
                    return;
                }
            }

            final ClientTask task = new TaskCloseQA(
                    teamsIdString, usersIdString, reject, comments);
            task.setCallback(new Runnable() {
                    public void run() {
                        Object batchCountString = task.getResult();
                        Log.print("QA close/reject "+batchCountString);

                        JDialog mailDialog = new QAMailDialog(QACloseDialog.this,
                                (! reject), batchCountString);
                        mailDialog.setVisible(true);

                        QACloseDialog.this.dispose();
                    }
                });
            task.enqueue();
        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_okButtonActionPerformed
    
    /**
     * Load models and make dialog visible.
     */
    public void setVisible(boolean flag) {
        if (flag) {
            final ClientTask task1 = new TaskExecuteQuery("QACloseDialog.coder");
            task1.setCallback(new Runnable() {
                    public void run() {
                        coderModel = new ResultSetTableModel(
                            (ResultSet) task1.getResult());
                        coderCombo.setModel(new TableComboModel(coderModel));
                        coderButton.setEnabled(true);
                    }
                });
            task1.enqueue();
            final ClientTask task2 = new TaskExecuteQuery("QACloseDialog.team");
            task2.setCallback(new Runnable() {
                    public void run() {
                        teamModel = new ResultSetTableModel(
                            (ResultSet) task2.getResult());
                        teamCombo.setModel(new TableComboModel(teamModel));
                        teamButton.setEnabled(true);
                    }
                });
            task2.enqueue();
        }
        super.setVisible(flag);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton allButton;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel closeRejectLabel;
    private javax.swing.JRadioButton coderButton;
    private javax.swing.JComboBox coderCombo;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel outerPanel;
    private javax.swing.ButtonGroup radioGroup;
    private javax.swing.ButtonGroup selectGroup;
    private javax.swing.JRadioButton teamButton;
    private javax.swing.JComboBox teamCombo;
    // End of variables declaration//GEN-END:variables
    
}
