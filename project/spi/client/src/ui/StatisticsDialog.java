/* $Header: /home/common/cvsarea/ibase/dia/src/ui/StatisticsDialog.java,v 1.11.6.1 2006/03/29 13:54:20 nancy Exp $ */
/*
 * StatisticsDialog.java
 *
 * Created on November 5, 2004
 */

package ui;

import beans.ComposeDialog;
import beans.LIntegerField;
import client.ClientTask;
import client.TaskExecuteQuery;
import common.Log;
import model.ResultSetTableModel;
import model.SumTableModel;

import java.sql.ResultSet;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.table.TableModel;

/**
 * This dialog is called from <code>ui.SplitPaneViewer</code> following
 * a QA close of a batch to show update and error statistics for the batch.
 * @author  Bill
 */
public class StatisticsDialog extends JDialog {

    String whichStatus;
    int holdBatchId;
    String coderName="";
    boolean acceptingBatch;
    String batchName;
    TableModel errorRateModel;

    boolean mailRequested = false;
    boolean modelLoaded = false;
    
    /** Creates new form StatisticsDialog */
    public StatisticsDialog(java.awt.Window parent,
                            String whichStatus,
                            int batchId,
                            boolean acceptingBatch,
                            String batchName)
    {
        super((JFrame) parent, /* modal => */ true);
        this.whichStatus = whichStatus;
        this.holdBatchId = batchId;
        this.acceptingBatch = acceptingBatch;
        this.batchName = batchName;
        initComponents();
        setLocationRelativeTo(parent);
        System.out.println("whichStatus="+whichStatus+" acceptingBatch="+acceptingBatch);
        if ("CodingQC".equals(whichStatus)) {
            // retain mailButton
            if (acceptingBatch) {
                System.out.println("removing requeuePane");
                closeButtonPane.remove(requeuePane);
            }
        } else if ("UQC".equals(whichStatus)) {
            // retain mailButton
                System.out.println("removing requeuePane");
            closeButtonPane.remove(requeuePane);
        } else if ("Masking".equals(whichStatus)) {
            // retain mailButton
            System.out.println("removing requeuePane");
            closeButtonPane.remove(requeuePane);            
        } else {
            assert ! "QA".equals(whichStatus);
            assert acceptingBatch;
            buttonPane.remove(mailButton);
                System.out.println("removing requeuePane");
            closeButtonPane.remove(requeuePane);
        }
        titleText.setText(acceptingBatch
                           ? "Batch has been closed."
                           : "Batch has been REJECTED.");
        requeuePane.setEnabled(false); // TEMPORARY
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        mainPanel = new javax.swing.JPanel();
        titlePane = new javax.swing.JPanel();
        titleText = new javax.swing.JTextArea();
        paramDisplayArea = new javax.swing.JTextArea();
        scrollPanel = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        closeButtonPane = new javax.swing.JPanel();
        buttonPane = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        mailButton = new javax.swing.JButton();
        requeuePane = new javax.swing.JPanel();
        requeueLabel = new javax.swing.JLabel();
        hoursField = new LIntegerField(2);
        hoursLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Document and Page Counts");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        mainPanel.setLayout(new java.awt.BorderLayout());

        mainPanel.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(20, 20, 20, 20)));
        mainPanel.setPreferredSize(new java.awt.Dimension(780, 500));
        titlePane.setLayout(new javax.swing.BoxLayout(titlePane, javax.swing.BoxLayout.Y_AXIS));

        titleText.setEditable(false);
        titleText.setFont(new java.awt.Font("Dialog", 1, 18));
        titleText.setText("titleText");
        titleText.setOpaque(false);
        titlePane.add(titleText);

        paramDisplayArea.setEditable(false);
        paramDisplayArea.setOpaque(false);
        titlePane.add(paramDisplayArea);

        mainPanel.add(titlePane, java.awt.BorderLayout.NORTH);

        scrollPanel.setPreferredSize(new java.awt.Dimension(780, 500));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        scrollPanel.setViewportView(table);

        mainPanel.add(scrollPanel, java.awt.BorderLayout.CENTER);

        closeButtonPane.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(12, 1, 1, 1)));
        buttonPane.setLayout(new java.awt.GridLayout(1, 0, 25, 0));

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        buttonPane.add(okButton);

        mailButton.setText("Mail");
        mailButton.setToolTipText("Send mail");
        mailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailButtonActionPerformed(evt);
            }
        });

        buttonPane.add(mailButton);

        closeButtonPane.add(buttonPane);

        requeuePane.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(0, 15, 0, 0)));
        requeueLabel.setText("Requeue after");
        requeuePane.add(requeueLabel);

        hoursField.setColumns(2);
        requeuePane.add(hoursField);

        hoursLabel.setText("hours");
        requeuePane.add(hoursLabel);

        closeButtonPane.add(requeuePane);

        mainPanel.add(closeButtonPane, java.awt.BorderLayout.SOUTH);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void mailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailButtonActionPerformed
        mailButton.setEnabled(false); // avoid second click
        okButton.setEnabled(false); // avoid second click
        mailRequested = true;
        doSendMail();
    }//GEN-LAST:event_mailButtonActionPerformed

    private void doSendMail() {
        try {
            if (! mailRequested || ! modelLoaded) {
                // wait until second call - both have model loaded and clicked mail
                return;
            }
            mailRequested = false;
            modelLoaded = false;

            String subject = batchName;
            if (! acceptingBatch) {
                subject += " REJECTED";
            }
            StringBuffer body = new StringBuffer();
            body.append("Re: ");
            body.append(subject);
            body.append("\n");
            for (int i = 0; i < errorRateModel.getRowCount(); i++) {
                body.append(errorRateModel.getValueAt(i,0));
                body.append(" User: ");
                body.append(errorRateModel.getValueAt(i,1));
                body.append(" Rework? ");
                body.append(errorRateModel.getValueAt(i,2));
                body.append(" Fields: ");
                body.append(errorRateModel.getValueAt(i,3));
                if (! "0".equals(errorRateModel.getValueAt(i,3))) {
                    body.append(" Pct changed: ");
                    body.append(errorRateModel.getValueAt(i,4));
                    body.append(" Pct errors: ");
                    body.append(errorRateModel.getValueAt(i,5));
                }
                body.append("\n");
            }

            JDialog dialog = new ComposeDialog(
                    this, // parent
                    true, // modal
                    0, // mailsentId
                    "", // recipientList
                    body.toString(), // textArea
                    "", // prefix
                    subject, // subject
                    "", // dateString
                    "", // sender
                    coderName); // addr
            dialog.setVisible(true);
            this.closeDialog(null);
        } catch (Throwable th) {
            Log.quit(th);
        }
    }

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        closeDialog(null);
    }//GEN-LAST:event_okButtonActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        mailRequested = false;
        modelLoaded = false;
        dispose();
    }//GEN-LAST:event_closeDialog

    /** Set dialog visible state.  When making visible, initiate task
     *  to read model data from server.
     */
    public void setVisible(boolean flag) {
        if (flag) {
            // get session statistics
            final ClientTask task = new TaskExecuteQuery(
                    "session_statistics",
                    Integer.toString(holdBatchId),
                    whichStatus,
                    /* withMetadata => */ true);
            task.setCallback(new Runnable() {
                    public void run() {
                        try {
                            ResultSet rs = (ResultSet) task.getResult();
                            setModel(new ResultSetTableModel(rs));
                        } catch (Throwable th) {
                            Log.quit(th);
                        }
                    }
               });
            task.enqueue();

            if ("CodingQC".equals(whichStatus)
            || "UQC".equals(whichStatus) || "Masking".equals(whichStatus)) {

                // get error statistics
                String sqlName = "session_error_rates";
                final ClientTask task2 = new TaskExecuteQuery(
                    sqlName,
                    Integer.toString(holdBatchId));
                task2.setCallback(new Runnable() {
                        public void run() {
                            try {
                                ResultSet rs2 = (ResultSet) task2.getResult();
                                errorRateModel = new ResultSetTableModel(rs2);
                            } catch (Throwable th) {
                                Log.quit(th);
                            }
                        }
                   });
                task2.enqueue();

                // get coder name
                final ClientTask task3 = new TaskExecuteQuery(
                        "session_coder_name",
                        Integer.toString(holdBatchId));
                task3.setCallback(new Runnable() {
                        public void run() {
                            try {
                                ResultSet rs2 = (ResultSet) task3.getResult();
                                if (rs2.next()) {
                                    coderName = rs2.getString(1);
                                }
                                modelLoaded = true;
                                doSendMail();
                            } catch (Throwable th) {
                                Log.quit(th);
                            }
                        }
                   });
                task3.enqueue();
            }
        }
        super.setVisible(flag);
    }

    /**
     *
     */
    public int getHours() {
        return ((LIntegerField) hoursField).getValue();
    }

    /**
     * Set the TableModel containing the data for this report.
     * A SumTableModel is created, containing total lines, and
     * preferred column widths are computed as the maximum
     * preferred width of any value in the column.
     */
    private void setModel(TableModel model) {
        SumTableModel summedModel = new SumTableModel(model);
        table.setModel(summedModel);
        summedModel.computeColumnWidths(table);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPane;
    private javax.swing.JPanel closeButtonPane;
    private javax.swing.JTextField hoursField;
    private javax.swing.JLabel hoursLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton mailButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton okButton;
    private javax.swing.JTextArea paramDisplayArea;
    private javax.swing.JLabel requeueLabel;
    private javax.swing.JPanel requeuePane;
    private javax.swing.JScrollPane scrollPanel;
    private javax.swing.JTable table;
    private javax.swing.JPanel titlePane;
    private javax.swing.JTextArea titleText;
    // End of variables declaration//GEN-END:variables
    
}
