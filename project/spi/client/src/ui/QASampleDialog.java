/* $Header: /home/common/cvsarea/ibase/dia/src/ui/QASampleDialog.java,v 1.7 2005/01/03 10:50:54 weaston Exp $ */
/*
 * QASampleDialog.java
 *
 * Created on November 13, 2004, 8:07 AM
 */

package ui;

import beans.LIntegerField;
import beans.LNumberField;
import client.ClientTask;
import client.Global;
import client.TaskExecuteQuery;
import client.TaskExecuteUpdate;
import client.TaskQAGroup;
import client.TaskSampleQA;
import model.TableComboModel;
import model.ResultSetTableModel;

import java.awt.Component;
import java.awt.Dimension;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;

/**
 * Dialog to sample additional documents for QA.
 * @author  bill
 */
public class QASampleDialog extends javax.swing.JDialog {
    
    private Component parentItem;
    private JFrame parent;
    private TableModel teamModel;
    private TableModel coderModel;
    private int documentCount = 0;
    private int volumeId = 0;
    private String teamsIdString = null;
    private String usersIdString = null;
    private String fieldIdString = null;
    
    //private boolean sampleButtonEnableChecked = false; // one-time flag
    
    /**
     * Creates new form QASampleDialog.
     * The form is positioned relative to parentItem.  (Note:  If parentItem is not visible,
     * form is centered on the screen.  If this dialog is shown as an action for a subment,
     * the submenu is not visible, so the form will be centered; thus we position relative
     * to the File menu, not the Add to QA Sample submenu.*/
    public QASampleDialog(JFrame owner, Component parentItem) {
        super(owner, /* modal => */ true);
        this.parentItem = parentItem;
        initComponents();      
    }
    
    /**
     * Creates new form QASampleDialog.
     * The form is positioned relative to parentItem.  (Note:  If parentItem is not visible,
     * form is centered on the screen.  If this dialog is shown as an action for a subment,
     * the submenu is not visible, so the form will be centered; thus we position relative
     * to the File menu, not the Add to QA Sample submenu.*/
    public QASampleDialog(JDialog owner, Component parentItem, int volumeId, JFrame parent) {
        super(owner, /* modal => */ true);
        this.parentItem = owner;
        this.volumeId = volumeId;
        this.parent = parent;
        initComponents();
    }
    
    /** This method is called from within the constructor tozs
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        selectGroup = new javax.swing.ButtonGroup();
        radioGroup = new javax.swing.ButtonGroup();
        outerPanel = new javax.swing.JPanel();
        sampleSelectPanel = new javax.swing.JPanel();
        sampleNewButton = new javax.swing.JRadioButton();
        sampleOldButton = new javax.swing.JRadioButton();
        percentPanel = new javax.swing.JPanel();
        selectLabel = new javax.swing.JLabel();
        percent = new LIntegerField(2);
        accuracyPanel = new javax.swing.JPanel();
        accuracyLabel = new javax.swing.JLabel();
        //accuracy = new javax.swing.JTextField();
	accuracy = new LNumberField(2, 1);
        fromLabel = new javax.swing.JLabel();
        allButton = new javax.swing.JRadioButton();
        teamButton = new javax.swing.JRadioButton();
        teamCombo = new javax.swing.JComboBox();
        coderButton = new javax.swing.JRadioButton();
        coderCombo = new javax.swing.JComboBox();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

		setTitle("QA Fixed Percentage");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(parentItem);
        outerPanel.setLayout(new java.awt.GridBagLayout());

        outerPanel.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(40, 40, 40, 40)));
        sampleSelectPanel.setLayout(new javax.swing.BoxLayout(sampleSelectPanel, javax.swing.BoxLayout.Y_AXIS));

        sampleSelectPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        sampleNewButton.setText("Select from QC Complete; move to QA");
        selectGroup.add(sampleNewButton);
        sampleNewButton.setEnabled(false);
        sampleSelectPanel.add(sampleNewButton);

        sampleOldButton.setText("Select from batches currently in QA");
        selectGroup.add(sampleOldButton);
        sampleOldButton.setEnabled(false);
        sampleSelectPanel.add(sampleOldButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        outerPanel.add(sampleSelectPanel, gridBagConstraints);


		accuracyPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        accuracyLabel.setText("Accuracy Required ");
        accuracyPanel.add(accuracyLabel);
		accuracy.setPreferredSize(new Dimension(50,20));
        accuracyPanel.add(accuracy);

		gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 10, 0);
        outerPanel.add(accuracyPanel, gridBagConstraints);


        percentPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        selectLabel.setText("Enter ");
        percentPanel.add(selectLabel);

        percent.setColumns(2);
        percent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkEnable(evt);
            }
        });
        percent.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                percentPropertyChange(evt);
            }
        });

        percentPanel.add(percent);

        fromLabel.setText(" percent from:");
        percentPanel.add(fromLabel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 10, 0);
        outerPanel.add(percentPanel, gridBagConstraints);


		

		
        allButton.setText("All Teams");
        radioGroup.add(allButton);
        allButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkEnable(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        outerPanel.add(allButton, gridBagConstraints);

        teamButton.setText("Team:");
        teamButton.setToolTipText("Select from current batches for team");
        radioGroup.add(teamButton);
        teamButton.setEnabled(false);
        teamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkEnable(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        outerPanel.add(teamButton, gridBagConstraints);

        teamCombo.setEnabled(false);
        teamCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboItemChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        outerPanel.add(teamCombo, gridBagConstraints);

        coderButton.setText("Coder: ");
        coderButton.setToolTipText("Select from current batches for coder");
        radioGroup.add(coderButton);
        coderButton.setEnabled(false);
        coderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkEnable(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        outerPanel.add(coderButton, gridBagConstraints);

        coderCombo.setEnabled(false);
        coderCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboItemChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        outerPanel.add(coderCombo, gridBagConstraints);

        buttonPanel.setLayout(new java.awt.GridLayout(1, 0, 30, 0));

        buttonPanel.setOpaque(false);
        okButton.setText("OK");
        okButton.setEnabled(false);
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(okButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(cancelButton);

		addWindowListener(new java.awt.event.WindowAdapter() {

            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        outerPanel.add(buttonPanel, gridBagConstraints);

        getContentPane().add(outerPanel, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void percentPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_percentPropertyChange
        checkEnable(null);
    }//GEN-LAST:event_percentPropertyChange

    private void comboItemChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboItemChanged
        checkEnable(null);
    }//GEN-LAST:event_comboItemChanged

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        ClientTask task = new TaskExecuteUpdate("SplitPaneViewer.closeMenuItem");
        task.enqueue();
        this.dispose();
        parentItem.setVisible(true);
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Set controls enabled, as appropriate
    private void checkEnable(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkEnable
        okButton.setEnabled(((LIntegerField) percent).getValue() > 0
                            && (allButton.isSelected()
                                || teamButton.isSelected() && teamCombo.getSelectedIndex() >= 0
                                || coderButton.isSelected() && coderCombo.getSelectedIndex() >= 0));
        teamCombo.setEnabled(teamButton.isSelected());
        coderCombo.setEnabled(coderButton.isSelected());        
    }//GEN-LAST:event_checkEnable

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        float accuracyRequired = 0;
        try{
            accuracyRequired = Float.parseFloat(accuracy.getText());
            createFixedSamples(accuracyRequired);
            
        }catch(NumberFormatException NFE){
            JOptionPane.showMessageDialog(
                         this,"Please enter a Valid float value for Accuracy Required"); 
        }
        
        
    }//GEN-LAST:event_okButtonActionPerformed

    public void createFixedSamples(float accuracyRequired){
        int percentValue = ((LIntegerField) percent).getValue();
        
        
        String sampling_for = null;
        boolean newSample = sampleNewButton.isSelected();
        fieldIdString = "General Document Type";
        if (teamButton.isSelected()) {
            sampling_for = "Team";
            System.out.println("selected team index "+ teamCombo.getSelectedIndex());
            teamsIdString = (String) teamModel
                    .getValueAt(teamCombo.getSelectedIndex(), 1);
        } else if (coderButton.isSelected()) {
            sampling_for = "Coder";
            System.out.println("selected coder index "+ coderCombo.getSelectedIndex());
            usersIdString = (String) coderModel
                    .getValueAt(coderCombo.getSelectedIndex(), 1);
        } else{
            sampling_for = "All Teams";
        }
        
        final ClientTask task = new TaskSampleQA(percentValue,
                teamsIdString, usersIdString, newSample,accuracyRequired,sampling_for);
        task.setCallback(new Runnable() {
                public void run() {
                    //Log.print("sample "+task.getResult());
                    try{
                        getSampledGroup((ArrayList)task.getResult());
//                        setDocumentCount(((Integer) task.getResult()).intValue());
                        QASampleDialog.this.dispose();
                        parent.dispose();
                    } catch (Exception ex) {
               ex.printStackTrace();                        
            }
                
                }
            });
        task.enqueue();
    }
    
    public void getSampledGroup(ArrayList value){
    final String projectName = value.get(0).toString();
    final String codersValue = value.get(1).toString();
    final String fieldValues = value.get(2).toString();
       
    final TaskQAGroup task = new TaskQAGroup(volumeId);   
        task.setCallback(new Runnable()
        {
            public void run()
            {
             try {
                    QAGroupAssignPage qa_groupviewer = new QAGroupAssignPage((Map)task.getResult(),projectName,volumeId,codersValue,fieldValues,parent);
                    
                    qa_groupviewer.setVisible(true);
                    Global.mainWindow = qa_groupviewer;
                    setVisible(false);
                    dispose();

                 } catch (Exception ex) {
                   ex.printStackTrace();                        
                }

               }
        });
        task.enqueue(this);  
    }
    /**
     * Return the count of documents added to the sample.
     */
    public int getDocumentCount() {
        return documentCount;
    }
    
    private void setDocumentCount(int count) {
        documentCount = count;
    }
    
    /**
     * Load models and make dialog visible.
     */
    public void setVisible(boolean flag) {
        if (flag) {
            final ClientTask task1 = new TaskExecuteQuery("QASampleDialog.coder", "" +volumeId);
            task1.setCallback(new Runnable() {
                    public void run() {
                        coderModel = new ResultSetTableModel(
                            (ResultSet) task1.getResult());
                        coderCombo.setModel(new TableComboModel(coderModel));
                        coderButton.setEnabled(true);
                        enableSampleButtons();
                    }
                });
            task1.enqueue();
            final ClientTask task2 = new TaskExecuteQuery("QASampleDialog.team", "" +volumeId);
            task2.setCallback(new Runnable() {
                    public void run() {
                        teamModel = new ResultSetTableModel(
                            (ResultSet) task2.getResult());
                        teamCombo.setModel(new TableComboModel(teamModel));
                        teamButton.setEnabled(true);
                    }
                });
            task2.enqueue();
        }
        super.setVisible(flag);
    }

    // Enable new and old sample buttons, depending on whether
    // there are batches in the appropriate status.
    // Note.  We use the coder table rather than the team table
    // because, in principle, there could be a coder without a team.
    // This is called when the coder combo is loaded
    private void enableSampleButtons() {
        for (int i = 0; i < coderModel.getRowCount(); i++) {
            //System.out.println("enableSampleButtons "+i+": "
            //  +coderModel.getValueAt(i, 2)+", "+coderModel.getValueAt(i, 3));
            if ("1".equals(coderModel.getValueAt(i, 2))) {
                sampleNewButton.setEnabled(true);
            }
            if ("1".equals(coderModel.getValueAt(i, 3))) {
                sampleOldButton.setEnabled(true);
            }
        }
        if (! sampleOldButton.isEnabled()) {
            sampleNewButton.setSelected(true);
        } else if (! sampleNewButton.isEnabled()) {
            sampleOldButton.setSelected(true);
        }
    }
    
    
    private void closeDialog(java.awt.event.WindowEvent evt) {
        ClientTask task = new TaskExecuteUpdate("SplitPaneViewer.closeMenuItem");
        task.enqueue();
        this.dispose();
    }
    ///**
    // * @param args the command line arguments
    // */
    //public static void main(String args[]) {
    //    new QASampleDialog(new javax.swing.JFrame()).show();
    //}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton allButton;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JRadioButton coderButton;
    private javax.swing.JComboBox coderCombo;
    private javax.swing.JLabel fromLabel;
	private javax.swing.JLabel accuracyLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel outerPanel;
    private javax.swing.JTextField percent;
    private javax.swing.JPanel percentPanel;
    //private javax.swing.JTextField accuracy;
    private LNumberField accuracy;
    private javax.swing.JPanel accuracyPanel;
    private javax.swing.ButtonGroup radioGroup;
    private javax.swing.JRadioButton sampleNewButton;
    private javax.swing.JRadioButton sampleOldButton;
    private javax.swing.JPanel sampleSelectPanel;
    private javax.swing.ButtonGroup selectGroup;
    private javax.swing.JLabel selectLabel;
    private javax.swing.JRadioButton teamButton;
    private javax.swing.JComboBox teamCombo;
    // End of variables declaration//GEN-END:variables
    
}
