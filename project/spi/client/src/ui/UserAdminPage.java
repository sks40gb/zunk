/* $Header: /home/common/cvsarea/ibase/dia/src/ui/UserAdminPage.java,v 1.29.6.4 2006/03/29 14:27:55 nancy Exp $ */
/*
 * UserAdminPage.java
 *
 * Created on December 14, 2003, 6:17 AM
 */
package ui;

import beans.AddEditUsers;
import beans.ToolTipText;
import client.ClientTask;
import client.TaskSendUsersData;
import common.Log;
import common.UsersData;
import model.SQLManagedTableModel;
import model.ManagedTableModel;
import model.ManagedTableSorter;
import ui.AdminFrame;

import java.awt.Component;

import java.awt.Point;
import java.awt.event.MouseEvent;
import javax.swing.JOptionPane;
import javax.swing.JTable;

import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableColumn;

/**
 * On the AdminFrame, the Userss page shows all users defined in DIA.
 * Users' data can be Added, Edited and Deleted from this page.
 * @see beans.AddEditUsers
 * @see common.UsersData
 *
 * @author  Bill
 */
public final class UserAdminPage extends ui.AbstractPage
{

   /** 
     * Creates new form UserAdminPage.
     * @param frame the frame in which to place this screen
     */
   public UserAdminPage(AdminFrame frame)
   {
      super(frame);
      initComponents();

      // Painted TableModel replaced by ManagedTableModel
        // The painted column names are retained
        // Sort on column 0, user_name
      usersTable.setModel(new ManagedTableSorter(0,
              SQLManagedTableModel.makeInstance("UserAdminPage.usersTable",
              usersTable.getModel())));

      editUserButton.setEnabled(false);
      deleteUserButton.setEnabled(false);

      usersTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
      usersTable.getSelectionModel().addListSelectionListener(new ListSelectionListener()
              {

                 public void valueChanged(ListSelectionEvent e)
                 {
                    //Ignore extra messages.
                    if (e.getValueIsAdjusting()) {
                       return;
                    }

                    ListSelectionModel lsm =
                            (ListSelectionModel) e.getSource();
                    if (lsm.isSelectionEmpty()) {
                       //no rows are selected
                       editUserButton.setEnabled(false);
                       deleteUserButton.setEnabled(false);
                    }
                    else {
                       editUserButton.setEnabled(true);
                       deleteUserButton.setEnabled(true);
                    }
                 }

              });
   }

   /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        userPane = new javax.swing.JPanel();
        usersScrollPane = new javax.swing.JScrollPane();
        usersTable = new UsersTableClass();
        bottomPane = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        editUserButton = new javax.swing.JButton();
        addUserButton = new javax.swing.JButton();
        deleteUserButton = new javax.swing.JButton();

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");
        exitMenuItem.setMnemonic('E');
        exitMenuItem.setText("Exit");
        exitMenuItem.setToolTipText("Exit program.");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setLayout(new java.awt.BorderLayout());

        userPane.setLayout(new java.awt.BorderLayout());

        userPane.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        usersTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        usersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User Name", "Name", "Unitize", "Unitize QC", "Coding", "Coding QC", "QA", "Listing", "Tally", "Team Ldr", "Admin", "Team"
            }
        ));
        usersTable.setFocusable(false);
        usersTable.setIntercellSpacing(new java.awt.Dimension(2, 1));
        usersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usersTableMouseClicked(evt);
            }
        });

        usersScrollPane.setViewportView(usersTable);

        userPane.add(usersScrollPane, java.awt.BorderLayout.CENTER);

        add(userPane, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0, 20, 0));

        editUserButton.setText("  Edit  ");
        editUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editUserButtonActionPerformed(evt);
            }
        });

        jPanel1.add(editUserButton);

        addUserButton.setText("  Add ");
        addUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserButtonActionPerformed(evt);
            }
        });

        jPanel1.add(addUserButton);

        deleteUserButton.setText("Delete");
        deleteUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserButtonActionPerformed(evt);
            }
        });

        jPanel1.add(deleteUserButton);

        bottomPane.add(jPanel1);

        add(bottomPane, java.awt.BorderLayout.SOUTH);

    }//GEN-END:initComponents

   private class UsersTableClass extends JTable
   {

      public String getToolTipText(MouseEvent event)
      {
         return ToolTipText.getToolTipText(event, usersTable);
      }

      public Point getToolTipLocation(MouseEvent event)
      {
         return ToolTipText.getToolTipLocation(event, usersTable);
      }

   }

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
       try {
          exitForm();
       } catch (Throwable th) {
          Log.quit(th);
       }
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void usersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usersTableMouseClicked
       try {
          if (evt.getClickCount() > 1) {
             // double-click on a row
             editUserButton.doClick();
          }
       } catch (Throwable th) {
          Log.quit(th);
       }
    }//GEN-LAST:event_usersTableMouseClicked

    private void addUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserButtonActionPerformed
       try {
          AddEditUsers usersDialog;
          usersDialog = new AddEditUsers(this, /* users_id==> */ 0);
          usersDialog.setModal(true);
          usersDialog.show();
       } catch (Throwable th) {
          Log.quit(th);
       }
    }//GEN-LAST:event_addUserButtonActionPerformed

    private void deleteUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUserButtonActionPerformed
       try {
          // currently showing usersTable
          int i = usersTable.getSelectedRow();
          Log.print("(Users).deleteUserButton Users i = " + i);

          if (i >= 0) {
             Log.print("Users.deleteUserButtonActionPerformed, i = " + i);
             Object[] options = {"Yes", "No"};
             int ok = JOptionPane.showOptionDialog(this,
                     "Do you want to delete this user:  " + (String) ((ManagedTableModel) usersTable.getModel()).getValueAt(i, 0) + " ", // username
                     "Delete Verification",
                     JOptionPane.YES_NO_OPTION,
                     JOptionPane.QUESTION_MESSAGE,
                     null,
                     options,
                     options[1]);
             if (ok == JOptionPane.YES_OPTION) {
                deleteUser(this, ((ManagedTableModel) usersTable.getModel()).getRowId(i), (String) ((ManagedTableModel) usersTable.getModel()).getValueAt(i, 0));
             }
          }
       } catch (Throwable th) {
          Log.quit(th);
       }
    }//GEN-LAST:event_deleteUserButtonActionPerformed

    private void editUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editUserButtonActionPerformed
       try {
          int i = usersTable.getSelectedRow();
          Log.print("(Users).editUserButton table selection is " + i);
          AddEditUsers usersDialog = new AddEditUsers(this, ((ManagedTableModel) usersTable.getModel()).getRowId(i));
          usersDialog.setModal(true);
          usersDialog.show();
       } catch (Throwable th) {
          Log.quit(th);
       }
    }//GEN-LAST:event_editUserButtonActionPerformed

   /**
     * @param args the command line arguments
     */
   public static void main(String args[])
   {
      new UserAdminPage(AdminFrame.getInstance(null)).setVisible(true);
   }

   protected static void deleteUser(Component parent, int id, String name)
   {
      // sending "" as last name requests delete.
      UsersData data = new UsersData();
      data.users_id = id;
      data.user_name = name;
      final ClientTask task;
      task = new TaskSendUsersData(data);
      task.enqueue(parent);
   }

   private boolean crossFieldEdits()
   {
      return true;
   }

   /**
     * Check that it's OK to exit the current page.  Subclasses must override this to provide a
     * page-dependent check.
     * @return true if it's OK to exit.  If user cancels save/no-save/cancel dialog,
     *         false is returned.
     */
   protected boolean exitPageCheck()
   {
      // TBD
      return true;
   }

   /** Get the menu bar for the current page.  Subclasses must override this to provide a
     * page-dependent menu bar.
     */
   protected javax.swing.JMenuBar getPageJMenuBar()
   {
      return menuBar;
   }

   /**
     * Perform page initialization.  Subclasses must override this to provide any
     * required page-dependent initialization.
     */
   protected void tabSelected()
   {
      Log.print("UserAdminPage tabSelected");
      ManagedTableModel model = (ManagedTableModel) usersTable.getModel();
      usersTable.setModel(new ManagedTableSorter(0,
              SQLManagedTableModel.makeInstance("UserAdminPage.usersTable", model)));
      model.register();
      TableColumn column = null;
      column = usersTable.getColumnModel().getColumn(2);
      column.setPreferredWidth(15); // unitize
      column = usersTable.getColumnModel().getColumn(3);
      column.setPreferredWidth(25); // uqc
      column = usersTable.getColumnModel().getColumn(4);
      column.setPreferredWidth(15); // coding
      column = usersTable.getColumnModel().getColumn(5);
      column.setPreferredWidth(25); // codingqa
      column = usersTable.getColumnModel().getColumn(6);
      column.setPreferredWidth(15); // qa
      column = usersTable.getColumnModel().getColumn(7);
      column.setPreferredWidth(15); // listing
      column = usersTable.getColumnModel().getColumn(8);
      column.setPreferredWidth(15); // tally
      column = usersTable.getColumnModel().getColumn(7);
      column.setPreferredWidth(25); // team leader
      column = usersTable.getColumnModel().getColumn(8);
      column.setPreferredWidth(15); // admin
   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addUserButton;
    private javax.swing.JPanel bottomPane;
    private javax.swing.JButton deleteUserButton;
    private javax.swing.JButton editUserButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel userPane;
    private javax.swing.JScrollPane usersScrollPane;
    private javax.swing.JTable usersTable;
    // End of variables declaration//GEN-END:variables
}
