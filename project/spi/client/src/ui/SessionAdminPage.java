/* $Header: /home/common/cvsarea/ibase/dia/src/ui/SessionAdminPage.java,v 1.18.2.2 2006/03/29 13:54:20 nancy Exp $ */
/*
 * UserAdminPage.java
 *
 * Created on December 14, 2003, 6:17 AM
 */

package ui;

import client.ClientTask;
import client.Global;
import client.TaskTerminateSession;
import common.Log;
import model.SQLManagedTableModel;
import model.ManagedTableModel;
import tools.LocalProperties;
import ui.AdminFrame;

import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableColumnModel;

/**
 * On the AdminFrame, the Sessions page shows all users currently
 * logged in to DIA.  A row may be selected and Close Session clicked
 * to log the user out of DIA.
 * @author  Bill
 */
public final class SessionAdminPage extends ui.AbstractPage {
    
    final private static String SHUTDOWN_PASSWORD = "LexparOK";

    SQLManagedTableModel model = null;

    /**
     * Creates new form UserAdminPage.
     * @param frame the frame in which to place this screen
     */
    public SessionAdminPage(AdminFrame frame) {
        super(frame);
        initComponents();
        
        if (! SHUTDOWN_PASSWORD.equals(LocalProperties.getProperty("shutdown"))) {
            // Note.  We have to remove, not just disable.  Otherwise, the containing
            // GridLayout has an extra blank space.
            //shutdownButton.setVisible(false);
            jPanel1.remove(shutdownButton);
        }

        TableColumnModel columnModel = sessionTable.getColumnModel();
        columnModel.getColumn(1).setPreferredWidth(14);
        columnModel.getColumn(0).setPreferredWidth(14);

        sessionTable.getSelectionModel().addListSelectionListener(
            new ListSelectionListener()
            {
                public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                    closeSessionButton.setEnabled(
                            sessionTable.getSelectedRow() >= 0
                            && Global.theServerConnection.getPermissionAdminUsers());
                }
            });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        sessionPane = new javax.swing.JPanel();
        sessionScrollPane = new javax.swing.JScrollPane();
        sessionTable = new javax.swing.JTable();
        bottomPane = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        closeSessionButton = new javax.swing.JButton();
        shutdownButton = new javax.swing.JButton();

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");
        exitMenuItem.setMnemonic('E');
        exitMenuItem.setText("Exit");
        exitMenuItem.setToolTipText("Exit this screen and return to the Activity Selection screen.");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setLayout(new java.awt.BorderLayout());

        sessionPane.setLayout(new java.awt.BorderLayout());

        sessionPane.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sessionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Session", "Server", "User ID", "User Name", "Team", "Team Leader", "Remarks"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        sessionScrollPane.setViewportView(sessionTable);

        sessionPane.add(sessionScrollPane, java.awt.BorderLayout.CENTER);

        add(sessionPane, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0, 20, 0));

        closeSessionButton.setText("Close Session");
        closeSessionButton.setEnabled(false);
        closeSessionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeSessionButtonActionPerformed(evt);
            }
        });

        jPanel1.add(closeSessionButton);

        shutdownButton.setText("Shutdown");
        shutdownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shutdownButtonActionPerformed(evt);
            }
        });

        jPanel1.add(shutdownButton);

        bottomPane.add(jPanel1);

        add(bottomPane, java.awt.BorderLayout.SOUTH);

    }//GEN-END:initComponents

    private void shutdownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shutdownButtonActionPerformed
        ShutdownDialog dialog = new ShutdownDialog(frame);
        dialog.setVisible(true);
    }//GEN-LAST:event_shutdownButtonActionPerformed

    private void closeSessionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeSessionButtonActionPerformed
        // Add your handling code here:
        try {
            int selectedIndex = sessionTable.getSelectedRow();
            // There should be a selection, else the button wouldn't be enabled
            if (selectedIndex < 0) {
                // if not, just ignore it
                return;
            }
            // get the corresponding id
            ManagedTableModel model = (ManagedTableModel) sessionTable.getModel();
            int sessionId = model.getRowId(selectedIndex);

            ClientTask ctask = new TaskTerminateSession(sessionId);
            ctask.enqueue(this);

        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_closeSessionButtonActionPerformed
    

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        try {
            exitForm();
        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new SessionAdminPage(AdminFrame.getInstance(null)).setVisible(true);
    }

    /**
     * Check that it's OK to exit the current page.  Subclasses must override this to provide a
     * page-dependent check.
     * @return true if it's OK to exit.  If user cancels save/no-save/cancel dialog,
     *         false is returned.
     */
    protected boolean exitPageCheck() {
        return true;
    }

    /** 
     * Get the menu bar for the current page.  Subclasses must override this to provide a
     * page-dependent menu bar.
     */
    protected javax.swing.JMenuBar getPageJMenuBar() {
        return menuBar;
    }
    
    /**
     * Perform page initialization.  Subclasses must override this to provide any
     * required page-dependent initialization.
     */
    protected void tabSelected() {
        Log.print("SessionAdminPage tabSelected");
        // Painted TableModel replaced by ManagedTableModel
        // The painted column names and types are retained
        // Model initialized here, so permissions are available
        if (model == null) {
            String sqlName = (Global.theServerConnection.getPermissionTeamLeader()
                              ? "SessionAdminPage.sessionTableTL"
                              : "SessionAdminPage.sessionTable");
            model = SQLManagedTableModel.makeInstance(
                                           sqlName, sessionTable.getModel());
            model.register();
            sessionTable.setModel(model);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPane;
    private javax.swing.JButton closeSessionButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel sessionPane;
    private javax.swing.JScrollPane sessionScrollPane;
    private javax.swing.JTable sessionTable;
    private javax.swing.JButton shutdownButton;
    // End of variables declaration//GEN-END:variables
    
}
