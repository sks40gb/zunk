/* $Header: /home/common/cvsarea/ibase/dia/src/ui/MailPanel.java,v 1.29.2.2 2006/03/28 17:02:05 nancy Exp $ */
/*
 * MailPanel.java
 *
 * Created on August 6, 2004, 2:23 PM
 */
package ui;

import beans.ComposeDialog;
import beans.ToolTipText;
import client.ClientTask;
import client.TaskDeleteMailsent;
import client.TaskExecuteQuery;
import client.TaskRequestMail;
import client.TaskSendMailreceivedData;
import common.Log;
import common.MailText;
import model.MailreceivedManagedModel;
import model.MailsentManagedModel;
import model.ManagedTableModel;
import model.ManagedTableSorter;

import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;


/**
 * MailPanel is called by MailDialog and MailPage to allow the user to
 * manage mail sent and received and to create new mail.  A checkbox controls
 * the view, Sent or Received mail.  Managed models control the currency of
 * the mail and mail status.
 * @author  Nancy McCall
 * @see beans.ComposeDialog
 * @see client.TaskDeleteMailsent
 * @see client.TaskRequestMail
 * @see client.TaskSendMailreceivedData
 */
public final class MailPanel extends javax.swing.JPanel
{
   /** Format to use to display the date properly. */

   final DateFormat DATE_FORMAT = new SimpleDateFormat("MMM dd, yyyy hh:mm aa");
   private DefaultTableCellRenderer dateRenderer = new DateRenderer();
   private DefaultTableCellRenderer iconRenderer = new IconRenderer();
   private static MailPanel mailPane = null;
   private static MailreceivedManagedModel mailreceivedModel;
   private static MailsentManagedModel mailsentModel;

   /** The text, only, of the currently selected mail */
   private String mailText = "";
   /** the sender of sent mail (the current user.user_name) */
   private String sender = "";
   /** the user who received the mail (current logged in user) */
   private String user_name = "";
   /** the String list of recipient from the rs retrieved when the user selects mail */
   private String recipientList = "";

   /**
     * Creates new form MailPanel.
     */
   public MailPanel()
   {
      Log.print("=== enter MailPanel ===");
      this.mailreceivedModel = MailreceivedManagedModel.getInstance();
      final ClientTask task = new TaskExecuteQuery("DiaClient.get users_id");
      task.setCallback(new Runnable()
              {

                 public void run()
                 {
                    try {
                       ResultSet queryResult = (ResultSet) task.getResult();

                       if (queryResult.next()) {
                          // query returns users_id
                          mailsentModel = MailsentManagedModel.getInstance(queryResult.getInt(1));
                          initMailTable();
                          setButtons();
                       }
                    } catch (Throwable th) {
                       Log.quit(th);
                    }
                 }

              });
      task.enqueue();
      initComponents();
      textreceivedArea.setLineWrap(true);
      textsentArea.setLineWrap(true);
      receivedRadioButton.setSelected(true);
      newMailLabel.setVisible(false);
   }

   /**
     * Create a singleton instance of MailPanel for the user and return it
     * when requested.
     * @return the singleton instance of MailPanel for the user
     */
   public static MailPanel getInstance()
   {
      if (mailPane == null) {
         //Log.print("(MailPanel.getInstance) new");
         mailPane = new MailPanel();
      }
      //Log.print("(MailPanel.getInstance)");
      return mailPane;
   }

   /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        textsentArea = new javax.swing.JTextArea();
        mailsentTable =     new JTable() {
            public String getToolTipText(MouseEvent event) {
                return ToolTipText.getToolTipText(event, mailsentTable);
            }
            public Point getToolTipLocation(MouseEvent event) {
                return ToolTipText.getToolTipLocation(event, mailsentTable);
            }
        };

        buttonGroup = new javax.swing.ButtonGroup();
        mailToolBar = new javax.swing.JToolBar();
        jPanel2 = new javax.swing.JPanel();
        composeButton = new javax.swing.JButton();
        replyButton = new javax.swing.JButton();
        replyallButton = new javax.swing.JButton();
        forwardButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        receivedRadioButton = new javax.swing.JRadioButton();
        sentRadioButton = new javax.swing.JRadioButton();
        newMailLabel = new javax.swing.JLabel();
        mailPanel = new javax.swing.JPanel();
        mailSplitPane = new javax.swing.JSplitPane();
        mailScrollPane = new javax.swing.JScrollPane();
        mailreceivedTable =     new JTable() {
            public String getToolTipText(MouseEvent event) {
                return ToolTipText.getToolTipText(event, mailreceivedTable);
            }
            public Point getToolTipLocation(MouseEvent event) {
                return ToolTipText.getToolTipLocation(event, mailreceivedTable);
            }
        };

        textScrollPane = new javax.swing.JScrollPane();
        textreceivedArea = new javax.swing.JTextArea();

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");
        exitMenuItem.setMnemonic('E');
        exitMenuItem.setText("Exit");
        exitMenuItem.setToolTipText("Exit program.");
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        textsentArea.setEditable(false);
        textsentArea.setWrapStyleWord(true);
        mailsentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sent To", "Subject", "Date Sent"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mailsentTable.setName("sent");

        setLayout(new java.awt.BorderLayout());

        setMinimumSize(new java.awt.Dimension(455, 464));
        setPreferredSize(new java.awt.Dimension(639, 478));
        mailToolBar.setBorderPainted(false);
        jPanel2.setLayout(new java.awt.GridLayout(1, 7));

        jPanel2.setMaximumSize(new java.awt.Dimension(390, 49));
        jPanel2.setMinimumSize(new java.awt.Dimension(390, 49));
        jPanel2.setPreferredSize(new java.awt.Dimension(390, 49));
        composeButton.setFont(new java.awt.Font("Dialog", 0, 10));
        composeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new.gif")));
        composeButton.setText("New");
        composeButton.setToolTipText("New Mail");
        composeButton.setFocusable(false);
        composeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        composeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        composeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                composeButtonActionPerformed(evt);
            }
        });

        jPanel2.add(composeButton);

        replyButton.setFont(new java.awt.Font("Dialog", 0, 10));
        replyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reply.gif")));
        replyButton.setText("Reply");
        replyButton.setToolTipText("Reply");
        replyButton.setFocusable(false);
        replyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        replyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        replyButton.setEnabled(false);
        replyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replyButtonActionPerformed(evt);
            }
        });

        jPanel2.add(replyButton);

        replyallButton.setFont(new java.awt.Font("Dialog", 0, 10));
        replyallButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/replyall.gif")));
        replyallButton.setText("Reply All");
        replyallButton.setToolTipText("Reply All");
        replyallButton.setFocusable(false);
        replyallButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        replyallButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        replyallButton.setEnabled(false);
        replyallButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replyallButtonActionPerformed(evt);
            }
        });

        jPanel2.add(replyallButton);

        forwardButton.setFont(new java.awt.Font("Dialog", 0, 10));
        forwardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/forward.gif")));
        forwardButton.setText("Forward");
        forwardButton.setToolTipText("Forward");
        forwardButton.setFocusable(false);
        forwardButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        forwardButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        forwardButton.setEnabled(false);
        forwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardButtonActionPerformed(evt);
            }
        });

        jPanel2.add(forwardButton);

        deleteButton.setFont(new java.awt.Font("Dialog", 0, 10));
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.gif")));
        deleteButton.setText("Delete");
        deleteButton.setToolTipText("Delete");
        deleteButton.setFocusable(false);
        deleteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jPanel2.add(deleteButton);

        mailToolBar.add(jPanel2);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(new javax.swing.border.EtchedBorder());
        jPanel1.setMaximumSize(new java.awt.Dimension(103, 73));
        receivedRadioButton.setFont(new java.awt.Font("Dialog", 0, 11));
        receivedRadioButton.setText("Received Mail");
        buttonGroup.add(receivedRadioButton);
        receivedRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receivedRadioButtonActionPerformed(evt);
            }
        });

        jPanel1.add(receivedRadioButton, java.awt.BorderLayout.CENTER);

        sentRadioButton.setFont(new java.awt.Font("Dialog", 0, 11));
        sentRadioButton.setText("Sent Mail");
        buttonGroup.add(sentRadioButton);
        sentRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sentRadioButtonActionPerformed(evt);
            }
        });

        jPanel1.add(sentRadioButton, java.awt.BorderLayout.NORTH);

        mailToolBar.add(jPanel1);

        newMailLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/received.gif")));
        newMailLabel.setText("New Mail");
        newMailLabel.setToolTipText("");
        newMailLabel.setFocusable(false);
        mailToolBar.add(newMailLabel);

        add(mailToolBar, java.awt.BorderLayout.NORTH);

        mailPanel.setLayout(new java.awt.BorderLayout());

        mailSplitPane.setDividerLocation(200);
        mailSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        mailreceivedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Status", "Received From", "Subject", "Date Sent"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mailreceivedTable.setName("rec");
        mailScrollPane.setViewportView(mailreceivedTable);

        mailSplitPane.setLeftComponent(mailScrollPane);

        textreceivedArea.setEditable(false);
        textreceivedArea.setWrapStyleWord(true);
        textScrollPane.setViewportView(textreceivedArea);

        mailSplitPane.setRightComponent(textScrollPane);

        mailPanel.add(mailSplitPane, java.awt.BorderLayout.CENTER);

        add(mailPanel, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    private void sentRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sentRadioButtonActionPerformed
       //Log.print("(MailPanel.viewButton) switch to Sent");
       mailScrollPane.setViewportView(mailsentTable);
       textScrollPane.setViewportView(textsentArea);
       setButtons();
    //viewButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/received.gif")));
    }//GEN-LAST:event_sentRadioButtonActionPerformed

    private void receivedRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receivedRadioButtonActionPerformed
       // "View Received"
       mailScrollPane.setViewportView(mailreceivedTable);
       textScrollPane.setViewportView(textreceivedArea);
       newMailLabel.setVisible(false);
       setButtons();
    //viewButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sent.gif")));
    }//GEN-LAST:event_receivedRadioButtonActionPerformed

    private void replyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replyButtonActionPerformed
       try {
          int row = getMailTable().getSelectedRow();
          //String firstRecipient = "";
            //firstRecipient = recipientList;
            //int i = recipientList.indexOf(";");
            //// get the text of the first recipient in the recipient list
            //if (i > 0) {
            //    firstRecipient = firstRecipient.substring(0, i).trim();
            //}
          if (doComposeDialog(row, recipientList, mailText, "Re: ", /* subject-> */ getMailValue(row, 2), /* date-> */ getMailValue(row, 3), sender, sender)) {
             if (getMailTable().getName().equals("rec")) {
                mailreceivedModel.updateStatus(row, "Replied");
             }
          }
       } catch (Throwable th) {
          Log.quit(th);
       }
    }//GEN-LAST:event_replyButtonActionPerformed

    private void replyallButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replyallButtonActionPerformed
       try {
          int row = getMailTable().getSelectedRow();
          String list;
          // Try not to send the mail to the sender.
            //Log.print("(MailPanel.replyall) sender/user " + sender + "/" + user_name);
          if (sender.equals(user_name)) {
             // sender is recipient
             list = recipientList;
          }
          else {
             list = sender + "; " + recipientList;
          }
          //if (recipientList.indexOf(sender) > -1) {
            //    if (recipientList.equals(sender)
            //        || recipientList.indexOf("; " + sender) > -1
            //        || recipientList.indexOf(sender + "; ") > -1) {
            //        // The sender is also in the recipient list, so don't add
            //        // to the address line of the replyall mail.
            //    } else {
            //        list = sender + "; " + recipientList;
            //    }
            //}
          if (doComposeDialog(row, recipientList, mailText, "Re: ", /* subject-> */ getMailValue(row, 2), /* date-> */ getMailValue(row, 3), sender, list)) {
             if (getMailTable().getName().equals("rec")) {
                mailreceivedModel.updateStatus(row, "Replied");
             }
          }
       } catch (Throwable th) {
          Log.quit(th);
       }
    }//GEN-LAST:event_replyallButtonActionPerformed

    private void composeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_composeButtonActionPerformed
       try {
          doComposeDialog(-1, /* recipientList->*/ "", "", "", "", "", "", "");
       } catch (Throwable th) {
          Log.quit(th);
       }
    }//GEN-LAST:event_composeButtonActionPerformed

    private void forwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardButtonActionPerformed
       try {
          int row = getMailTable().getSelectedRow();
          if (doComposeDialog(row, recipientList, mailText, "Fwd: ", /* subject-> */ getMailValue(row, 2), /* date-> */ getMailValue(row, 3), sender, "")) {
             if (getMailTable().getName().equals("rec")) {
                mailreceivedModel.updateStatus(row, "Forwarded");
             }
          }
       } catch (Throwable th) {
          Log.quit(th);
       }
    }//GEN-LAST:event_forwardButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
       int sel = getMailTable().getSelectedRow();
       if (sel > -1) {
          Map idMap = new HashMap();
          ManagedTableModel model = (ManagedTableModel) getMailTable().getModel();

          int[] rows = getMailTable().getSelectedRows();
          for (int i = 0; i < rows.length; i++) {
             idMap.put(Integer.toString(model.getRowId(rows[i])), "Deleted");
          }

          // Following to prevent the listSelectionListener from taking action
            // during the managed table update following the delete.
          getMailTable().clearSelection();

          if (receivedRadioButton.isSelected()) {
             // received
             textreceivedArea.setText("");
             if (idMap.size() > 0) {
                final ClientTask task = new TaskSendMailreceivedData(idMap);
                task.enqueue();
             }
          }
          else {
             textsentArea.setText("");
             if (idMap.size() > 0) {
                final ClientTask task = new TaskDeleteMailsent(idMap);
                task.enqueue();
             }
          }
       }
    }//GEN-LAST:event_deleteButtonActionPerformed

   private boolean doComposeDialog(int row, String recipientList, String text, String prefix, String subject, String date, String sender, String addr)
   {
      try {
         //Log.print("(MailPanel.doComposeDialog) row/list/sender/addr "
            //          + row + "/" + recipientList + "/" + sender + "/" + addr);
         int mailsent_id = 0;
         if (row > -1) {
            mailsent_id = ((ManagedTableModel) getMailTable().getModel()).getRowId(row);
         }
         ComposeDialog composeDialog = new ComposeDialog(this, true, mailsent_id, recipientList, text, prefix, subject, date, sender, addr);
         composeDialog.show();
         return composeDialog.getStatus();
      } catch (Throwable th) {
         Log.quit(th);
         return false; // compiler
      }
   }

   private void initMailTable()
   {
      // for table headings
      mailsentModel.setTableModel(mailsentTable.getModel());
      mailsentTable.setModel(mailsentModel);

      // for table headings
      mailreceivedModel.setTableModel(mailreceivedTable.getModel());
      mailreceivedTable.setModel(mailreceivedModel);

      mailreceivedTable.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
      mailreceivedTable.getSelectionModel().addListSelectionListener(new ListSelectionListener()
              {

                 public void valueChanged(ListSelectionEvent e)
                 {
                    //Ignore extra messages.
                    if (e.getValueIsAdjusting()) {
                       return;
                    }
                    setButtons();
                    if (mailreceivedTable.getSelectedRowCount() == 1) {
                       // load text only on single selection
                       if (mailreceivedTable.getSelectionModel().getMinSelectionIndex() > -1) {
                          loadMailText();
                       }
                    }
                 }

              });
      mailreceivedTable.getModel().addTableModelListener(new TableModelListener()
              {
                 /**
                 * This fine grain notification tells listeners the exact range
                 * of cells, rows, or columns that changed.
                 */

                 public void tableChanged(TableModelEvent e)
                 {
                    if (sentRadioButton.isSelected()) {
                       // notify user that mail has been received
                        // TBD:  maybe use something nicer than beep
                       Toolkit.getDefaultToolkit().beep();
                       newMailLabel.setVisible(true);
                    }
                 }

              });

      mailsentTable.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
      mailsentTable.getSelectionModel().addListSelectionListener(new ListSelectionListener()
              {

                 public void valueChanged(ListSelectionEvent e)
                 {
                    //Ignore extra messages.
                    if (e.getValueIsAdjusting()) {
                       return;
                    }
                    setButtons();
                    if (mailsentTable.getSelectedRowCount() == 1) {
                       // load text only on single selection
                       if (mailsentTable.getSelectionModel().getMinSelectionIndex() > -1) {
                          loadMailText();
                       }
                    }
                 }

              });

      TableColumn column = null;
      column = mailreceivedTable.getColumnModel().getColumn(0);
      column.setPreferredWidth(4); // status
        // cell renderer for mailreceived status
      iconRenderer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      column.setCellRenderer(iconRenderer);

      column = mailreceivedTable.getColumnModel().getColumn(3);
      column.setPreferredWidth(25); // date
        // cell renderer for mailreceived date
      column.setCellRenderer(dateRenderer);

      column = mailsentTable.getColumnModel().getColumn(2);
      column.setPreferredWidth(25); // date
        // cell renderer for mailsent date
      column.setCellRenderer(dateRenderer);
   }

   private void setButtons()
   {
      composeButton.setEnabled(true);

      int sel = getMailTable().getSelectedRow();
      if ((sel < 0) || (getMailTable().getRowCount() == 0)) { // changed here
            // no rows are selected
         deleteButton.setEnabled(false);
         //printButton.setEnabled(false);
         forwardButton.setEnabled(false);
         replyButton.setEnabled(false);
         replyallButton.setEnabled(false);
      }
      else if (getMailTable().getSelectedRowCount() > 1) {
         // multiple selections
         deleteButton.setEnabled(true);
         //printButton.setEnabled(false);
         forwardButton.setEnabled(false);
         replyButton.setEnabled(false);
         replyallButton.setEnabled(false);
      }
      else {
         deleteButton.setEnabled(true);
         //printButton.setEnabled(true);
         forwardButton.setEnabled(true);
         if (receivedRadioButton.isSelected()) {
            replyButton.setEnabled(true);
            replyallButton.setEnabled(true);
         }
         else {
            // disable reply[All] -- doesn't make sense for sent messages - wbe 2004-11-06
            replyButton.setEnabled(false);
            replyallButton.setEnabled(false);
         }
      }
   }

   /**
     * From the server, get the text for the mail the user has selected.
     */
   private void loadMailText()
   {
      int row = getMailTable().getSelectedRow();
      if ((getMailTable().getRowCount() != 0) && (row > -1)) { // changed here
         final ClientTask task;
         if (sentRadioButton.isSelected()) {
            task = new TaskRequestMail("mailsent" //task = new TaskExecuteQuery("Mailsent get text"
                    , Integer.toString(((ManagedTableSorter) mailsentTable.getModel()).getRowId(row)));
         }
         else {
            task = new TaskRequestMail("mailreceived" //task = new TaskExecuteQuery("Mailreceived get text"
                    , Integer.toString(((ManagedTableSorter) mailreceivedTable.getModel()).getRowId(row)));
         }
         task.setCallback(new Runnable()
                 {

                    public void run()
                    {
                       getMailsentTextEntry((MailText) task.getResult());
                    }

                 });
         boolean ok = task.enqueue(this);
      }
   }

   /**
     * Retrieve mailsent.text from server.
     * @param data - a MailreceivedData instance containing the requested mail
     * @see loadMailText()
     */
   private void getMailsentTextEntry(MailText data)
   {
      if (data != null) {
         sender = data.mailsentUserName;
         recipientList = data.recipientList;
         mailText = data.text;
         user_name = data.recipientUserName;
         if (getMailTable().getName().equals("rec")) {
            getTextArea().setText("To: " + recipientList + "\n" + "------------------------------------------" + "\n" + mailText);
            // viewing received
                //Log.print("(MailPanel.getmailsentTextEntry) " + queryResult.getString(5));
            if (data.status.equals("Unread")) {
               //Log.print("(MailPanel.getmailsentTextEntry) " + mailreceivedTable.getSelectedRow());
               int i = mailreceivedTable.getSelectedRow();
               mailreceivedModel.updateStatus(((ManagedTableSorter) mailreceivedTable.getModel()).getRowId(i), "Read");
            }
            textreceivedArea.setCaretPosition(0);
         }
         else {
            getTextArea().setText(mailText);
            textsentArea.setCaretPosition(0);
         }
      }
   }

   private JTable getMailTable()
   {
      //Log.print("(MailPanel.getMailTable) " 
        //         + mailScrollPane.getViewport().getComponent(0).getName());
      return (JTable) mailScrollPane.getViewport().getComponent(0);
   }

   private String getMailValue(int row, int col)
   {
      if (col < 1) {
         Log.quit("(MailPanel.getMailValue) col error " + col);
      }
      if (receivedRadioButton.isSelected()) {
         if (col == 3) {
            long date = Long.parseLong(((ManagedTableSorter) mailreceivedTable.getModel()).getValueAt(row, col).toString());
            return DATE_FORMAT.format(new Long(-date));
         }
         else {
            return (String) ((ManagedTableSorter) mailreceivedTable.getModel()).getValueAt(row, col);
         }
      }
      else {
         // columns are one less for sent table because there is no status (col 0 in received)
         if (col == 3) {
            long date = Long.parseLong(((ManagedTableSorter) mailsentTable.getModel()).getValueAt(row, col - 1).toString());
            return DATE_FORMAT.format(new Long(-date));
         }
         else {
            return (String) ((ManagedTableSorter) mailsentTable.getModel()).getValueAt(row, col - 1);
         }
      }
   }

   private JTextArea getTextArea()
   {
      return (JTextArea) textScrollPane.getViewport().getComponent(0);
   }

   private class IconRenderer extends DefaultTableCellRenderer
   {
      /**
         * Sets the <code>String</code> object for the cell being rendered to
         * <code>value</code>.
         *
         * @param value  the string value for this cell; if value is
         *		<code>null</code> it sets the text value to an empty string
         * @see JLabel#setText
         *
         */

      protected void setValue(Object value)
      {
         if (value.equals("Unread")) {
            setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/unread.gif"), "Unread"));
         }
         else if (value.equals("Read")) {
            setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/read.gif"), "Read"));
         }
         else if (value.equals("Replied")) {
            setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/readReplied.gif"), "Replied"));
         }
         else if (value.equals("Forwarded")) {
            setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/readForwarded.gif"), "Forwarded"));
         }
         else {
            setText("");
         }
      }

   }

   private class DateRenderer extends DefaultTableCellRenderer
   {
      /**
         * Sets the <code>String</code> object for the cell being rendered to
         * <code>value</code>.
         *
         * @param value  the string value for this cell; if value is
         *		<code>null</code> it sets the text value to an empty string
         * @see JLabel#setText
         *
         */

      public void setValue(Object value)
      {
         long date = Long.parseLong(value.toString());
         setText(DATE_FORMAT.format(new Long(-date)));
      }

   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JButton composeButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton forwardButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel mailPanel;
    private javax.swing.JScrollPane mailScrollPane;
    private javax.swing.JSplitPane mailSplitPane;
    private javax.swing.JToolBar mailToolBar;
    private javax.swing.JTable mailreceivedTable;
    private javax.swing.JTable mailsentTable;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel newMailLabel;
    private javax.swing.JRadioButton receivedRadioButton;
    private javax.swing.JButton replyButton;
    private javax.swing.JButton replyallButton;
    private javax.swing.JRadioButton sentRadioButton;
    private javax.swing.JScrollPane textScrollPane;
    private javax.swing.JTextArea textreceivedArea;
    private javax.swing.JTextArea textsentArea;
    // End of variables declaration//GEN-END:variables

}
