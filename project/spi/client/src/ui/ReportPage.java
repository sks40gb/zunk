/* $Header: /home/common/cvsarea/ibase/dia/src/ui/ReportPage.java,v 1.22.2.10 2006/03/29 13:54:20 nancy Exp $ */
package ui;

import beans.DateSelectionField;
import beans.LIntegerField;
import client.Global;
import client.TaskGenerateReport;
import common.Log;
import common.PopulateData;
import model.SQLManagedComboModel;
import report.ListingSummaryReport;
import ui.AbstractPage;
import javax.swing.ComboBoxModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import javax.swing.event.ListDataListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;
import model.ManagedComboModel;
import model.QueryComboModel;
import report.AbstractReport;
import report.BatchCreditReport;
import report.BatchReport;
import report.BatchSummaryReport;
import report.CodingManualSummaryReport;
import report.DailyTotalReport;
import report.DummyReport;
import report.OpenBatchReport;
import report.PayrollSummaryReport;
import report.PayrollTotalsReport;
import report.ProfitReport;
import report.ReportParameters;
import report.StaleBatchReport;
import report.TallySummaryReport;
import report.TeamBatchOpenReport;
import report.TeamBatchQCReport;
import report.TimesheetReport;

/**
 * Based on user privileges, show checkboxes and report parameter fields to
 * allow the user to select and execute reports.
 */
public final class ReportPage extends AbstractPage implements ReportParameters {

    private boolean firstTimeSelected = true;
    private int projectId = 0;
    private QueryComboModel fieldModel = null;
    private QueryComboModel volumeModel = null;
    private QueryComboModel batchModel = null;
    PopulateData data;
    private int fieldId = 0;
    private int volumeId = 0;
    private int batchId = 0;
    private int occurrenceValue = 0;
    private int sel = 0;
    private int volumeIndex = 0;
    boolean flag = false;    
    boolean listingFlag = false;    
    private final String GET_ALL_FIELDS = "listing.get fields";
    private final String GET_ALL_VOLUME = "listing.get volume";
    private final String GET_ALL_BATCH = "listing.get batch";
    // A report program, depending on the currently-selected report
    private AbstractReport currentReport;

    /**
     * Creates new form ReportPage.
     * @param frame the frame in which to place this screen
     */
    public ReportPage() {
    }

    public ReportPage(AdminFrame frame) {
        super(frame);
        initComponents();

        // DummyReport has all parameters and buttons disabled
        currentReport = new DummyReport(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        buttonGroup = new javax.swing.ButtonGroup();
        titleLabel = new javax.swing.JLabel();
        buttonPane = new javax.swing.JPanel();
        batchSummaryButton = new javax.swing.JRadioButton();
        batchReportButton = new javax.swing.JRadioButton();
        teamOpenReportButton = new javax.swing.JRadioButton();
        qcReportButton = new javax.swing.JRadioButton();
        openReportButton = new javax.swing.JRadioButton();
        staleReportButton = new javax.swing.JRadioButton();
        dailyTotalButton = new javax.swing.JRadioButton();
        payrollButton = new javax.swing.JRadioButton();
        payrollTotalsButton = new javax.swing.JRadioButton();
        payrollSummaryButton = new javax.swing.JRadioButton();
        profitButton = new javax.swing.JRadioButton();
        timesheetButton = new javax.swing.JRadioButton();
        paramPanel = new javax.swing.JPanel();
        projectLabel = new javax.swing.JLabel();
        projectCombo = new javax.swing.JComboBox();
        teamLabel = new javax.swing.JLabel();
        teamCombo = new javax.swing.JComboBox();
        dateLabel = new javax.swing.JLabel();
        dateField = new DateSelectionField();
        endDateLabel = new javax.swing.JLabel();
        endDateField = new DateSelectionField();
        daysLabel = new javax.swing.JLabel();
        daysField = new LIntegerField();
        orderPanel = new javax.swing.JPanel();
        orderCheckBox = new javax.swing.JCheckBox();
        orderCheckBox2 = new javax.swing.JCheckBox();
        orderCheckBox3 = new javax.swing.JCheckBox();
        generateButton = new javax.swing.JButton();
        
        codingManualButton = new javax.swing.JRadioButton();
        listingReports = new javax.swing.JRadioButton();
		tallyReports = new javax.swing.JRadioButton();
        fieldCombo = new javax.swing.JComboBox();
        fieldLabel = new javax.swing.JLabel();
		volumeCombo = new javax.swing.JComboBox();
        volumeLabel = new javax.swing.JLabel();
		batchCombo = new javax.swing.JComboBox();
        batchLabel = new javax.swing.JLabel();
		occurrenceText = new javax.swing.JTextField();
        occurrenceLabel = new javax.swing.JLabel();

        fileMenu.setMnemonic('F');
        fileMenu.setText("File");
        exitMenuItem.setMnemonic('E');
        exitMenuItem.setText("Exit");
        exitMenuItem.setToolTipText("Exit program.");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setLayout(new java.awt.GridBagLayout());

        titleLabel.setFont(new java.awt.Font("Dialog", 1, 24));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Report Generation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 20, 0);
        add(titleLabel, gridBagConstraints);

        buttonPane.setLayout(new java.awt.GridLayout(0, 1));

        batchSummaryButton.setText("Project Summary");
        buttonGroup.add(batchSummaryButton);
        batchSummaryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchSummaryButtonActionPerformed(evt);
            }
        });

        buttonPane.add(batchSummaryButton);

        batchReportButton.setText("All Batches for Project");
        buttonGroup.add(batchReportButton);
        batchReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchReportButtonActionPerformed(evt);
            }
        });

        buttonPane.add(batchReportButton);

        teamOpenReportButton.setText("Open Batches for Team");
        buttonGroup.add(teamOpenReportButton);
        teamOpenReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamOpenReportButtonActionPerformed(evt);
            }
        });

        buttonPane.add(teamOpenReportButton);

        qcReportButton.setText("QC Batches for Team");
        buttonGroup.add(qcReportButton);
        qcReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qcReportButtonActionPerformed(evt);
            }
        });

        buttonPane.add(qcReportButton);

        openReportButton.setText("All Open Batches");
        buttonGroup.add(openReportButton);
        openReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openReportButtonActionPerformed(evt);
            }
        });

        buttonPane.add(openReportButton);

        staleReportButton.setText("Stale Batches");
        buttonGroup.add(staleReportButton);
        staleReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staleReportButtonActionPerformed(evt);
            }
        });

        buttonPane.add(staleReportButton);

        dailyTotalButton.setText("Daily Totals");
        buttonGroup.add(dailyTotalButton);
        dailyTotalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dailyTotalButtonActionPerformed(evt);
            }
        });

        buttonPane.add(dailyTotalButton);

        payrollButton.setText("Completed Batches");
        buttonGroup.add(payrollButton);
        payrollButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payrollButtonActionPerformed(evt);
            }
        });

        buttonPane.add(payrollButton);

        payrollTotalsButton.setText("Payroll");
        buttonGroup.add(payrollTotalsButton);
        payrollTotalsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payrollTotalsButtonActionPerformed(evt);
            }
        });

        buttonPane.add(payrollTotalsButton);

        payrollSummaryButton.setText("Payroll Summary");
        buttonGroup.add(payrollSummaryButton);
        payrollSummaryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payrollSummaryButtonActionPerformed(evt);
            }
        });

        buttonPane.add(payrollSummaryButton);

        profitButton.setText("Profit Reporting");
        buttonGroup.add(profitButton);
        profitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profitButtonActionPerformed(evt);
            }
        });

        buttonPane.add(profitButton);

        timesheetButton.setText("Timesheet");
        buttonGroup.add(timesheetButton);
        timesheetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timesheetButtonActionPerformed(evt);
            }
        });

        buttonPane.add(timesheetButton);

		codingManualButton.setText("Coding Manual");
        buttonGroup.add(codingManualButton);
        codingManualButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codingManualButtonActionPerformed(evt);
            }
        });

        buttonPane.add(codingManualButton);
        
        listingReports.setText("Listing Report");
        buttonGroup.add(listingReports);
        listingReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listingReportsActionPerformed(evt);
            }
        });

        buttonPane.add(listingReports);

		tallyReports.setText("Tally Report");
        buttonGroup.add(tallyReports);
        tallyReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tallyReportsActionPerformed(evt);
            }
        });

        buttonPane.add(tallyReports);		

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 40);
        add(buttonPane, gridBagConstraints);

        paramPanel.setLayout(new java.awt.GridBagLayout());

        projectLabel.setText("Project:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 20);
        paramPanel.add(projectLabel, gridBagConstraints);

        projectCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableControls(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        paramPanel.add(projectCombo, gridBagConstraints);

        fieldLabel.setText("Field:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 20);
        paramPanel.add(fieldLabel, gridBagConstraints);

        fieldCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               // enableControls(evt);
			   fieldComboActionPerformed(evt);
            }
        });
        fieldCombo.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {               
                fieldComboPopupMenuWillBecomeVisible(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        paramPanel.add(fieldCombo, gridBagConstraints);

        
		volumeLabel.setText("Volume:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 20);
        paramPanel.add(volumeLabel, gridBagConstraints);

        volumeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               // enableControls(evt);
			   volumeComboActionPerformed(evt);
            }
        });
        volumeCombo.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {               
                volumeComboPopupMenuWillBecomeVisible(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        paramPanel.add(volumeCombo, gridBagConstraints);
        

        batchLabel.setText("Batch:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 20);
        paramPanel.add(batchLabel, gridBagConstraints);

        batchCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               // enableControls(evt);
			   batchComboActionPerformed(evt);
            }
        });
        batchCombo.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {               
                batchComboPopupMenuWillBecomeVisible(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        paramPanel.add(batchCombo, gridBagConstraints);
        
		occurrenceLabel.setFont(new java.awt.Font("Dialog", 0, 11));
        occurrenceLabel.setText("Occurrence Limit:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 20);
        //paramPanel.add(occurrenceLabel, gridBagConstraints);

        occurrenceText.setColumns(5);
        occurrenceText.setDocument(new PlainDocument() {
            public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {
                super.insertString(offs, str, a);
                checkEnableGenerateButton();
            }
            public void remove(int offs, int len)
            throws BadLocationException
            {
                super.remove(offs,len);
                checkEnableGenerateButton();
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        //gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
       // gridBagConstraints.weightx = 1.0;
        //paramPanel.add(occurrenceText, gridBagConstraints);

        teamLabel.setText("Team:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 20);
        paramPanel.add(teamLabel, gridBagConstraints);

        teamCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableControls(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        paramPanel.add(teamCombo, gridBagConstraints);

        dateLabel.setText("Start Date:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 20);
        paramPanel.add(dateLabel, gridBagConstraints);

        dateField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateFieldPropertyChange(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        paramPanel.add(dateField, gridBagConstraints);

        endDateLabel.setText("End Date:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 20);
        paramPanel.add(endDateLabel, gridBagConstraints);

        endDateField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                endDateFieldPropertyChange(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        paramPanel.add(endDateField, gridBagConstraints);

        daysLabel.setText("Number of Days:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 20);
        paramPanel.add(daysLabel, gridBagConstraints);

        daysField.setColumns(3);
        daysField.setEditable(false);
        daysField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                daysFieldPropertyChange(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        paramPanel.add(daysField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 40);
        add(paramPanel, gridBagConstraints);

        orderPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 5));

        orderPanel.setMinimumSize(new java.awt.Dimension(10, 24));
        orderPanel.setPreferredSize(new java.awt.Dimension(10, 34));
        orderCheckBox.setText("Order by Xxxx");
        orderCheckBox.setFocusable(false);
        orderCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        orderPanel.add(orderCheckBox);

        orderCheckBox2.setText("Order by Yyyy");
        orderCheckBox2.setFocusable(false);
        orderCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        orderPanel.add(orderCheckBox2);

        orderCheckBox3.setText("by Project");
        orderCheckBox3.setFocusable(false);
        orderCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxActionPerformed(evt);
            }
        });

        orderPanel.add(orderCheckBox3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        add(orderPanel, gridBagConstraints);

        generateButton.setFont(new java.awt.Font("Dialog", 1, 14));
        generateButton.setText("Generate Report");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 20, 0);
        add(generateButton, gridBagConstraints);

    }//GEN-END:initComponents

    private void timesheetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timesheetButtonActionPerformed
        currentReport = new TimesheetReport(this);
        currentReport.initializeControls();
        batchCombo.setEnabled(false);
    }//GEN-LAST:event_timesheetButtonActionPerformed

    private void profitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profitButtonActionPerformed
        currentReport = new ProfitReport(this);
        currentReport.initializeControls();
        orderCheckBox2.setSelected(true);
        batchCombo.setEnabled(false);
    }//GEN-LAST:event_profitButtonActionPerformed

    private void payrollSummaryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payrollSummaryButtonActionPerformed
        currentReport = new PayrollSummaryReport(this);
        currentReport.initializeControls();
        orderCheckBox.setSelected(true);
    }//GEN-LAST:event_payrollSummaryButtonActionPerformed

    private void payrollTotalsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payrollTotalsButtonActionPerformed
        currentReport = new PayrollTotalsReport(this);
        currentReport.initializeControls();
        batchCombo.setEnabled(false);
    }//GEN-LAST:event_payrollTotalsButtonActionPerformed

    private void batchSummaryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batchSummaryButtonActionPerformed
        currentReport = new BatchSummaryReport(this);
        currentReport.initializeControls();
        batchCombo.setEnabled(false);
    }//GEN-LAST:event_batchSummaryButtonActionPerformed

    private void daysFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_daysFieldPropertyChange
        if ("text".equals(evt.getPropertyName())) {
            currentReport.enableControls();
        }
    }//GEN-LAST:event_daysFieldPropertyChange

    private void endDateFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_endDateFieldPropertyChange
        currentReport.enableControls();
    }//GEN-LAST:event_endDateFieldPropertyChange

    private void payrollButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payrollButtonActionPerformed
        currentReport = new BatchCreditReport(this);
        currentReport.initializeControls();
        batchCombo.setEnabled(false);
    }//GEN-LAST:event_payrollButtonActionPerformed

    private void checkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxActionPerformed
        // Don't force checking - can have one or none checked
        if (getOrderCheckBox2().isVisible()) {
            JCheckBox source = (JCheckBox) evt.getSource();
            if (source.isSelected()) {
                if (source == getOrderCheckBox()) {
                    getOrderCheckBox2().setSelected(false);
                    getOrderCheckBox3().setSelected(false);
                } else if (source == getOrderCheckBox2()) { // since source == getOrderCheckBox()

                    getOrderCheckBox().setSelected(false);
                    getOrderCheckBox3().setSelected(false);
                } else { // checkbox is 3

                    getOrderCheckBox().setSelected(false);
                    getOrderCheckBox2().setSelected(false);
                }
            }
        }
        currentReport.enableControls();
    }//GEN-LAST:event_checkBoxActionPerformed

    private void dateFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateFieldPropertyChange
        currentReport.enableControls();
    }//GEN-LAST:event_dateFieldPropertyChange

    private void dailyTotalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dailyTotalButtonActionPerformed
        currentReport = new DailyTotalReport(this);
        currentReport.initializeControls();
        batchCombo.setEnabled(false);
    }//GEN-LAST:event_dailyTotalButtonActionPerformed

    private void staleReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staleReportButtonActionPerformed
        currentReport = new StaleBatchReport(this);
        currentReport.initializeControls();
        batchCombo.setEnabled(false);
    }//GEN-LAST:event_staleReportButtonActionPerformed

    private void qcReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qcReportButtonActionPerformed
        currentReport = new TeamBatchQCReport(this);
        currentReport.initializeControls();
    }//GEN-LAST:event_qcReportButtonActionPerformed

    private void teamOpenReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamOpenReportButtonActionPerformed
        currentReport = new TeamBatchOpenReport(this);
        currentReport.initializeControls();
    }//GEN-LAST:event_teamOpenReportButtonActionPerformed

    private void openReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openReportButtonActionPerformed
        currentReport = new OpenBatchReport(this);
        //reset all other ComboBox
        projectCombo.setSelectedIndex(-1);
        fieldCombo.setSelectedIndex(-1);
        volumeCombo.setSelectedIndex(-1);
        batchCombo.setSelectedIndex(-1);
        teamCombo.setSelectedIndex(-1);

        currentReport.enableControls();
    }//GEN-LAST:event_openReportButtonActionPerformed

    private void enableControls(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableControls
        currentReport.enableControls();
    }//GEN-LAST:event_enableControls

    private void batchReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batchReportButtonActionPerformed
        currentReport = new BatchReport(this);
        currentReport.initializeControls();
        batchCombo.setEnabled(false);
    }//GEN-LAST:event_batchReportButtonActionPerformed

    private void codingManualButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codingManualButtonActionPerformed
        currentReport = new CodingManualSummaryReport(this);
        currentReport.initializeControls();
        batchCombo.setEnabled(false);
    }//GEN-LAST:event_codingManualButtonActionPerformed

    private void listingReportsActionPerformed(java.awt.event.ActionEvent evt) {                                               
        currentReport = new ListingSummaryReport(this);
        currentReport.initializeControls();
        listingFlag = true;
        batchCombo.setEnabled(false);
    }                                              

    private void tallyReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listingReportsActionPerformed
        currentReport = new TallySummaryReport(this);
        currentReport.initializeControls();        
        listingFlag = true;
    }//GEN-LAST:event_listingReportsActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        try {
            exitForm();
        } catch (Throwable th) {
            Log.quit(th);
        }
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
         currentReport.generate();                   
    }//GEN-LAST:event_generateButtonActionPerformed

    /**
     * Check that it's OK to exit the current page.  Subclasses must override this to provide a
     * page-dependent check.
     * @return true if it's OK to exit.  If field cancels save/no-save/cancel dialog,
     *         false is returned.
     */
    protected boolean exitPageCheck() {
        // TBD
        return true;
    }

    /** Get the menu bar for the current page.  Subclasses must override this to provide a
     * page-dependent menu bar.
     */
    protected javax.swing.JMenuBar getPageJMenuBar() {
        return menuBar;
    }

    /**
     * Perform page initialization.  Subclasses must override this to provide any
     * required page-dependent initialization.
     */
    protected void tabSelected() {
        Log.print("ReportPage tabSelected first=" + firstTimeSelected);

        if (firstTimeSelected) {
            firstTimeSelected = false;

            projectCombo.setModel(new SQLManagedComboModel(Global.theServerConnection.getPermissionAdmin()
                    ? "ReportPage.projectCombo"
                    : "ReportPage.projectComboTL"));
            teamCombo.setModel(new SQLManagedComboModel(Global.theServerConnection.getPermissionAdmin()
                    ? "ReportPage.teamCombo"
                    : "ReportPage.teamComboTL"));

            // remove disallowed items if team leader rather than administrator
            if (!Global.theServerConnection.getPermissionAdmin()) {
                buttonPane.remove(openReportButton);
                buttonPane.remove(staleReportButton);
                buttonPane.remove(dailyTotalButton);
                buttonPane.remove(payrollButton);
                paramPanel.remove(dateLabel);
                paramPanel.remove(dateField);
                paramPanel.remove(endDateLabel);
                paramPanel.remove(endDateField);
                paramPanel.remove(daysLabel);
                paramPanel.remove(daysField);
                final ComboBoxModel teamsModel = teamCombo.getModel();
                teamsModel.addListDataListener(new ListDataListener() {
                    // when team name loaded, force it to be selected
                    // there is only one team name for a team leader

                    public void intervalAdded(javax.swing.event.ListDataEvent A) {
                        teamCombo.setSelectedIndex(0);
                    }

                    public void intervalRemoved(javax.swing.event.ListDataEvent A) {
                    }

                    public void contentsChanged(javax.swing.event.ListDataEvent A) {
                        if (teamsModel.getSize() > 0) {
                            teamCombo.setSelectedIndex(0);
                        }
                    }
                });
            }
            if (!Global.theServerConnection.getPermissionAdminUsers()) {
                buttonPane.remove(payrollTotalsButton);
                buttonPane.remove(payrollSummaryButton);
                buttonPane.remove(timesheetButton);
            }
            if (!Global.theServerConnection.getPermissionAdminProfit()) {
                buttonPane.remove(profitButton);
            }
        }
    }

    private void fieldComboPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
        //Log.print("(PopulatePage.fieldComboPopupMenuWillBecomeVisible) projectId " + projectId);		
        ManagedComboModel projectModel = (ManagedComboModel) getProjectCombo().getModel();
        int index = getProjectCombo().getSelectedIndex();
        int project_id = projectModel.getIdAt(index);
        fieldModel = new QueryComboModel(GET_ALL_FIELDS, /* required? */ false, new String[]{Integer.toString(project_id)}, "");
        fieldCombo.setModel(fieldModel);

    }

    private void fieldComboActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            getGenerateButton().setEnabled(true);
            sel = fieldCombo.getSelectedIndex();
            if (sel > -1) {
                fieldId = fieldModel.getIdAt(sel);
            }
            if (fieldId > 0) {
                flag = true;
            }

        } catch (Throwable th) {
            Log.quit(th);
        }
    }

    private void volumeComboPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
        //Log.print("(PopulatePage.volumeComboPopupMenuWillBecomeVisisble) projectId " + projectId);
        //int project_id = getProjectId();
        ManagedComboModel projectModel = (ManagedComboModel) getProjectCombo().getModel();
        int index = getProjectCombo().getSelectedIndex();
        int project_id = projectModel.getIdAt(index);
        volumeModel = new QueryComboModel(GET_ALL_VOLUME, /* required? */ false, new String[]{Integer.toString(project_id)}, "");
        volumeCombo.setModel(volumeModel);

    }

    private void volumeComboActionPerformed(java.awt.event.ActionEvent evt) {
        try {            
             //getBatchCombo().setEnabled(true);               
            
            volumeIndex = volumeCombo.getSelectedIndex();
            if (volumeIndex > -1) {
                volumeId = volumeModel.getIdAt(volumeIndex);
            }
            if (volumeId > 0) {
                flag = true;
                if(listingFlag){                   
                   getGenerateButton().setEnabled(true);
                }
            }

        } catch (Throwable th) {
            Log.quit(th);
        }
    }

    private void batchComboPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {

        batchModel = new QueryComboModel(GET_ALL_BATCH, /* required? */ false, new String[]{Integer.toString(volumeId)}, "");
        batchCombo.setModel(batchModel);

    }

    private void batchComboActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            sel = batchCombo.getSelectedIndex();
            if (sel > -1) {
                batchId = batchModel.getIdAt(sel);
            }
            if (batchId > 0) {
                flag = true;                
            }

        } catch (Throwable th) {
            Log.quit(th);
        }
    }

    private void checkEnableGenerateButton() {

        if (occurrenceText.getText().equals("")) {
            getGenerateButton().setEnabled(false);
        } else {
            getGenerateButton().setEnabled(true);
        }
    }

    // Implementation of ReportParameters interface
    /**
     * Allows access by report programs (subclasses of 
     * report.AbstractReport) to the parameter controls.
     */
    public JComboBox getProjectCombo() {
        return projectCombo;
    }

    /**
     * Allows access by report programs (subclasses of 
     * report.AbstractReport) to the parameter controls.
     */
    public JComboBox getTeamCombo() {
        return teamCombo;
    }

    /**
     * Allows access by report programs (subclasses of 
     * report.AbstractReport) to the parameter controls.
     */
    public DateSelectionField getDateField() {
        return (DateSelectionField) dateField;
    }

    /**
     * Allows access by report programs (subclasses of 
     * report.AbstractReport) to the parameter controls.
     */
    public DateSelectionField getEndDateField() {
        return (DateSelectionField) endDateField;
    }

    /**
     * Allows access by report programs (subclasses of 
     * report.AbstractReport) to the parameter controls.
     */
    public JTextField getDaysField() {
        return daysField;
    }

    /**
     * Allows access by report programs (subclasses of 
     * report.AbstractReport) to the parameter controls.
     */
    public JCheckBox getOrderCheckBox() {
        return orderCheckBox;
    }

    /**
     * Allows access by report programs (subclasses of 
     * report.AbstractReport) to the parameter controls.
     */
    public JCheckBox getOrderCheckBox2() {
        return orderCheckBox2;
    }

    /**
     * Allows access by report programs (subclasses of 
     * report.AbstractReport) to the parameter controls.
     */
    public JCheckBox getOrderCheckBox3() {
        return orderCheckBox3;
    }

    /**
     * Allows access by report programs (subclasses of 
     * report.AbstractReport) to the parameter controls.
     */
    public JButton getGenerateButton() {
        return generateButton;
    }

    public JComboBox getFieldCombo() {
        return fieldCombo;
    }

    public JComboBox getVolumeCombo() {

        return volumeCombo;
    }

    public JComboBox getBatchCombo() {

        return batchCombo;
    }

    public JTextField getOccurrence() {
        return occurrenceText;
    }

    public int getProjectId() {
        return projectId;
    }

    public void setProjectId(int projectId) {
        this.projectId = projectId;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton batchReportButton;
    private javax.swing.JRadioButton batchSummaryButton;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JPanel buttonPane;
    private javax.swing.JRadioButton dailyTotalButton;
    private javax.swing.JPanel dateField;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JTextField daysField;
    private javax.swing.JLabel daysLabel;
    private javax.swing.JPanel endDateField;
    private javax.swing.JLabel endDateLabel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton generateButton;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JRadioButton openReportButton;
    private javax.swing.JCheckBox orderCheckBox;
    private javax.swing.JCheckBox orderCheckBox2;
    private javax.swing.JCheckBox orderCheckBox3;
    private javax.swing.JPanel orderPanel;
    private javax.swing.JPanel paramPanel;
    private javax.swing.JRadioButton payrollButton;
    private javax.swing.JRadioButton payrollSummaryButton;
    private javax.swing.JRadioButton payrollTotalsButton;
    private javax.swing.JRadioButton profitButton;
    private javax.swing.JComboBox projectCombo;
    private javax.swing.JLabel projectLabel;
    private javax.swing.JRadioButton qcReportButton;
    private javax.swing.JRadioButton staleReportButton;
    private javax.swing.JComboBox teamCombo;
    private javax.swing.JLabel teamLabel;
    private javax.swing.JRadioButton teamOpenReportButton;
    private javax.swing.JRadioButton timesheetButton;
    private javax.swing.JLabel titleLabel;

	private javax.swing.JRadioButton codingManualButton;
    private javax.swing.JRadioButton listingReports;
	private javax.swing.JRadioButton tallyReports;
	private javax.swing.JComboBox fieldCombo;
	private javax.swing.JLabel fieldLabel;
	private javax.swing.JComboBox volumeCombo;
	private javax.swing.JLabel volumeLabel;
	private javax.swing.JComboBox batchCombo;
	private javax.swing.JLabel batchLabel;
	private javax.swing.JTextField occurrenceText;
	private javax.swing.JLabel occurrenceLabel;
    // End of variables declaration//GEN-END:variables
}
