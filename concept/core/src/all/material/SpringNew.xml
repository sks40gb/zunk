<?xml version="1.0" encoding="UTF-8"?>

Spring having this much of demand because of the following 3 reasons….
-----------------------------------------------------------------------------
    Simplicity
    Testability
    Loose Coupling


Module
-----------------------------------------------------------------------------
1. Core
2. Context
3. AOP
4. ORM
5. DAO
6. MVC
7. JEE


-----------------------------------------------------------------------------
Dependency injection:

type -

1. Setter injection
2. Construction injection
   Interface injection


2 ways to inform to the spring container about this object dependency
-----------------------------------------------------------------------------
    By using inner beans
    Using <ref /> element


<ref local/parent/bean=”id of collaborator bean”>


<ref local=”id value” />
If we use the local attribute in the <ref /> element then the spring IOC container will verify for the collaborator
bean with in same container [ i mean in same xml ]




public DemoBean
{
   public SampleBean sb;
   public void setSb(SampleBean sb)
   {
      this.sb = sb;
   }

   public void m1()
   {
      sb.m2();
   }
}

Note: See am calling m2() method in SamepleBean so now let us see how the xml file will be
<beans> <bean id="id1">
    <property name="sb" class="DemoBean">
        <ref local="id2" />
    </property> </bean>
    <bean id="id2" class="SampleBean"/>
</beans>


Collections
---------------------------------------------------------------------------------------
Set
List
Map
Properties


Constructor Injection
---------------------------------------------------------------------------------------
<bean id="id1" class="DemoBean">
    <constructor-arg value="myuserName"  index="0" />
    <constructor-arg value="mypassword"  index="1" />
</bean>

Constuctor Injection by ref
---------------------------------------------------------------------------------------
<bean id="id1" class="DemoBean">
    <constructor-arg ref="sb" />
</bean>
<bean id="sb" class="SampleBean" />



between setter and constructor injection
---------------------------------------------------------------------------------------
Setter Injection                                                                                                           Constructor Injection
1. In Setter Injection, partial injection of dependencies can possible,
    means if we have 3 dependencies like int, string, long, then its not necessary to inject all values if we use
    setter injection. If you are not inject it will takes default values for those primitives

2. Setter Injection will overrides the constructor injection value, provided if we write setter
    and constructor injection for the same property [i already told regarding this, hope you remember ]

3. If we have more dependencies for example 15 to 20 are there in our bean class then, in this case setter injection
    is not recommended as we need to write almost 20 setters right, bean length will increase.

4. Setter injection makes bean class object as mutable [We can change ]




Autowiring
---------------------------------------------------------------------------------------
1. byName
2. byType
3. Constructor
4. autoDetect    >> Constructor >> byType >> byName
5. none

1. byName
--------------
<beans>
  <bean id="id1" class="MyBean" autowire="byName" />
  <bean id="db" class="DemoBean" />
</beans>

--------------
<beans>
  <bean id="id1" class="java4s.Categories" autowire="byType">
      <property name="name" value="General Books" />
  </bean>
  <bean id="SomeThing" class="java4s.Book">
      <property name="bookname" value="The Kids" />
      <property name="bookprice" value="300" />
  </bean>
</beans>


