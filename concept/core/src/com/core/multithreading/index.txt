Thread.sleep
-----------------------------
    * Throws InterruptedException
    * The sleep period can be terminated by interrupts.
    * You cannot assume that invoking sleep will suspend the thread for precisely the time period specified.

Thread.interrupted
-----------------------------
    for (int i = 0; i < inputs.length; i++) {
        heavyCrunch(inputs[i]);
        if (Thread.interrupted()) {
            // We've been interrupted: no more crunching.
            return;
        }
    }

Thread.interrupt
-----------------------------
    * Invoking Thread.interrupt sets this flag.
    * By convention, any method that exits by throwing an InterruptedException clears interrupt status when it does so.
      However, it's always possible that interrupt status will immediately be set again, by another thread invoking interrupt.
    * Interrupt does not stop Thread

Thread.join();
-----------------------------
    * Thread.join() (as the documentation states), Waits for this thread to die.
    * Overloads of join allow the programmer to specify a waiting period. However, as with sleep, join is dependent
      on the OS for timing, so you should not assume that join will wait exactly as long as you specify.

    * Like sleep, join responds to an interrupt by exiting with an InterruptedException

Synchronization
-----------------------------
    * Threads communicate primarily by sharing access to fields and the objects reference fields refer to. This form of
      communication is extremely efficient, but makes two kinds of errors possible: thread interference and memory
      consistency errors. The tool needed to prevent these errors is synchronization.
    * Note : we should have two different object if two properties of Object being modified.
      Q : when we need more than one lock ?

    Thread Interference -  describes how errors are introduced when multiple threads access shared data.
    Memory Consistency Errors -  describes errors that result from inconsistent views of shared memory.
    Synchronized Methods -  describes a simple idiom that can effectively prevent thread interference and memory consistency errors.
    Implicit Locks and Synchronization - describes a more general synchronization idiom, and describes how synchronization is based on implicit locks.
    Atomic Access - talks about the general idea of operations that can't be interfered with by other threads.

Reentrant Synchronization
-----------------------------
   * Recall that a thread cannot acquire a lock owned by another thread. But a thread can acquire a lock that it already owns.
     Allowing a thread to acquire the same lock more than once enables reentrant synchronization.

Atomic Access
-----------------------------
    * An atomic action cannot stop in the middle: it either happens completely, or it doesn't happen at all.
    * c++, does not describe an atomic action. Even very simple expressions can define complex actions that can
      decompose into other actions. However, there are actions you can specify that are atomic:

         - Reads and writes are atomic for reference variables and for most primitive variables (all types except long and double).
         - Reads and writes are atomic for all variables declared volatile (including long and double variables).
    * This means that changes to a volatile variable are always visible to other threads.
    * Some of the classes in the java.util.concurrent package provide atomic methods that do not rely on synchronization

Liveness
-----------------------------
    * A concurrent application's ability to execute in a timely manner is known as its liveness.
    * liveness problem ex : deadlock, starvation and livelock.

Deadlock
-----------------------------
    * Deadlock describes a situation where two or more threads are blocked forever, waiting for each other.

Starvation
----------------------------
Starvation describes a situation where a thread is unable to gain regular access to shared resources and is unable to
make progress. This happens when shared resources are made unavailable for long periods by "greedy" threads.
For example, suppose an object provides a synchronized method that often takes a long time to return.
If one thread invokes this method frequently, other threads that also need frequent synchronized access to the same
object will often be blocked.

Livelock
----------------------------
A thread often acts in response to the action of another thread. If the other thread's action is also a response to the
action of another thread, then livelock may result. As with deadlock, livelocked threads are unable to make further
progress. However, the threads are not blocked — they are simply too busy responding to each other to resume work

Guarded Blocks
----------------------------
    * The most common coordination idiom is the guarded block. Such a block begins by polling a condition that must be
      true before the block can proceed. ex : ProducerConsumer
    * Note : Always invoke wait inside a loop.
    * Thread.wait and Thread.notifyAll must be within synchronized block or method since it aquire the lock first.


Immutable Objects
----------------------------
    * An object is considered immutable if its state cannot change after it is constructed.
    * Maximum reliance on immutable objects is widely accepted as a sound strategy for creating simple, reliable code.
    * How to make Immutable class

    1. Don't provide "setter" methods — methods that modify fields or objects referred to by fields.
    2. Make all fields final and private.
    3. Don't allow subclasses to override methods. The simplest way to do this is to declare the class as final.
        A more sophisticated approach is to make the constructor private and construct instances in factory methods.
    3. If the instance fields include references to mutable objects, don't allow those objects to be changed:
        Don't provide methods that modify the mutable objects.
        Don't share references to the mutable objects. Never store references to external, mutable objects passed to 
        the constructor; if necessary, create copies, and store references to the copies. Similarly, create copies of
        your internal mutable objects when necessary to avoid returning the originals in your methods.


High Level Concurrency Objects ( Java 1.5+)
========================================================================================================================

    1. Lock objects           -  support locking idioms that simplify many concurrent applications.
    2. Executors              - define a high-level API for launching and managing threads. Executor implementations provided by
                                java.util.concurrent provide thread pool management suitable for large-scale applications.
    3. Concurrent collections - make it easier to manage large collections of data, and can greatly reduce the need for synchronization.
    4. Atomic variables       - have features that minimize synchronization and help avoid memory consistency errors.
    5. ThreadLocalRandom      -(in JDK 7) provides efficient generation of pseudorandom numbers from multiple threads.

Lock Objects
----------------------------
    * java.util.concurrent.locks
    * Lock objects work very much like the implicit locks used by synchronized code.
    * Lock objects also support a wait/notify mechanism, through their associated Condition objects.
    * The biggest advantage of Lock objects over implicit locks is their ability to back out of an attempt to acquire a lock.
        1. The tryLock method backs out if the lock is not available immediately or before a timeout expires (if specified).
        2. The lockInterruptibly method backs out if another thread sends an interrupt before the lock is acquired.


Executor Interfaces
----------------------------
    The java.util.concurrent package defines three executor interfaces:

    1. Executor - a simple interface that supports launching new tasks. - uses Runnable object
    2. ExecutorService -  a subinterface of Executor, which adds features that help manage the life cycle, both of the
       individual tasks and of the executor itself. - uses Runnable and Callable objects
    3. ScheduledExecutorService - a subinterface of ExecutorService, supports future and/or periodic execution of tasks.

Thread Pools
----------------------------
 1. Fixed thread pool -  java.util.concurrent.Executors. newFixedThreadPool()
 2. newCachedThreadPool method -  creates an executor with an expandable thread pool.
 3. newSingleThreadExecutor method - creates an executor that executes a single task at a time.
 * If none of the executors provided by the above factory methods meet your needs, constructing instances of
    java.util.concurrent.ThreadPoolExecutor or
    java.util.concurrent.ScheduledThreadPoolExecutor will give you additional options.


Fork/Join
----------------------------
    * The fork/join framework is an implementation of the ExecutorService interface that helps you take advantage of multiple processors.
    * The fork/join framework is distinct because it uses a work-stealing algorithm.
    * The center of the fork/join framework is the ForkJoinPool class, an extension of the AbstractExecutorService class

Concurrent Collections
----------------------------
    1. BlockingQueue - defines a first-in-first-out data structure that blocks or times out when you attempt to add to
        a full queue, or retrieve from an empty queue.
    2. ConcurrentMap - is a subinterface of java.util.Map that defines useful atomic operations. ex :  ConcurrentHashMap
    3. ConcurrentNavigableMap - is a subinterface of ConcurrentMap that supports approximate matches.